// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package accounttable

import (
	"math/big"
	"strings"

	"github.com/FISCO-BCOS/go-sdk/abi"
	"github.com/FISCO-BCOS/go-sdk/abi/bind"
	"github.com/FISCO-BCOS/go-sdk/core/types"
	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/common"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = abi.U256
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
)

// AccountTableABI is the input ABI used to generate the binding from.
const AccountTableABI = "[{\"constant\":false,\"inputs\":[{\"name\":\"user_id1\",\"type\":\"string\"},{\"name\":\"user_id2\",\"type\":\"string\"},{\"name\":\"money\",\"type\":\"int256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"int256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"user_id\",\"type\":\"string\"},{\"name\":\"user_money\",\"type\":\"int256\"},{\"name\":\"user_name\",\"type\":\"string\"},{\"name\":\"user_icon\",\"type\":\"string\"}],\"name\":\"insert\",\"outputs\":[{\"name\":\"\",\"type\":\"int256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"user_id\",\"type\":\"string\"}],\"name\":\"remove\",\"outputs\":[{\"name\":\"\",\"type\":\"int256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"user_id\",\"type\":\"string\"},{\"name\":\"user_money\",\"type\":\"int256\"},{\"name\":\"user_name\",\"type\":\"string\"},{\"name\":\"user_icon\",\"type\":\"string\"}],\"name\":\"update\",\"outputs\":[{\"name\":\"\",\"type\":\"int256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"user_id\",\"type\":\"string\"}],\"name\":\"select\",\"outputs\":[{\"name\":\"\",\"type\":\"string[]\"},{\"name\":\"\",\"type\":\"int256[]\"},{\"name\":\"\",\"type\":\"string[]\"},{\"name\":\"\",\"type\":\"string[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"count\",\"type\":\"int256\"}],\"name\":\"CreateResult\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"count\",\"type\":\"int256\"}],\"name\":\"InsertResult\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"count\",\"type\":\"int256\"}],\"name\":\"UpdateResult\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"count\",\"type\":\"int256\"}],\"name\":\"RemoveResult\",\"type\":\"event\"}]"

// AccountTableBin is the compiled bytecode used for deploying new contracts.
var AccountTableBin = "0x60806040523480156200001157600080fd5b506110016000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166356004b6a6040805190810160405280600681526020017f745f7573657200000000000000000000000000000000000000000000000000008152506040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016200010191906200024a565b602060405180830381600087803b1580156200011c57600080fd5b505af115801562000131573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525062000157919081019062000174565b50620002f4565b60006200016c8251620002a3565b905092915050565b6000602082840312156200018757600080fd5b600062000197848285016200015e565b91505092915050565b6000620001ad8262000298565b808452620001c3816020860160208601620002ad565b620001ce81620002e3565b602085010191505092915050565b6000600782527f757365725f6964000000000000000000000000000000000000000000000000006020830152604082019050919050565b6000601e82527f757365725f6d6f6e65792c757365725f6e616d652c757365725f69636f6e00006020830152604082019050919050565b60006060820190508181036000830152620002668184620001a0565b905081810360208301526200027b81620001dc565b90508181036040830152620002908162000213565b905092915050565b600081519050919050565b6000819050919050565b60005b83811015620002cd578082015181840152602081019050620002b0565b83811115620002dd576000848401525b50505050565b6000601f19601f8301169050919050565b612e9080620003046000396000f3fe608060405260043610610067576000357c0100000000000000000000000000000000000000000000000000000000900480631de45b101461006c57806353228063146100a957806380599e4b146100e6578063db842ce714610123578063fcd7e3c114610160575b600080fd5b34801561007857600080fd5b50610093600480360361008e91908101906126f2565b6101a0565b6040516100a09190612a1f565b60405180910390f35b3480156100b557600080fd5b506100d060048036036100cb9190810190612647565b610c30565b6040516100dd9190612a1f565b60405180910390f35b3480156100f257600080fd5b5061010d600480360361010891908101906125c5565b6110dc565b60405161011a9190612a1f565b60405180910390f35b34801561012f57600080fd5b5061014a60048036036101459190810190612647565b6113f0565b6040516101579190612a1f565b60405180910390f35b34801561016c57600080fd5b50610187600480360361018291908101906125c5565b6119c4565b60405161019794939291906129be565b60405180910390f35b6000806000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663f23f63c96040805190810160405280600681526020017f745f7573657200000000000000000000000000000000000000000000000000008152506040518263ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040161024e9190612a55565b60206040518083038186803b15801561026657600080fd5b505afa15801561027a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061029e9190810190612573565b905060008173ffffffffffffffffffffffffffffffffffffffff16637857d7c96040518163ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040160206040518083038186803b15801561030457600080fd5b505afa158015610318573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061033c91908101906124f8565b905060008273ffffffffffffffffffffffffffffffffffffffff1663e8434e3988846040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401610397929190612a77565b60206040518083038186803b1580156103af57600080fd5b505afa1580156103c3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506103e79190810190612521565b905060008173ffffffffffffffffffffffffffffffffffffffff1663846719e060006040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016104419190612a3a565b60206040518083038186803b15801561045957600080fd5b505afa15801561046d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250610491919081019061254a565b90508073ffffffffffffffffffffffffffffffffffffffff16632ef8ba74878373ffffffffffffffffffffffffffffffffffffffff1663fda69fae6040518163ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040161050390612b6a565b60206040518083038186803b15801561051b57600080fd5b505afa15801561052f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250610553919081019061259c565b036040518263ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040161058c9190612b8a565b600060405180830381600087803b1580156105a657600080fd5b505af11580156105ba573d6000803e3d6000fd5b5050505060008473ffffffffffffffffffffffffffffffffffffffff1663e8434e3989866040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401610617929190612a77565b60206040518083038186803b15801561062f57600080fd5b505afa158015610643573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506106679190810190612521565b905060008173ffffffffffffffffffffffffffffffffffffffff1663846719e060006040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016106c19190612a3a565b60206040518083038186803b1580156106d957600080fd5b505afa1580156106ed573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250610711919081019061254a565b90508073ffffffffffffffffffffffffffffffffffffffff16632ef8ba74898373ffffffffffffffffffffffffffffffffffffffff1663fda69fae6040518163ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040161078390612b6a565b60206040518083038186803b15801561079b57600080fd5b505afa1580156107af573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506107d3919081019061259c565b016040518263ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040161080c9190612b8a565b600060405180830381600087803b15801561082657600080fd5b505af115801561083a573d6000803e3d6000fd5b5050505060008673ffffffffffffffffffffffffffffffffffffffff16637857d7c96040518163ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040160206040518083038186803b1580156108a257600080fd5b505afa1580156108b6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506108da91908101906124f8565b90508073ffffffffffffffffffffffffffffffffffffffff1663cd30a1d18c6040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016109319190612bd8565b600060405180830381600087803b15801561094b57600080fd5b505af115801561095f573d6000803e3d6000fd5b5050505060008773ffffffffffffffffffffffffffffffffffffffff1663bf2b70a18d87856040518463ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016109be93929190612ad7565b602060405180830381600087803b1580156109d857600080fd5b505af11580156109ec573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250610a10919081019061259c565b905060008873ffffffffffffffffffffffffffffffffffffffff16637857d7c96040518163ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040160206040518083038186803b158015610a7657600080fd5b505afa158015610a8a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250610aae91908101906124f8565b90508073ffffffffffffffffffffffffffffffffffffffff1663cd30a1d18d6040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401610b059190612bd8565b600060405180830381600087803b158015610b1f57600080fd5b505af1158015610b33573d6000803e3d6000fd5b505050508873ffffffffffffffffffffffffffffffffffffffff1663bf2b70a18d86846040518463ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401610b9093929190612ad7565b602060405180830381600087803b158015610baa57600080fd5b505af1158015610bbe573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250610be2919081019061259c565b820191507f8e5890af40fc24a059396aca2f83d6ce41fcef086876548fa4fb8ec27e9d292a82604051610c159190612a1f565b60405180910390a18199505050505050505050509392505050565b6000806000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663f23f63c96040805190810160405280600681526020017f745f7573657200000000000000000000000000000000000000000000000000008152506040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401610cde9190612a55565b60206040518083038186803b158015610cf657600080fd5b505afa158015610d0a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250610d2e9190810190612573565b905060008173ffffffffffffffffffffffffffffffffffffffff166313db93466040518163ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040160206040518083038186803b158015610d9457600080fd5b505afa158015610da8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250610dcc919081019061254a565b90508073ffffffffffffffffffffffffffffffffffffffff1663e942b516886040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401610e239190612bd8565b600060405180830381600087803b158015610e3d57600080fd5b505af1158015610e51573d6000803e3d6000fd5b505050508073ffffffffffffffffffffffffffffffffffffffff1663e942b516866040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401610eaa9190612c2d565b600060405180830381600087803b158015610ec457600080fd5b505af1158015610ed8573d6000803e3d6000fd5b505050508073ffffffffffffffffffffffffffffffffffffffff16632ef8ba74876040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401610f319190612b8a565b600060405180830381600087803b158015610f4b57600080fd5b505af1158015610f5f573d6000803e3d6000fd5b505050508073ffffffffffffffffffffffffffffffffffffffff1663e942b516856040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401610fb89190612b35565b600060405180830381600087803b158015610fd257600080fd5b505af1158015610fe6573d6000803e3d6000fd5b5050505060008273ffffffffffffffffffffffffffffffffffffffff166331afac3689846040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401611043929190612aa7565b602060405180830381600087803b15801561105d57600080fd5b505af1158015611071573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250611095919081019061259c565b90507fc57b01fa77f41df77eaab79a0e2623fab2e7ae3e9530d9b1cab225ad65f2b7ce816040516110c69190612a1f565b60405180910390a1809350505050949350505050565b6000806000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663f23f63c96040805190810160405280600681526020017f745f7573657200000000000000000000000000000000000000000000000000008152506040518263ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040161118a9190612a55565b60206040518083038186803b1580156111a257600080fd5b505afa1580156111b6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506111da9190810190612573565b905060008173ffffffffffffffffffffffffffffffffffffffff16637857d7c96040518163ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040160206040518083038186803b15801561124057600080fd5b505afa158015611254573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061127891908101906124f8565b90508073ffffffffffffffffffffffffffffffffffffffff1663cd30a1d1856040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016112cf9190612bd8565b600060405180830381600087803b1580156112e957600080fd5b505af11580156112fd573d6000803e3d6000fd5b5050505060008273ffffffffffffffffffffffffffffffffffffffff166328bb211786846040518363ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040161135a929190612a77565b602060405180830381600087803b15801561137457600080fd5b505af1158015611388573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506113ac919081019061259c565b90507f4b930e280fe29620bdff00c88155d46d6d82a39f45dd5c3ea114dc3157358112816040516113dd9190612a1f565b60405180910390a1809350505050919050565b6000806000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663f23f63c96040805190810160405280600681526020017f745f7573657200000000000000000000000000000000000000000000000000008152506040518263ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040161149e9190612a55565b60206040518083038186803b1580156114b657600080fd5b505afa1580156114ca573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506114ee9190810190612573565b905060008173ffffffffffffffffffffffffffffffffffffffff166313db93466040518163ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040160206040518083038186803b15801561155457600080fd5b505afa158015611568573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061158c919081019061254a565b90508073ffffffffffffffffffffffffffffffffffffffff1663e942b516886040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016115e39190612bd8565b600060405180830381600087803b1580156115fd57600080fd5b505af1158015611611573d6000803e3d6000fd5b505050508073ffffffffffffffffffffffffffffffffffffffff16632ef8ba74876040518263ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040161166a9190612b8a565b600060405180830381600087803b15801561168457600080fd5b505af1158015611698573d6000803e3d6000fd5b505050508073ffffffffffffffffffffffffffffffffffffffff1663e942b516866040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016116f19190612c2d565b600060405180830381600087803b15801561170b57600080fd5b505af115801561171f573d6000803e3d6000fd5b505050508073ffffffffffffffffffffffffffffffffffffffff1663e942b516856040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016117789190612b35565b600060405180830381600087803b15801561179257600080fd5b505af11580156117a6573d6000803e3d6000fd5b5050505060008273ffffffffffffffffffffffffffffffffffffffff16637857d7c96040518163ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040160206040518083038186803b15801561180e57600080fd5b505afa158015611822573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061184691908101906124f8565b90508073ffffffffffffffffffffffffffffffffffffffff1663cd30a1d1896040518263ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040161189d9190612bd8565b600060405180830381600087803b1580156118b757600080fd5b505af11580156118cb573d6000803e3d6000fd5b5050505060008373ffffffffffffffffffffffffffffffffffffffff1663bf2b70a18a85856040518463ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040161192a93929190612ad7565b602060405180830381600087803b15801561194457600080fd5b505af1158015611958573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061197c919081019061259c565b90507f8e5890af40fc24a059396aca2f83d6ce41fcef086876548fa4fb8ec27e9d292a816040516119ad9190612a1f565b60405180910390a180945050505050949350505050565b60608060608060008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663f23f63c96040805190810160405280600681526020017f745f7573657200000000000000000000000000000000000000000000000000008152506040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401611a779190612a55565b60206040518083038186803b158015611a8f57600080fd5b505afa158015611aa3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250611ac79190810190612573565b905060008173ffffffffffffffffffffffffffffffffffffffff16637857d7c96040518163ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040160206040518083038186803b158015611b2d57600080fd5b505afa158015611b41573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250611b6591908101906124f8565b905060008273ffffffffffffffffffffffffffffffffffffffff1663e8434e3989846040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401611bc0929190612a77565b60206040518083038186803b158015611bd857600080fd5b505afa158015611bec573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250611c109190810190612521565b905060608173ffffffffffffffffffffffffffffffffffffffff1663949d225d6040518163ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040160206040518083038186803b158015611c7657600080fd5b505afa158015611c8a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250611cae919081019061259c565b604051908082528060200260200182016040528015611ce157816020015b6060815260200190600190039081611ccc5790505b50905060608273ffffffffffffffffffffffffffffffffffffffff1663949d225d6040518163ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040160206040518083038186803b158015611d4857600080fd5b505afa158015611d5c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250611d80919081019061259c565b604051908082528060200260200182016040528015611dae5781602001602082028038833980820191505090505b50905060608373ffffffffffffffffffffffffffffffffffffffff1663949d225d6040518163ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040160206040518083038186803b158015611e1557600080fd5b505afa158015611e29573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250611e4d919081019061259c565b604051908082528060200260200182016040528015611e8057816020015b6060815260200190600190039081611e6b5790505b50905060608473ffffffffffffffffffffffffffffffffffffffff1663949d225d6040518163ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040160206040518083038186803b158015611ee757600080fd5b505afa158015611efb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250611f1f919081019061259c565b604051908082528060200260200182016040528015611f5257816020015b6060815260200190600190039081611f3d5790505b50905060008090505b8573ffffffffffffffffffffffffffffffffffffffff1663949d225d6040518163ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040160206040518083038186803b158015611fbd57600080fd5b505afa158015611fd1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250611ff5919081019061259c565b8112156123b95760008673ffffffffffffffffffffffffffffffffffffffff1663846719e0836040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016120539190612a1f565b60206040518083038186803b15801561206b57600080fd5b505afa15801561207f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506120a3919081019061254a565b90508073ffffffffffffffffffffffffffffffffffffffff16639c981fcb6040518163ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016120f890612bb8565b60006040518083038186803b15801561211057600080fd5b505afa158015612124573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f8201168201806040525061214d9190810190612606565b868381518110151561215b57fe5b906020019060200201819052508073ffffffffffffffffffffffffffffffffffffffff1663fda69fae6040518163ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016121bb90612b6a565b60206040518083038186803b1580156121d357600080fd5b505afa1580156121e7573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061220b919081019061259c565b858381518110151561221957fe5b90602001906020020181815250508073ffffffffffffffffffffffffffffffffffffffff16639c981fcb6040518163ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040161227a90612c0d565b60006040518083038186803b15801561229257600080fd5b505afa1580156122a6573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052506122cf9190810190612606565b84838151811015156122dd57fe5b906020019060200201819052508073ffffffffffffffffffffffffffffffffffffffff16639c981fcb6040518163ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040161233d90612b15565b60006040518083038186803b15801561235557600080fd5b505afa158015612369573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052506123929190810190612606565b83838151811015156123a057fe5b9060200190602002018190525050806001019050611f5b565b50838383839a509a509a509a50505050505050509193509193565b60006123e08251612d57565b905092915050565b60006123f48251612d69565b905092915050565b60006124088251612d7b565b905092915050565b600061241c8251612d8d565b905092915050565b60006124308235612d9f565b905092915050565b60006124448251612d9f565b905092915050565b600082601f830112151561245f57600080fd5b813561247261246d82612c8f565b612c62565b9150808252602083016020830185838301111561248e57600080fd5b612499838284612e03565b50505092915050565b600082601f83011215156124b557600080fd5b81516124c86124c382612c8f565b612c62565b915080825260208301602083018583830111156124e457600080fd5b6124ef838284612e12565b50505092915050565b60006020828403121561250a57600080fd5b6000612518848285016123d4565b91505092915050565b60006020828403121561253357600080fd5b6000612541848285016123e8565b91505092915050565b60006020828403121561255c57600080fd5b600061256a848285016123fc565b91505092915050565b60006020828403121561258557600080fd5b600061259384828501612410565b91505092915050565b6000602082840312156125ae57600080fd5b60006125bc84828501612438565b91505092915050565b6000602082840312156125d757600080fd5b600082013567ffffffffffffffff8111156125f157600080fd5b6125fd8482850161244c565b91505092915050565b60006020828403121561261857600080fd5b600082015167ffffffffffffffff81111561263257600080fd5b61263e848285016124a2565b91505092915050565b6000806000806080858703121561265d57600080fd5b600085013567ffffffffffffffff81111561267757600080fd5b6126838782880161244c565b945050602061269487828801612424565b935050604085013567ffffffffffffffff8111156126b157600080fd5b6126bd8782880161244c565b925050606085013567ffffffffffffffff8111156126da57600080fd5b6126e68782880161244c565b91505092959194509250565b60008060006060848603121561270757600080fd5b600084013567ffffffffffffffff81111561272157600080fd5b61272d8682870161244c565b935050602084013567ffffffffffffffff81111561274a57600080fd5b6127568682870161244c565b925050604061276786828701612424565b9150509250925092565b600061277c82612cd5565b80845260208401935061278e83612cbb565b60005b828110156127c0576127a4868351612858565b6127ad82612d01565b9150602086019550600181019050612791565b50849250505092915050565b60006127d782612ce0565b808452602084019350836020820285016127f085612cc8565b60005b8481101561282957838303885261280b8383516128ac565b925061281682612d0e565b91506020880197506001810190506127f3565b508196508694505050505092915050565b61284381612da9565b82525050565b61285281612dcd565b82525050565b61286181612d2d565b82525050565b61287081612df1565b82525050565b600061288182612cf6565b808452612895816020860160208601612e12565b61289e81612e45565b602085010191505092915050565b60006128b782612ceb565b8084526128cb816020860160208601612e12565b6128d481612e45565b602085010191505092915050565b6000600982527f757365725f69636f6e00000000000000000000000000000000000000000000006020830152604082019050919050565b6000600a82527f757365725f6d6f6e6579000000000000000000000000000000000000000000006020830152604082019050919050565b6000600782527f757365725f6964000000000000000000000000000000000000000000000000006020830152604082019050919050565b6000600982527f757365725f6e616d6500000000000000000000000000000000000000000000006020830152604082019050919050565b600060808201905081810360008301526129d881876127cc565b905081810360208301526129ec8186612771565b90508181036040830152612a0081856127cc565b90508181036060830152612a1481846127cc565b905095945050505050565b6000602082019050612a346000830184612858565b92915050565b6000602082019050612a4f6000830184612867565b92915050565b60006020820190508181036000830152612a6f81846128ac565b905092915050565b60006040820190508181036000830152612a918185612876565b9050612aa0602083018461283a565b9392505050565b60006040820190508181036000830152612ac18185612876565b9050612ad06020830184612849565b9392505050565b60006060820190508181036000830152612af18186612876565b9050612b006020830185612849565b612b0d604083018461283a565b949350505050565b60006020820190508181036000830152612b2e816128e2565b9050919050565b60006040820190508181036000830152612b4e816128e2565b90508181036020830152612b628184612876565b905092915050565b60006020820190508181036000830152612b8381612919565b9050919050565b60006040820190508181036000830152612ba381612919565b9050612bb26020830184612858565b92915050565b60006020820190508181036000830152612bd181612950565b9050919050565b60006040820190508181036000830152612bf181612950565b90508181036020830152612c058184612876565b905092915050565b60006020820190508181036000830152612c2681612987565b9050919050565b60006040820190508181036000830152612c4681612987565b90508181036020830152612c5a8184612876565b905092915050565b6000604051905081810181811067ffffffffffffffff82111715612c8557600080fd5b8060405250919050565b600067ffffffffffffffff821115612ca657600080fd5b601f19601f8301169050602081019050919050565b6000602082019050919050565b6000602082019050919050565b600081519050919050565b600081519050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b6000602082019050919050565b6000612d2682612d37565b9050919050565b6000819050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000612d6282612d1b565b9050919050565b6000612d7482612d1b565b9050919050565b6000612d8682612d1b565b9050919050565b6000612d9882612d1b565b9050919050565b6000819050919050565b6000612db482612dbb565b9050919050565b6000612dc682612d37565b9050919050565b6000612dd882612ddf565b9050919050565b6000612dea82612d37565b9050919050565b6000612dfc82612d2d565b9050919050565b82818337600083830152505050565b60005b83811015612e30578082015181840152602081019050612e15565b83811115612e3f576000848401525b50505050565b6000601f19601f830116905091905056fea265627a7a7230582097f3b93d35e0665507f2bf45cf576a0fc571586a8e4428ebbb039e80c3252ebf6c6578706572696d656e74616cf50037"

// DeployAccountTable deploys a new contract, binding an instance of AccountTable to it.
func DeployAccountTable(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *AccountTable, error) {
	parsed, err := abi.JSON(strings.NewReader(AccountTableABI))
	if err != nil {
		return common.Address{}, nil, nil, err
	}

	address, tx, contract, err := bind.DeployContract(auth, parsed, common.FromHex(AccountTableBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &AccountTable{AccountTableCaller: AccountTableCaller{contract: contract}, AccountTableTransactor: AccountTableTransactor{contract: contract}, AccountTableFilterer: AccountTableFilterer{contract: contract}}, nil
}

func AsyncDeployAccountTable(auth *bind.TransactOpts, handler func(*types.Receipt, error), backend bind.ContractBackend) (*types.Transaction, error) {
	parsed, err := abi.JSON(strings.NewReader(AccountTableABI))
	if err != nil {
		return nil, err
	}

	tx, err := bind.AsyncDeployContract(auth, handler, parsed, common.FromHex(AccountTableBin), backend)
	if err != nil {
		return nil, err
	}
	return tx, nil
}

// AccountTable is an auto generated Go binding around a Solidity contract.
type AccountTable struct {
	AccountTableCaller     // Read-only binding to the contract
	AccountTableTransactor // Write-only binding to the contract
	AccountTableFilterer   // Log filterer for contract events
}

// AccountTableCaller is an auto generated read-only Go binding around a Solidity contract.
type AccountTableCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// AccountTableTransactor is an auto generated write-only Go binding around a Solidity contract.
type AccountTableTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// AccountTableFilterer is an auto generated log filtering Go binding around a Solidity contract events.
type AccountTableFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// AccountTableSession is an auto generated Go binding around a Solidity contract,
// with pre-set call and transact options.
type AccountTableSession struct {
	Contract     *AccountTable     // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// AccountTableCallerSession is an auto generated read-only Go binding around a Solidity contract,
// with pre-set call options.
type AccountTableCallerSession struct {
	Contract *AccountTableCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts       // Call options to use throughout this session
}

// AccountTableTransactorSession is an auto generated write-only Go binding around a Solidity contract,
// with pre-set transact options.
type AccountTableTransactorSession struct {
	Contract     *AccountTableTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts       // Transaction auth options to use throughout this session
}

// AccountTableRaw is an auto generated low-level Go binding around a Solidity contract.
type AccountTableRaw struct {
	Contract *AccountTable // Generic contract binding to access the raw methods on
}

// AccountTableCallerRaw is an auto generated low-level read-only Go binding around a Solidity contract.
type AccountTableCallerRaw struct {
	Contract *AccountTableCaller // Generic read-only contract binding to access the raw methods on
}

// AccountTableTransactorRaw is an auto generated low-level write-only Go binding around a Solidity contract.
type AccountTableTransactorRaw struct {
	Contract *AccountTableTransactor // Generic write-only contract binding to access the raw methods on
}

// NewAccountTable creates a new instance of AccountTable, bound to a specific deployed contract.
func NewAccountTable(address common.Address, backend bind.ContractBackend) (*AccountTable, error) {
	contract, err := bindAccountTable(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &AccountTable{AccountTableCaller: AccountTableCaller{contract: contract}, AccountTableTransactor: AccountTableTransactor{contract: contract}, AccountTableFilterer: AccountTableFilterer{contract: contract}}, nil
}

// NewAccountTableCaller creates a new read-only instance of AccountTable, bound to a specific deployed contract.
func NewAccountTableCaller(address common.Address, caller bind.ContractCaller) (*AccountTableCaller, error) {
	contract, err := bindAccountTable(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &AccountTableCaller{contract: contract}, nil
}

// NewAccountTableTransactor creates a new write-only instance of AccountTable, bound to a specific deployed contract.
func NewAccountTableTransactor(address common.Address, transactor bind.ContractTransactor) (*AccountTableTransactor, error) {
	contract, err := bindAccountTable(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &AccountTableTransactor{contract: contract}, nil
}

// NewAccountTableFilterer creates a new log filterer instance of AccountTable, bound to a specific deployed contract.
func NewAccountTableFilterer(address common.Address, filterer bind.ContractFilterer) (*AccountTableFilterer, error) {
	contract, err := bindAccountTable(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &AccountTableFilterer{contract: contract}, nil
}

// bindAccountTable binds a generic wrapper to an already deployed contract.
func bindAccountTable(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(AccountTableABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_AccountTable *AccountTableRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _AccountTable.Contract.AccountTableCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_AccountTable *AccountTableRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, *types.Receipt, error) {
	return _AccountTable.Contract.AccountTableTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_AccountTable *AccountTableRaw) TransactWithResult(opts *bind.TransactOpts, result interface{}, method string, params ...interface{}) (*types.Transaction, *types.Receipt, error) {
	return _AccountTable.Contract.AccountTableTransactor.contract.TransactWithResult(opts, result, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_AccountTable *AccountTableCallerRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _AccountTable.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_AccountTable *AccountTableTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, *types.Receipt, error) {
	return _AccountTable.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_AccountTable *AccountTableTransactorRaw) TransactWithResult(opts *bind.TransactOpts, result interface{}, method string, params ...interface{}) (*types.Transaction, *types.Receipt, error) {
	return _AccountTable.Contract.contract.TransactWithResult(opts, result, method, params...)
}

// Select is a free data retrieval call binding the contract method 0xfcd7e3c1.
//
// Solidity: function select(string user_id) constant returns(string[], int256[], string[], string[])
func (_AccountTable *AccountTableCaller) Select(opts *bind.CallOpts, user_id string) ([]string, []*big.Int, []string, []string, error) {
	var (
		ret0 = new([]string)
		ret1 = new([]*big.Int)
		ret2 = new([]string)
		ret3 = new([]string)
	)
	out := &[]interface{}{
		ret0,
		ret1,
		ret2,
		ret3,
	}
	err := _AccountTable.contract.Call(opts, out, "select", user_id)
	return *ret0, *ret1, *ret2, *ret3, err
}

// Select is a free data retrieval call binding the contract method 0xfcd7e3c1.
//
// Solidity: function select(string user_id) constant returns(string[], int256[], string[], string[])
func (_AccountTable *AccountTableSession) Select(user_id string) ([]string, []*big.Int, []string, []string, error) {
	return _AccountTable.Contract.Select(&_AccountTable.CallOpts, user_id)
}

// Select is a free data retrieval call binding the contract method 0xfcd7e3c1.
//
// Solidity: function select(string user_id) constant returns(string[], int256[], string[], string[])
func (_AccountTable *AccountTableCallerSession) Select(user_id string) ([]string, []*big.Int, []string, []string, error) {
	return _AccountTable.Contract.Select(&_AccountTable.CallOpts, user_id)
}

// Insert is a paid mutator transaction binding the contract method 0x53228063.
//
// Solidity: function insert(string user_id, int256 user_money, string user_name, string user_icon) returns(int256)
func (_AccountTable *AccountTableTransactor) Insert(opts *bind.TransactOpts, user_id string, user_money *big.Int, user_name string, user_icon string) (*big.Int, *types.Transaction, *types.Receipt, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	transaction, receipt, err := _AccountTable.contract.TransactWithResult(opts, out, "insert", user_id, user_money, user_name, user_icon)
	return *ret0, transaction, receipt, err
}

func (_AccountTable *AccountTableTransactor) AsyncInsert(handler func(*types.Receipt, error), opts *bind.TransactOpts, user_id string, user_money *big.Int, user_name string, user_icon string) (*types.Transaction, error) {
	return _AccountTable.contract.AsyncTransact(opts, handler, "insert", user_id, user_money, user_name, user_icon)
}

// Insert is a paid mutator transaction binding the contract method 0x53228063.
//
// Solidity: function insert(string user_id, int256 user_money, string user_name, string user_icon) returns(int256)
func (_AccountTable *AccountTableSession) Insert(user_id string, user_money *big.Int, user_name string, user_icon string) (*big.Int, *types.Transaction, *types.Receipt, error) {
	return _AccountTable.Contract.Insert(&_AccountTable.TransactOpts, user_id, user_money, user_name, user_icon)
}

func (_AccountTable *AccountTableSession) AsyncInsert(handler func(*types.Receipt, error), user_id string, user_money *big.Int, user_name string, user_icon string) (*types.Transaction, error) {
	return _AccountTable.Contract.AsyncInsert(handler, &_AccountTable.TransactOpts, user_id, user_money, user_name, user_icon)
}

// Insert is a paid mutator transaction binding the contract method 0x53228063.
//
// Solidity: function insert(string user_id, int256 user_money, string user_name, string user_icon) returns(int256)
func (_AccountTable *AccountTableTransactorSession) Insert(user_id string, user_money *big.Int, user_name string, user_icon string) (*big.Int, *types.Transaction, *types.Receipt, error) {
	return _AccountTable.Contract.Insert(&_AccountTable.TransactOpts, user_id, user_money, user_name, user_icon)
}

func (_AccountTable *AccountTableTransactorSession) AsyncInsert(handler func(*types.Receipt, error), user_id string, user_money *big.Int, user_name string, user_icon string) (*types.Transaction, error) {
	return _AccountTable.Contract.AsyncInsert(handler, &_AccountTable.TransactOpts, user_id, user_money, user_name, user_icon)
}

// Remove is a paid mutator transaction binding the contract method 0x80599e4b.
//
// Solidity: function remove(string user_id) returns(int256)
func (_AccountTable *AccountTableTransactor) Remove(opts *bind.TransactOpts, user_id string) (*big.Int, *types.Transaction, *types.Receipt, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	transaction, receipt, err := _AccountTable.contract.TransactWithResult(opts, out, "remove", user_id)
	return *ret0, transaction, receipt, err
}

func (_AccountTable *AccountTableTransactor) AsyncRemove(handler func(*types.Receipt, error), opts *bind.TransactOpts, user_id string) (*types.Transaction, error) {
	return _AccountTable.contract.AsyncTransact(opts, handler, "remove", user_id)
}

// Remove is a paid mutator transaction binding the contract method 0x80599e4b.
//
// Solidity: function remove(string user_id) returns(int256)
func (_AccountTable *AccountTableSession) Remove(user_id string) (*big.Int, *types.Transaction, *types.Receipt, error) {
	return _AccountTable.Contract.Remove(&_AccountTable.TransactOpts, user_id)
}

func (_AccountTable *AccountTableSession) AsyncRemove(handler func(*types.Receipt, error), user_id string) (*types.Transaction, error) {
	return _AccountTable.Contract.AsyncRemove(handler, &_AccountTable.TransactOpts, user_id)
}

// Remove is a paid mutator transaction binding the contract method 0x80599e4b.
//
// Solidity: function remove(string user_id) returns(int256)
func (_AccountTable *AccountTableTransactorSession) Remove(user_id string) (*big.Int, *types.Transaction, *types.Receipt, error) {
	return _AccountTable.Contract.Remove(&_AccountTable.TransactOpts, user_id)
}

func (_AccountTable *AccountTableTransactorSession) AsyncRemove(handler func(*types.Receipt, error), user_id string) (*types.Transaction, error) {
	return _AccountTable.Contract.AsyncRemove(handler, &_AccountTable.TransactOpts, user_id)
}

// Transfer is a paid mutator transaction binding the contract method 0x1de45b10.
//
// Solidity: function transfer(string user_id1, string user_id2, int256 money) returns(int256)
func (_AccountTable *AccountTableTransactor) Transfer(opts *bind.TransactOpts, user_id1 string, user_id2 string, money *big.Int) (*big.Int, *types.Transaction, *types.Receipt, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	transaction, receipt, err := _AccountTable.contract.TransactWithResult(opts, out, "transfer", user_id1, user_id2, money)
	return *ret0, transaction, receipt, err
}

func (_AccountTable *AccountTableTransactor) AsyncTransfer(handler func(*types.Receipt, error), opts *bind.TransactOpts, user_id1 string, user_id2 string, money *big.Int) (*types.Transaction, error) {
	return _AccountTable.contract.AsyncTransact(opts, handler, "transfer", user_id1, user_id2, money)
}

// Transfer is a paid mutator transaction binding the contract method 0x1de45b10.
//
// Solidity: function transfer(string user_id1, string user_id2, int256 money) returns(int256)
func (_AccountTable *AccountTableSession) Transfer(user_id1 string, user_id2 string, money *big.Int) (*big.Int, *types.Transaction, *types.Receipt, error) {
	return _AccountTable.Contract.Transfer(&_AccountTable.TransactOpts, user_id1, user_id2, money)
}

func (_AccountTable *AccountTableSession) AsyncTransfer(handler func(*types.Receipt, error), user_id1 string, user_id2 string, money *big.Int) (*types.Transaction, error) {
	return _AccountTable.Contract.AsyncTransfer(handler, &_AccountTable.TransactOpts, user_id1, user_id2, money)
}

// Transfer is a paid mutator transaction binding the contract method 0x1de45b10.
//
// Solidity: function transfer(string user_id1, string user_id2, int256 money) returns(int256)
func (_AccountTable *AccountTableTransactorSession) Transfer(user_id1 string, user_id2 string, money *big.Int) (*big.Int, *types.Transaction, *types.Receipt, error) {
	return _AccountTable.Contract.Transfer(&_AccountTable.TransactOpts, user_id1, user_id2, money)
}

func (_AccountTable *AccountTableTransactorSession) AsyncTransfer(handler func(*types.Receipt, error), user_id1 string, user_id2 string, money *big.Int) (*types.Transaction, error) {
	return _AccountTable.Contract.AsyncTransfer(handler, &_AccountTable.TransactOpts, user_id1, user_id2, money)
}

// Update is a paid mutator transaction binding the contract method 0xdb842ce7.
//
// Solidity: function update(string user_id, int256 user_money, string user_name, string user_icon) returns(int256)
func (_AccountTable *AccountTableTransactor) Update(opts *bind.TransactOpts, user_id string, user_money *big.Int, user_name string, user_icon string) (*big.Int, *types.Transaction, *types.Receipt, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	transaction, receipt, err := _AccountTable.contract.TransactWithResult(opts, out, "update", user_id, user_money, user_name, user_icon)
	return *ret0, transaction, receipt, err
}

func (_AccountTable *AccountTableTransactor) AsyncUpdate(handler func(*types.Receipt, error), opts *bind.TransactOpts, user_id string, user_money *big.Int, user_name string, user_icon string) (*types.Transaction, error) {
	return _AccountTable.contract.AsyncTransact(opts, handler, "update", user_id, user_money, user_name, user_icon)
}

// Update is a paid mutator transaction binding the contract method 0xdb842ce7.
//
// Solidity: function update(string user_id, int256 user_money, string user_name, string user_icon) returns(int256)
func (_AccountTable *AccountTableSession) Update(user_id string, user_money *big.Int, user_name string, user_icon string) (*big.Int, *types.Transaction, *types.Receipt, error) {
	return _AccountTable.Contract.Update(&_AccountTable.TransactOpts, user_id, user_money, user_name, user_icon)
}

func (_AccountTable *AccountTableSession) AsyncUpdate(handler func(*types.Receipt, error), user_id string, user_money *big.Int, user_name string, user_icon string) (*types.Transaction, error) {
	return _AccountTable.Contract.AsyncUpdate(handler, &_AccountTable.TransactOpts, user_id, user_money, user_name, user_icon)
}

// Update is a paid mutator transaction binding the contract method 0xdb842ce7.
//
// Solidity: function update(string user_id, int256 user_money, string user_name, string user_icon) returns(int256)
func (_AccountTable *AccountTableTransactorSession) Update(user_id string, user_money *big.Int, user_name string, user_icon string) (*big.Int, *types.Transaction, *types.Receipt, error) {
	return _AccountTable.Contract.Update(&_AccountTable.TransactOpts, user_id, user_money, user_name, user_icon)
}

func (_AccountTable *AccountTableTransactorSession) AsyncUpdate(handler func(*types.Receipt, error), user_id string, user_money *big.Int, user_name string, user_icon string) (*types.Transaction, error) {
	return _AccountTable.Contract.AsyncUpdate(handler, &_AccountTable.TransactOpts, user_id, user_money, user_name, user_icon)
}

// AccountTableCreateResult represents a CreateResult event raised by the AccountTable contract.
type AccountTableCreateResult struct {
	Count *big.Int
	Raw   types.Log // Blockchain specific contextual infos
}

// WatchCreateResult is a free log subscription operation binding the contract event 0xb5636cd912a73dcdb5b570dbe331dfa3e6435c93e029e642def2c8e40dacf210.
//
// Solidity: event CreateResult(int256 count)
func (_AccountTable *AccountTableFilterer) WatchCreateResult(fromBlock *uint64, handler func(int, []types.Log)) (string, error) {
	return _AccountTable.contract.WatchLogs(fromBlock, handler, "CreateResult")
}

func (_AccountTable *AccountTableFilterer) WatchAllCreateResult(fromBlock *uint64, handler func(int, []types.Log)) (string, error) {
	return _AccountTable.contract.WatchLogs(fromBlock, handler, "CreateResult")
}

// ParseCreateResult is a log parse operation binding the contract event 0xb5636cd912a73dcdb5b570dbe331dfa3e6435c93e029e642def2c8e40dacf210.
//
// Solidity: event CreateResult(int256 count)
func (_AccountTable *AccountTableFilterer) ParseCreateResult(log types.Log) (*AccountTableCreateResult, error) {
	event := new(AccountTableCreateResult)
	if err := _AccountTable.contract.UnpackLog(event, "CreateResult", log); err != nil {
		return nil, err
	}
	return event, nil
}

// WatchCreateResult is a free log subscription operation binding the contract event 0xb5636cd912a73dcdb5b570dbe331dfa3e6435c93e029e642def2c8e40dacf210.
//
// Solidity: event CreateResult(int256 count)
func (_AccountTable *AccountTableSession) WatchCreateResult(fromBlock *uint64, handler func(int, []types.Log)) (string, error) {
	return _AccountTable.Contract.WatchCreateResult(fromBlock, handler)
}

func (_AccountTable *AccountTableSession) WatchAllCreateResult(fromBlock *uint64, handler func(int, []types.Log)) (string, error) {
	return _AccountTable.Contract.WatchAllCreateResult(fromBlock, handler)
}

// ParseCreateResult is a log parse operation binding the contract event 0xb5636cd912a73dcdb5b570dbe331dfa3e6435c93e029e642def2c8e40dacf210.
//
// Solidity: event CreateResult(int256 count)
func (_AccountTable *AccountTableSession) ParseCreateResult(log types.Log) (*AccountTableCreateResult, error) {
	return _AccountTable.Contract.ParseCreateResult(log)
}

// AccountTableInsertResult represents a InsertResult event raised by the AccountTable contract.
type AccountTableInsertResult struct {
	Count *big.Int
	Raw   types.Log // Blockchain specific contextual infos
}

// WatchInsertResult is a free log subscription operation binding the contract event 0xc57b01fa77f41df77eaab79a0e2623fab2e7ae3e9530d9b1cab225ad65f2b7ce.
//
// Solidity: event InsertResult(int256 count)
func (_AccountTable *AccountTableFilterer) WatchInsertResult(fromBlock *uint64, handler func(int, []types.Log)) (string, error) {
	return _AccountTable.contract.WatchLogs(fromBlock, handler, "InsertResult")
}

func (_AccountTable *AccountTableFilterer) WatchAllInsertResult(fromBlock *uint64, handler func(int, []types.Log)) (string, error) {
	return _AccountTable.contract.WatchLogs(fromBlock, handler, "InsertResult")
}

// ParseInsertResult is a log parse operation binding the contract event 0xc57b01fa77f41df77eaab79a0e2623fab2e7ae3e9530d9b1cab225ad65f2b7ce.
//
// Solidity: event InsertResult(int256 count)
func (_AccountTable *AccountTableFilterer) ParseInsertResult(log types.Log) (*AccountTableInsertResult, error) {
	event := new(AccountTableInsertResult)
	if err := _AccountTable.contract.UnpackLog(event, "InsertResult", log); err != nil {
		return nil, err
	}
	return event, nil
}

// WatchInsertResult is a free log subscription operation binding the contract event 0xc57b01fa77f41df77eaab79a0e2623fab2e7ae3e9530d9b1cab225ad65f2b7ce.
//
// Solidity: event InsertResult(int256 count)
func (_AccountTable *AccountTableSession) WatchInsertResult(fromBlock *uint64, handler func(int, []types.Log)) (string, error) {
	return _AccountTable.Contract.WatchInsertResult(fromBlock, handler)
}

func (_AccountTable *AccountTableSession) WatchAllInsertResult(fromBlock *uint64, handler func(int, []types.Log)) (string, error) {
	return _AccountTable.Contract.WatchAllInsertResult(fromBlock, handler)
}

// ParseInsertResult is a log parse operation binding the contract event 0xc57b01fa77f41df77eaab79a0e2623fab2e7ae3e9530d9b1cab225ad65f2b7ce.
//
// Solidity: event InsertResult(int256 count)
func (_AccountTable *AccountTableSession) ParseInsertResult(log types.Log) (*AccountTableInsertResult, error) {
	return _AccountTable.Contract.ParseInsertResult(log)
}

// AccountTableRemoveResult represents a RemoveResult event raised by the AccountTable contract.
type AccountTableRemoveResult struct {
	Count *big.Int
	Raw   types.Log // Blockchain specific contextual infos
}

// WatchRemoveResult is a free log subscription operation binding the contract event 0x4b930e280fe29620bdff00c88155d46d6d82a39f45dd5c3ea114dc3157358112.
//
// Solidity: event RemoveResult(int256 count)
func (_AccountTable *AccountTableFilterer) WatchRemoveResult(fromBlock *uint64, handler func(int, []types.Log)) (string, error) {
	return _AccountTable.contract.WatchLogs(fromBlock, handler, "RemoveResult")
}

func (_AccountTable *AccountTableFilterer) WatchAllRemoveResult(fromBlock *uint64, handler func(int, []types.Log)) (string, error) {
	return _AccountTable.contract.WatchLogs(fromBlock, handler, "RemoveResult")
}

// ParseRemoveResult is a log parse operation binding the contract event 0x4b930e280fe29620bdff00c88155d46d6d82a39f45dd5c3ea114dc3157358112.
//
// Solidity: event RemoveResult(int256 count)
func (_AccountTable *AccountTableFilterer) ParseRemoveResult(log types.Log) (*AccountTableRemoveResult, error) {
	event := new(AccountTableRemoveResult)
	if err := _AccountTable.contract.UnpackLog(event, "RemoveResult", log); err != nil {
		return nil, err
	}
	return event, nil
}

// WatchRemoveResult is a free log subscription operation binding the contract event 0x4b930e280fe29620bdff00c88155d46d6d82a39f45dd5c3ea114dc3157358112.
//
// Solidity: event RemoveResult(int256 count)
func (_AccountTable *AccountTableSession) WatchRemoveResult(fromBlock *uint64, handler func(int, []types.Log)) (string, error) {
	return _AccountTable.Contract.WatchRemoveResult(fromBlock, handler)
}

func (_AccountTable *AccountTableSession) WatchAllRemoveResult(fromBlock *uint64, handler func(int, []types.Log)) (string, error) {
	return _AccountTable.Contract.WatchAllRemoveResult(fromBlock, handler)
}

// ParseRemoveResult is a log parse operation binding the contract event 0x4b930e280fe29620bdff00c88155d46d6d82a39f45dd5c3ea114dc3157358112.
//
// Solidity: event RemoveResult(int256 count)
func (_AccountTable *AccountTableSession) ParseRemoveResult(log types.Log) (*AccountTableRemoveResult, error) {
	return _AccountTable.Contract.ParseRemoveResult(log)
}

// AccountTableUpdateResult represents a UpdateResult event raised by the AccountTable contract.
type AccountTableUpdateResult struct {
	Count *big.Int
	Raw   types.Log // Blockchain specific contextual infos
}

// WatchUpdateResult is a free log subscription operation binding the contract event 0x8e5890af40fc24a059396aca2f83d6ce41fcef086876548fa4fb8ec27e9d292a.
//
// Solidity: event UpdateResult(int256 count)
func (_AccountTable *AccountTableFilterer) WatchUpdateResult(fromBlock *uint64, handler func(int, []types.Log)) (string, error) {
	return _AccountTable.contract.WatchLogs(fromBlock, handler, "UpdateResult")
}

func (_AccountTable *AccountTableFilterer) WatchAllUpdateResult(fromBlock *uint64, handler func(int, []types.Log)) (string, error) {
	return _AccountTable.contract.WatchLogs(fromBlock, handler, "UpdateResult")
}

// ParseUpdateResult is a log parse operation binding the contract event 0x8e5890af40fc24a059396aca2f83d6ce41fcef086876548fa4fb8ec27e9d292a.
//
// Solidity: event UpdateResult(int256 count)
func (_AccountTable *AccountTableFilterer) ParseUpdateResult(log types.Log) (*AccountTableUpdateResult, error) {
	event := new(AccountTableUpdateResult)
	if err := _AccountTable.contract.UnpackLog(event, "UpdateResult", log); err != nil {
		return nil, err
	}
	return event, nil
}

// WatchUpdateResult is a free log subscription operation binding the contract event 0x8e5890af40fc24a059396aca2f83d6ce41fcef086876548fa4fb8ec27e9d292a.
//
// Solidity: event UpdateResult(int256 count)
func (_AccountTable *AccountTableSession) WatchUpdateResult(fromBlock *uint64, handler func(int, []types.Log)) (string, error) {
	return _AccountTable.Contract.WatchUpdateResult(fromBlock, handler)
}

func (_AccountTable *AccountTableSession) WatchAllUpdateResult(fromBlock *uint64, handler func(int, []types.Log)) (string, error) {
	return _AccountTable.Contract.WatchAllUpdateResult(fromBlock, handler)
}

// ParseUpdateResult is a log parse operation binding the contract event 0x8e5890af40fc24a059396aca2f83d6ce41fcef086876548fa4fb8ec27e9d292a.
//
// Solidity: event UpdateResult(int256 count)
func (_AccountTable *AccountTableSession) ParseUpdateResult(log types.Log) (*AccountTableUpdateResult, error) {
	return _AccountTable.Contract.ParseUpdateResult(log)
}
