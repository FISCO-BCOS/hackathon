// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package collectiontable

import (
	"math/big"
	"strings"

	"github.com/FISCO-BCOS/go-sdk/abi"
	"github.com/FISCO-BCOS/go-sdk/abi/bind"
	"github.com/FISCO-BCOS/go-sdk/core/types"
	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/common"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = abi.U256
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
)

// CollectiontableABI is the input ABI used to generate the binding from.
const CollectiontableABI = "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"count\",\"type\":\"int256\"}],\"name\":\"CreateResult\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"count\",\"type\":\"int256\"}],\"name\":\"InsertResult\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"count\",\"type\":\"int256\"}],\"name\":\"RemoveResult\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"count\",\"type\":\"int256\"}],\"name\":\"TransferResult\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"count\",\"type\":\"int256\"}],\"name\":\"UpdateResult\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"user_id1\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"user_id2\",\"type\":\"string\"},{\"internalType\":\"int256\",\"name\":\"money\",\"type\":\"int256\"}],\"name\":\"account_transfer\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"user_id1\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"user_id2\",\"type\":\"string\"},{\"internalType\":\"int256\",\"name\":\"money\",\"type\":\"int256\"}],\"name\":\"gincome\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"collection_id\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"collection_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"owner_id\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"certificate_time\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"certificate_organization\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"collection_semantic\",\"type\":\"string\"}],\"name\":\"insert\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"collection_id\",\"type\":\"string\"}],\"name\":\"remove\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"collection_id\",\"type\":\"string\"}],\"name\":\"select\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"user_id1\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"user_id2\",\"type\":\"string\"},{\"internalType\":\"int256\",\"name\":\"money\",\"type\":\"int256\"},{\"internalType\":\"string\",\"name\":\"collection_id\",\"type\":\"string\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"collection_id\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"collection_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"owner_id\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"certificate_time\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"certificate_organization\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"collection_semantic\",\"type\":\"string\"}],\"name\":\"update\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]"

// CollectiontableBin is the compiled bytecode used for deploying new contracts.
var CollectiontableBin = ""

// DeployCollectiontable deploys a new contract, binding an instance of Collectiontable to it.
func DeployCollectiontable(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *Collectiontable, error) {
	parsed, err := abi.JSON(strings.NewReader(CollectiontableABI))
	if err != nil {
		return common.Address{}, nil, nil, err
	}

	address, tx, contract, err := bind.DeployContract(auth, parsed, common.FromHex(CollectiontableBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &Collectiontable{CollectiontableCaller: CollectiontableCaller{contract: contract}, CollectiontableTransactor: CollectiontableTransactor{contract: contract}, CollectiontableFilterer: CollectiontableFilterer{contract: contract}}, nil
}

func AsyncDeployCollectiontable(auth *bind.TransactOpts, handler func(*types.Receipt, error), backend bind.ContractBackend) (*types.Transaction, error) {
	parsed, err := abi.JSON(strings.NewReader(CollectiontableABI))
	if err != nil {
		return nil, err
	}

	tx, err := bind.AsyncDeployContract(auth, handler, parsed, common.FromHex(CollectiontableBin), backend)
	if err != nil {
		return nil, err
	}
	return tx, nil
}

// Collectiontable is an auto generated Go binding around a Solidity contract.
type Collectiontable struct {
	CollectiontableCaller     // Read-only binding to the contract
	CollectiontableTransactor // Write-only binding to the contract
	CollectiontableFilterer   // Log filterer for contract events
}

// CollectiontableCaller is an auto generated read-only Go binding around a Solidity contract.
type CollectiontableCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// CollectiontableTransactor is an auto generated write-only Go binding around a Solidity contract.
type CollectiontableTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// CollectiontableFilterer is an auto generated log filtering Go binding around a Solidity contract events.
type CollectiontableFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// CollectiontableSession is an auto generated Go binding around a Solidity contract,
// with pre-set call and transact options.
type CollectiontableSession struct {
	Contract     *Collectiontable  // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// CollectiontableCallerSession is an auto generated read-only Go binding around a Solidity contract,
// with pre-set call options.
type CollectiontableCallerSession struct {
	Contract *CollectiontableCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts          // Call options to use throughout this session
}

// CollectiontableTransactorSession is an auto generated write-only Go binding around a Solidity contract,
// with pre-set transact options.
type CollectiontableTransactorSession struct {
	Contract     *CollectiontableTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts          // Transaction auth options to use throughout this session
}

// CollectiontableRaw is an auto generated low-level Go binding around a Solidity contract.
type CollectiontableRaw struct {
	Contract *Collectiontable // Generic contract binding to access the raw methods on
}

// CollectiontableCallerRaw is an auto generated low-level read-only Go binding around a Solidity contract.
type CollectiontableCallerRaw struct {
	Contract *CollectiontableCaller // Generic read-only contract binding to access the raw methods on
}

// CollectiontableTransactorRaw is an auto generated low-level write-only Go binding around a Solidity contract.
type CollectiontableTransactorRaw struct {
	Contract *CollectiontableTransactor // Generic write-only contract binding to access the raw methods on
}

// NewCollectiontable creates a new instance of Collectiontable, bound to a specific deployed contract.
func NewCollectiontable(address common.Address, backend bind.ContractBackend) (*Collectiontable, error) {
	contract, err := bindCollectiontable(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Collectiontable{CollectiontableCaller: CollectiontableCaller{contract: contract}, CollectiontableTransactor: CollectiontableTransactor{contract: contract}, CollectiontableFilterer: CollectiontableFilterer{contract: contract}}, nil
}

// NewCollectiontableCaller creates a new read-only instance of Collectiontable, bound to a specific deployed contract.
func NewCollectiontableCaller(address common.Address, caller bind.ContractCaller) (*CollectiontableCaller, error) {
	contract, err := bindCollectiontable(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &CollectiontableCaller{contract: contract}, nil
}

// NewCollectiontableTransactor creates a new write-only instance of Collectiontable, bound to a specific deployed contract.
func NewCollectiontableTransactor(address common.Address, transactor bind.ContractTransactor) (*CollectiontableTransactor, error) {
	contract, err := bindCollectiontable(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &CollectiontableTransactor{contract: contract}, nil
}

// NewCollectiontableFilterer creates a new log filterer instance of Collectiontable, bound to a specific deployed contract.
func NewCollectiontableFilterer(address common.Address, filterer bind.ContractFilterer) (*CollectiontableFilterer, error) {
	contract, err := bindCollectiontable(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &CollectiontableFilterer{contract: contract}, nil
}

// bindCollectiontable binds a generic wrapper to an already deployed contract.
func bindCollectiontable(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(CollectiontableABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Collectiontable *CollectiontableRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _Collectiontable.Contract.CollectiontableCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Collectiontable *CollectiontableRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, *types.Receipt, error) {
	return _Collectiontable.Contract.CollectiontableTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Collectiontable *CollectiontableRaw) TransactWithResult(opts *bind.TransactOpts, result interface{}, method string, params ...interface{}) (*types.Transaction, *types.Receipt, error) {
	return _Collectiontable.Contract.CollectiontableTransactor.contract.TransactWithResult(opts, result, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Collectiontable *CollectiontableCallerRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _Collectiontable.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Collectiontable *CollectiontableTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, *types.Receipt, error) {
	return _Collectiontable.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Collectiontable *CollectiontableTransactorRaw) TransactWithResult(opts *bind.TransactOpts, result interface{}, method string, params ...interface{}) (*types.Transaction, *types.Receipt, error) {
	return _Collectiontable.Contract.contract.TransactWithResult(opts, result, method, params...)
}

// Select is a free data retrieval call binding the contract method 0xfcd7e3c1.
//
// Solidity: function select(string collection_id) constant returns(string, string, string, string, string, string)
func (_Collectiontable *CollectiontableCaller) Select(opts *bind.CallOpts, collection_id string) (string, string, string, string, string, string, error) {
	var (
		ret0 = new(string)
		ret1 = new(string)
		ret2 = new(string)
		ret3 = new(string)
		ret4 = new(string)
		ret5 = new(string)
	)
	out := &[]interface{}{
		ret0,
		ret1,
		ret2,
		ret3,
		ret4,
		ret5,
	}
	err := _Collectiontable.contract.Call(opts, out, "select", collection_id)
	return *ret0, *ret1, *ret2, *ret3, *ret4, *ret5, err
}

// Select is a free data retrieval call binding the contract method 0xfcd7e3c1.
//
// Solidity: function select(string collection_id) constant returns(string, string, string, string, string, string)
func (_Collectiontable *CollectiontableSession) Select(collection_id string) (string, string, string, string, string, string, error) {
	return _Collectiontable.Contract.Select(&_Collectiontable.CallOpts, collection_id)
}

// Select is a free data retrieval call binding the contract method 0xfcd7e3c1.
//
// Solidity: function select(string collection_id) constant returns(string, string, string, string, string, string)
func (_Collectiontable *CollectiontableCallerSession) Select(collection_id string) (string, string, string, string, string, string, error) {
	return _Collectiontable.Contract.Select(&_Collectiontable.CallOpts, collection_id)
}

// AccountTransfer is a paid mutator transaction binding the contract method 0x97d7fa92.
//
// Solidity: function account_transfer(string user_id1, string user_id2, int256 money) returns(int256)
func (_Collectiontable *CollectiontableTransactor) AccountTransfer(opts *bind.TransactOpts, user_id1 string, user_id2 string, money *big.Int) (*big.Int, *types.Transaction, *types.Receipt, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	transaction, receipt, err := _Collectiontable.contract.TransactWithResult(opts, out, "account_transfer", user_id1, user_id2, money)
	return *ret0, transaction, receipt, err
}

func (_Collectiontable *CollectiontableTransactor) AsyncAccountTransfer(handler func(*types.Receipt, error), opts *bind.TransactOpts, user_id1 string, user_id2 string, money *big.Int) (*types.Transaction, error) {
	return _Collectiontable.contract.AsyncTransact(opts, handler, "account_transfer", user_id1, user_id2, money)
}

// AccountTransfer is a paid mutator transaction binding the contract method 0x97d7fa92.
//
// Solidity: function account_transfer(string user_id1, string user_id2, int256 money) returns(int256)
func (_Collectiontable *CollectiontableSession) AccountTransfer(user_id1 string, user_id2 string, money *big.Int) (*big.Int, *types.Transaction, *types.Receipt, error) {
	return _Collectiontable.Contract.AccountTransfer(&_Collectiontable.TransactOpts, user_id1, user_id2, money)
}

func (_Collectiontable *CollectiontableSession) AsyncAccountTransfer(handler func(*types.Receipt, error), user_id1 string, user_id2 string, money *big.Int) (*types.Transaction, error) {
	return _Collectiontable.Contract.AsyncAccountTransfer(handler, &_Collectiontable.TransactOpts, user_id1, user_id2, money)
}

// AccountTransfer is a paid mutator transaction binding the contract method 0x97d7fa92.
//
// Solidity: function account_transfer(string user_id1, string user_id2, int256 money) returns(int256)
func (_Collectiontable *CollectiontableTransactorSession) AccountTransfer(user_id1 string, user_id2 string, money *big.Int) (*big.Int, *types.Transaction, *types.Receipt, error) {
	return _Collectiontable.Contract.AccountTransfer(&_Collectiontable.TransactOpts, user_id1, user_id2, money)
}

func (_Collectiontable *CollectiontableTransactorSession) AsyncAccountTransfer(handler func(*types.Receipt, error), user_id1 string, user_id2 string, money *big.Int) (*types.Transaction, error) {
	return _Collectiontable.Contract.AsyncAccountTransfer(handler, &_Collectiontable.TransactOpts, user_id1, user_id2, money)
}

// Gincome is a paid mutator transaction binding the contract method 0xbd97837f.
//
// Solidity: function gincome(string user_id1, string user_id2, int256 money) returns(int256)
func (_Collectiontable *CollectiontableTransactor) Gincome(opts *bind.TransactOpts, user_id1 string, user_id2 string, money *big.Int) (*big.Int, *types.Transaction, *types.Receipt, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	transaction, receipt, err := _Collectiontable.contract.TransactWithResult(opts, out, "gincome", user_id1, user_id2, money)
	return *ret0, transaction, receipt, err
}

func (_Collectiontable *CollectiontableTransactor) AsyncGincome(handler func(*types.Receipt, error), opts *bind.TransactOpts, user_id1 string, user_id2 string, money *big.Int) (*types.Transaction, error) {
	return _Collectiontable.contract.AsyncTransact(opts, handler, "gincome", user_id1, user_id2, money)
}

// Gincome is a paid mutator transaction binding the contract method 0xbd97837f.
//
// Solidity: function gincome(string user_id1, string user_id2, int256 money) returns(int256)
func (_Collectiontable *CollectiontableSession) Gincome(user_id1 string, user_id2 string, money *big.Int) (*big.Int, *types.Transaction, *types.Receipt, error) {
	return _Collectiontable.Contract.Gincome(&_Collectiontable.TransactOpts, user_id1, user_id2, money)
}

func (_Collectiontable *CollectiontableSession) AsyncGincome(handler func(*types.Receipt, error), user_id1 string, user_id2 string, money *big.Int) (*types.Transaction, error) {
	return _Collectiontable.Contract.AsyncGincome(handler, &_Collectiontable.TransactOpts, user_id1, user_id2, money)
}

// Gincome is a paid mutator transaction binding the contract method 0xbd97837f.
//
// Solidity: function gincome(string user_id1, string user_id2, int256 money) returns(int256)
func (_Collectiontable *CollectiontableTransactorSession) Gincome(user_id1 string, user_id2 string, money *big.Int) (*big.Int, *types.Transaction, *types.Receipt, error) {
	return _Collectiontable.Contract.Gincome(&_Collectiontable.TransactOpts, user_id1, user_id2, money)
}

func (_Collectiontable *CollectiontableTransactorSession) AsyncGincome(handler func(*types.Receipt, error), user_id1 string, user_id2 string, money *big.Int) (*types.Transaction, error) {
	return _Collectiontable.Contract.AsyncGincome(handler, &_Collectiontable.TransactOpts, user_id1, user_id2, money)
}

// Insert is a paid mutator transaction binding the contract method 0x308e9cfa.
//
// Solidity: function insert(string collection_id, string collection_name, string owner_id, string certificate_time, string certificate_organization, string collection_semantic) returns(int256)
func (_Collectiontable *CollectiontableTransactor) Insert(opts *bind.TransactOpts, collection_id string, collection_name string, owner_id string, certificate_time string, certificate_organization string, collection_semantic string) (*big.Int, *types.Transaction, *types.Receipt, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	transaction, receipt, err := _Collectiontable.contract.TransactWithResult(opts, out, "insert", collection_id, collection_name, owner_id, certificate_time, certificate_organization, collection_semantic)
	return *ret0, transaction, receipt, err
}

func (_Collectiontable *CollectiontableTransactor) AsyncInsert(handler func(*types.Receipt, error), opts *bind.TransactOpts, collection_id string, collection_name string, owner_id string, certificate_time string, certificate_organization string, collection_semantic string) (*types.Transaction, error) {
	return _Collectiontable.contract.AsyncTransact(opts, handler, "insert", collection_id, collection_name, owner_id, certificate_time, certificate_organization, collection_semantic)
}

// Insert is a paid mutator transaction binding the contract method 0x308e9cfa.
//
// Solidity: function insert(string collection_id, string collection_name, string owner_id, string certificate_time, string certificate_organization, string collection_semantic) returns(int256)
func (_Collectiontable *CollectiontableSession) Insert(collection_id string, collection_name string, owner_id string, certificate_time string, certificate_organization string, collection_semantic string) (*big.Int, *types.Transaction, *types.Receipt, error) {
	return _Collectiontable.Contract.Insert(&_Collectiontable.TransactOpts, collection_id, collection_name, owner_id, certificate_time, certificate_organization, collection_semantic)
}

func (_Collectiontable *CollectiontableSession) AsyncInsert(handler func(*types.Receipt, error), collection_id string, collection_name string, owner_id string, certificate_time string, certificate_organization string, collection_semantic string) (*types.Transaction, error) {
	return _Collectiontable.Contract.AsyncInsert(handler, &_Collectiontable.TransactOpts, collection_id, collection_name, owner_id, certificate_time, certificate_organization, collection_semantic)
}

// Insert is a paid mutator transaction binding the contract method 0x308e9cfa.
//
// Solidity: function insert(string collection_id, string collection_name, string owner_id, string certificate_time, string certificate_organization, string collection_semantic) returns(int256)
func (_Collectiontable *CollectiontableTransactorSession) Insert(collection_id string, collection_name string, owner_id string, certificate_time string, certificate_organization string, collection_semantic string) (*big.Int, *types.Transaction, *types.Receipt, error) {
	return _Collectiontable.Contract.Insert(&_Collectiontable.TransactOpts, collection_id, collection_name, owner_id, certificate_time, certificate_organization, collection_semantic)
}

func (_Collectiontable *CollectiontableTransactorSession) AsyncInsert(handler func(*types.Receipt, error), collection_id string, collection_name string, owner_id string, certificate_time string, certificate_organization string, collection_semantic string) (*types.Transaction, error) {
	return _Collectiontable.Contract.AsyncInsert(handler, &_Collectiontable.TransactOpts, collection_id, collection_name, owner_id, certificate_time, certificate_organization, collection_semantic)
}

// Remove is a paid mutator transaction binding the contract method 0x80599e4b.
//
// Solidity: function remove(string collection_id) returns(int256)
func (_Collectiontable *CollectiontableTransactor) Remove(opts *bind.TransactOpts, collection_id string) (*big.Int, *types.Transaction, *types.Receipt, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	transaction, receipt, err := _Collectiontable.contract.TransactWithResult(opts, out, "remove", collection_id)
	return *ret0, transaction, receipt, err
}

func (_Collectiontable *CollectiontableTransactor) AsyncRemove(handler func(*types.Receipt, error), opts *bind.TransactOpts, collection_id string) (*types.Transaction, error) {
	return _Collectiontable.contract.AsyncTransact(opts, handler, "remove", collection_id)
}

// Remove is a paid mutator transaction binding the contract method 0x80599e4b.
//
// Solidity: function remove(string collection_id) returns(int256)
func (_Collectiontable *CollectiontableSession) Remove(collection_id string) (*big.Int, *types.Transaction, *types.Receipt, error) {
	return _Collectiontable.Contract.Remove(&_Collectiontable.TransactOpts, collection_id)
}

func (_Collectiontable *CollectiontableSession) AsyncRemove(handler func(*types.Receipt, error), collection_id string) (*types.Transaction, error) {
	return _Collectiontable.Contract.AsyncRemove(handler, &_Collectiontable.TransactOpts, collection_id)
}

// Remove is a paid mutator transaction binding the contract method 0x80599e4b.
//
// Solidity: function remove(string collection_id) returns(int256)
func (_Collectiontable *CollectiontableTransactorSession) Remove(collection_id string) (*big.Int, *types.Transaction, *types.Receipt, error) {
	return _Collectiontable.Contract.Remove(&_Collectiontable.TransactOpts, collection_id)
}

func (_Collectiontable *CollectiontableTransactorSession) AsyncRemove(handler func(*types.Receipt, error), collection_id string) (*types.Transaction, error) {
	return _Collectiontable.Contract.AsyncRemove(handler, &_Collectiontable.TransactOpts, collection_id)
}

// Transfer is a paid mutator transaction binding the contract method 0x78911650.
//
// Solidity: function transfer(string user_id1, string user_id2, int256 money, string collection_id) returns(int256)
func (_Collectiontable *CollectiontableTransactor) Transfer(opts *bind.TransactOpts, user_id1 string, user_id2 string, money *big.Int, collection_id string) (*big.Int, *types.Transaction, *types.Receipt, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	transaction, receipt, err := _Collectiontable.contract.TransactWithResult(opts, out, "transfer", user_id1, user_id2, money, collection_id)
	return *ret0, transaction, receipt, err
}

func (_Collectiontable *CollectiontableTransactor) AsyncTransfer(handler func(*types.Receipt, error), opts *bind.TransactOpts, user_id1 string, user_id2 string, money *big.Int, collection_id string) (*types.Transaction, error) {
	return _Collectiontable.contract.AsyncTransact(opts, handler, "transfer", user_id1, user_id2, money, collection_id)
}

// Transfer is a paid mutator transaction binding the contract method 0x78911650.
//
// Solidity: function transfer(string user_id1, string user_id2, int256 money, string collection_id) returns(int256)
func (_Collectiontable *CollectiontableSession) Transfer(user_id1 string, user_id2 string, money *big.Int, collection_id string) (*big.Int, *types.Transaction, *types.Receipt, error) {
	return _Collectiontable.Contract.Transfer(&_Collectiontable.TransactOpts, user_id1, user_id2, money, collection_id)
}

func (_Collectiontable *CollectiontableSession) AsyncTransfer(handler func(*types.Receipt, error), user_id1 string, user_id2 string, money *big.Int, collection_id string) (*types.Transaction, error) {
	return _Collectiontable.Contract.AsyncTransfer(handler, &_Collectiontable.TransactOpts, user_id1, user_id2, money, collection_id)
}

// Transfer is a paid mutator transaction binding the contract method 0x78911650.
//
// Solidity: function transfer(string user_id1, string user_id2, int256 money, string collection_id) returns(int256)
func (_Collectiontable *CollectiontableTransactorSession) Transfer(user_id1 string, user_id2 string, money *big.Int, collection_id string) (*big.Int, *types.Transaction, *types.Receipt, error) {
	return _Collectiontable.Contract.Transfer(&_Collectiontable.TransactOpts, user_id1, user_id2, money, collection_id)
}

func (_Collectiontable *CollectiontableTransactorSession) AsyncTransfer(handler func(*types.Receipt, error), user_id1 string, user_id2 string, money *big.Int, collection_id string) (*types.Transaction, error) {
	return _Collectiontable.Contract.AsyncTransfer(handler, &_Collectiontable.TransactOpts, user_id1, user_id2, money, collection_id)
}

// Update is a paid mutator transaction binding the contract method 0xc96d1ce3.
//
// Solidity: function update(string collection_id, string collection_name, string owner_id, string certificate_time, string certificate_organization, string collection_semantic) returns(int256)
func (_Collectiontable *CollectiontableTransactor) Update(opts *bind.TransactOpts, collection_id string, collection_name string, owner_id string, certificate_time string, certificate_organization string, collection_semantic string) (*big.Int, *types.Transaction, *types.Receipt, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	transaction, receipt, err := _Collectiontable.contract.TransactWithResult(opts, out, "update", collection_id, collection_name, owner_id, certificate_time, certificate_organization, collection_semantic)
	return *ret0, transaction, receipt, err
}

func (_Collectiontable *CollectiontableTransactor) AsyncUpdate(handler func(*types.Receipt, error), opts *bind.TransactOpts, collection_id string, collection_name string, owner_id string, certificate_time string, certificate_organization string, collection_semantic string) (*types.Transaction, error) {
	return _Collectiontable.contract.AsyncTransact(opts, handler, "update", collection_id, collection_name, owner_id, certificate_time, certificate_organization, collection_semantic)
}

// Update is a paid mutator transaction binding the contract method 0xc96d1ce3.
//
// Solidity: function update(string collection_id, string collection_name, string owner_id, string certificate_time, string certificate_organization, string collection_semantic) returns(int256)
func (_Collectiontable *CollectiontableSession) Update(collection_id string, collection_name string, owner_id string, certificate_time string, certificate_organization string, collection_semantic string) (*big.Int, *types.Transaction, *types.Receipt, error) {
	return _Collectiontable.Contract.Update(&_Collectiontable.TransactOpts, collection_id, collection_name, owner_id, certificate_time, certificate_organization, collection_semantic)
}

func (_Collectiontable *CollectiontableSession) AsyncUpdate(handler func(*types.Receipt, error), collection_id string, collection_name string, owner_id string, certificate_time string, certificate_organization string, collection_semantic string) (*types.Transaction, error) {
	return _Collectiontable.Contract.AsyncUpdate(handler, &_Collectiontable.TransactOpts, collection_id, collection_name, owner_id, certificate_time, certificate_organization, collection_semantic)
}

// Update is a paid mutator transaction binding the contract method 0xc96d1ce3.
//
// Solidity: function update(string collection_id, string collection_name, string owner_id, string certificate_time, string certificate_organization, string collection_semantic) returns(int256)
func (_Collectiontable *CollectiontableTransactorSession) Update(collection_id string, collection_name string, owner_id string, certificate_time string, certificate_organization string, collection_semantic string) (*big.Int, *types.Transaction, *types.Receipt, error) {
	return _Collectiontable.Contract.Update(&_Collectiontable.TransactOpts, collection_id, collection_name, owner_id, certificate_time, certificate_organization, collection_semantic)
}

func (_Collectiontable *CollectiontableTransactorSession) AsyncUpdate(handler func(*types.Receipt, error), collection_id string, collection_name string, owner_id string, certificate_time string, certificate_organization string, collection_semantic string) (*types.Transaction, error) {
	return _Collectiontable.Contract.AsyncUpdate(handler, &_Collectiontable.TransactOpts, collection_id, collection_name, owner_id, certificate_time, certificate_organization, collection_semantic)
}

// CollectiontableCreateResult represents a CreateResult event raised by the Collectiontable contract.
type CollectiontableCreateResult struct {
	Count *big.Int
	Raw   types.Log // Blockchain specific contextual infos
}

// WatchCreateResult is a free log subscription operation binding the contract event 0xb5636cd912a73dcdb5b570dbe331dfa3e6435c93e029e642def2c8e40dacf210.
//
// Solidity: event CreateResult(int256 count)
func (_Collectiontable *CollectiontableFilterer) WatchCreateResult(fromBlock *uint64, handler func(int, []types.Log)) (string, error) {
	return _Collectiontable.contract.WatchLogs(fromBlock, handler, "CreateResult")
}

func (_Collectiontable *CollectiontableFilterer) WatchAllCreateResult(fromBlock *uint64, handler func(int, []types.Log)) (string, error) {
	return _Collectiontable.contract.WatchLogs(fromBlock, handler, "CreateResult")
}

// ParseCreateResult is a log parse operation binding the contract event 0xb5636cd912a73dcdb5b570dbe331dfa3e6435c93e029e642def2c8e40dacf210.
//
// Solidity: event CreateResult(int256 count)
func (_Collectiontable *CollectiontableFilterer) ParseCreateResult(log types.Log) (*CollectiontableCreateResult, error) {
	event := new(CollectiontableCreateResult)
	if err := _Collectiontable.contract.UnpackLog(event, "CreateResult", log); err != nil {
		return nil, err
	}
	return event, nil
}

// WatchCreateResult is a free log subscription operation binding the contract event 0xb5636cd912a73dcdb5b570dbe331dfa3e6435c93e029e642def2c8e40dacf210.
//
// Solidity: event CreateResult(int256 count)
func (_Collectiontable *CollectiontableSession) WatchCreateResult(fromBlock *uint64, handler func(int, []types.Log)) (string, error) {
	return _Collectiontable.Contract.WatchCreateResult(fromBlock, handler)
}

func (_Collectiontable *CollectiontableSession) WatchAllCreateResult(fromBlock *uint64, handler func(int, []types.Log)) (string, error) {
	return _Collectiontable.Contract.WatchAllCreateResult(fromBlock, handler)
}

// ParseCreateResult is a log parse operation binding the contract event 0xb5636cd912a73dcdb5b570dbe331dfa3e6435c93e029e642def2c8e40dacf210.
//
// Solidity: event CreateResult(int256 count)
func (_Collectiontable *CollectiontableSession) ParseCreateResult(log types.Log) (*CollectiontableCreateResult, error) {
	return _Collectiontable.Contract.ParseCreateResult(log)
}

// CollectiontableInsertResult represents a InsertResult event raised by the Collectiontable contract.
type CollectiontableInsertResult struct {
	Count *big.Int
	Raw   types.Log // Blockchain specific contextual infos
}

// WatchInsertResult is a free log subscription operation binding the contract event 0xc57b01fa77f41df77eaab79a0e2623fab2e7ae3e9530d9b1cab225ad65f2b7ce.
//
// Solidity: event InsertResult(int256 count)
func (_Collectiontable *CollectiontableFilterer) WatchInsertResult(fromBlock *uint64, handler func(int, []types.Log)) (string, error) {
	return _Collectiontable.contract.WatchLogs(fromBlock, handler, "InsertResult")
}

func (_Collectiontable *CollectiontableFilterer) WatchAllInsertResult(fromBlock *uint64, handler func(int, []types.Log)) (string, error) {
	return _Collectiontable.contract.WatchLogs(fromBlock, handler, "InsertResult")
}

// ParseInsertResult is a log parse operation binding the contract event 0xc57b01fa77f41df77eaab79a0e2623fab2e7ae3e9530d9b1cab225ad65f2b7ce.
//
// Solidity: event InsertResult(int256 count)
func (_Collectiontable *CollectiontableFilterer) ParseInsertResult(log types.Log) (*CollectiontableInsertResult, error) {
	event := new(CollectiontableInsertResult)
	if err := _Collectiontable.contract.UnpackLog(event, "InsertResult", log); err != nil {
		return nil, err
	}
	return event, nil
}

// WatchInsertResult is a free log subscription operation binding the contract event 0xc57b01fa77f41df77eaab79a0e2623fab2e7ae3e9530d9b1cab225ad65f2b7ce.
//
// Solidity: event InsertResult(int256 count)
func (_Collectiontable *CollectiontableSession) WatchInsertResult(fromBlock *uint64, handler func(int, []types.Log)) (string, error) {
	return _Collectiontable.Contract.WatchInsertResult(fromBlock, handler)
}

func (_Collectiontable *CollectiontableSession) WatchAllInsertResult(fromBlock *uint64, handler func(int, []types.Log)) (string, error) {
	return _Collectiontable.Contract.WatchAllInsertResult(fromBlock, handler)
}

// ParseInsertResult is a log parse operation binding the contract event 0xc57b01fa77f41df77eaab79a0e2623fab2e7ae3e9530d9b1cab225ad65f2b7ce.
//
// Solidity: event InsertResult(int256 count)
func (_Collectiontable *CollectiontableSession) ParseInsertResult(log types.Log) (*CollectiontableInsertResult, error) {
	return _Collectiontable.Contract.ParseInsertResult(log)
}

// CollectiontableRemoveResult represents a RemoveResult event raised by the Collectiontable contract.
type CollectiontableRemoveResult struct {
	Count *big.Int
	Raw   types.Log // Blockchain specific contextual infos
}

// WatchRemoveResult is a free log subscription operation binding the contract event 0x4b930e280fe29620bdff00c88155d46d6d82a39f45dd5c3ea114dc3157358112.
//
// Solidity: event RemoveResult(int256 count)
func (_Collectiontable *CollectiontableFilterer) WatchRemoveResult(fromBlock *uint64, handler func(int, []types.Log)) (string, error) {
	return _Collectiontable.contract.WatchLogs(fromBlock, handler, "RemoveResult")
}

func (_Collectiontable *CollectiontableFilterer) WatchAllRemoveResult(fromBlock *uint64, handler func(int, []types.Log)) (string, error) {
	return _Collectiontable.contract.WatchLogs(fromBlock, handler, "RemoveResult")
}

// ParseRemoveResult is a log parse operation binding the contract event 0x4b930e280fe29620bdff00c88155d46d6d82a39f45dd5c3ea114dc3157358112.
//
// Solidity: event RemoveResult(int256 count)
func (_Collectiontable *CollectiontableFilterer) ParseRemoveResult(log types.Log) (*CollectiontableRemoveResult, error) {
	event := new(CollectiontableRemoveResult)
	if err := _Collectiontable.contract.UnpackLog(event, "RemoveResult", log); err != nil {
		return nil, err
	}
	return event, nil
}

// WatchRemoveResult is a free log subscription operation binding the contract event 0x4b930e280fe29620bdff00c88155d46d6d82a39f45dd5c3ea114dc3157358112.
//
// Solidity: event RemoveResult(int256 count)
func (_Collectiontable *CollectiontableSession) WatchRemoveResult(fromBlock *uint64, handler func(int, []types.Log)) (string, error) {
	return _Collectiontable.Contract.WatchRemoveResult(fromBlock, handler)
}

func (_Collectiontable *CollectiontableSession) WatchAllRemoveResult(fromBlock *uint64, handler func(int, []types.Log)) (string, error) {
	return _Collectiontable.Contract.WatchAllRemoveResult(fromBlock, handler)
}

// ParseRemoveResult is a log parse operation binding the contract event 0x4b930e280fe29620bdff00c88155d46d6d82a39f45dd5c3ea114dc3157358112.
//
// Solidity: event RemoveResult(int256 count)
func (_Collectiontable *CollectiontableSession) ParseRemoveResult(log types.Log) (*CollectiontableRemoveResult, error) {
	return _Collectiontable.Contract.ParseRemoveResult(log)
}

// CollectiontableTransferResult represents a TransferResult event raised by the Collectiontable contract.
type CollectiontableTransferResult struct {
	Count *big.Int
	Raw   types.Log // Blockchain specific contextual infos
}

// WatchTransferResult is a free log subscription operation binding the contract event 0xa0ab10b45d0e484bb2f468698ca21e4759893bc64ef666caf11517d3139e4f3d.
//
// Solidity: event TransferResult(int256 count)
func (_Collectiontable *CollectiontableFilterer) WatchTransferResult(fromBlock *uint64, handler func(int, []types.Log)) (string, error) {
	return _Collectiontable.contract.WatchLogs(fromBlock, handler, "TransferResult")
}

func (_Collectiontable *CollectiontableFilterer) WatchAllTransferResult(fromBlock *uint64, handler func(int, []types.Log)) (string, error) {
	return _Collectiontable.contract.WatchLogs(fromBlock, handler, "TransferResult")
}

// ParseTransferResult is a log parse operation binding the contract event 0xa0ab10b45d0e484bb2f468698ca21e4759893bc64ef666caf11517d3139e4f3d.
//
// Solidity: event TransferResult(int256 count)
func (_Collectiontable *CollectiontableFilterer) ParseTransferResult(log types.Log) (*CollectiontableTransferResult, error) {
	event := new(CollectiontableTransferResult)
	if err := _Collectiontable.contract.UnpackLog(event, "TransferResult", log); err != nil {
		return nil, err
	}
	return event, nil
}

// WatchTransferResult is a free log subscription operation binding the contract event 0xa0ab10b45d0e484bb2f468698ca21e4759893bc64ef666caf11517d3139e4f3d.
//
// Solidity: event TransferResult(int256 count)
func (_Collectiontable *CollectiontableSession) WatchTransferResult(fromBlock *uint64, handler func(int, []types.Log)) (string, error) {
	return _Collectiontable.Contract.WatchTransferResult(fromBlock, handler)
}

func (_Collectiontable *CollectiontableSession) WatchAllTransferResult(fromBlock *uint64, handler func(int, []types.Log)) (string, error) {
	return _Collectiontable.Contract.WatchAllTransferResult(fromBlock, handler)
}

// ParseTransferResult is a log parse operation binding the contract event 0xa0ab10b45d0e484bb2f468698ca21e4759893bc64ef666caf11517d3139e4f3d.
//
// Solidity: event TransferResult(int256 count)
func (_Collectiontable *CollectiontableSession) ParseTransferResult(log types.Log) (*CollectiontableTransferResult, error) {
	return _Collectiontable.Contract.ParseTransferResult(log)
}

// CollectiontableUpdateResult represents a UpdateResult event raised by the Collectiontable contract.
type CollectiontableUpdateResult struct {
	Count *big.Int
	Raw   types.Log // Blockchain specific contextual infos
}

// WatchUpdateResult is a free log subscription operation binding the contract event 0x8e5890af40fc24a059396aca2f83d6ce41fcef086876548fa4fb8ec27e9d292a.
//
// Solidity: event UpdateResult(int256 count)
func (_Collectiontable *CollectiontableFilterer) WatchUpdateResult(fromBlock *uint64, handler func(int, []types.Log)) (string, error) {
	return _Collectiontable.contract.WatchLogs(fromBlock, handler, "UpdateResult")
}

func (_Collectiontable *CollectiontableFilterer) WatchAllUpdateResult(fromBlock *uint64, handler func(int, []types.Log)) (string, error) {
	return _Collectiontable.contract.WatchLogs(fromBlock, handler, "UpdateResult")
}

// ParseUpdateResult is a log parse operation binding the contract event 0x8e5890af40fc24a059396aca2f83d6ce41fcef086876548fa4fb8ec27e9d292a.
//
// Solidity: event UpdateResult(int256 count)
func (_Collectiontable *CollectiontableFilterer) ParseUpdateResult(log types.Log) (*CollectiontableUpdateResult, error) {
	event := new(CollectiontableUpdateResult)
	if err := _Collectiontable.contract.UnpackLog(event, "UpdateResult", log); err != nil {
		return nil, err
	}
	return event, nil
}

// WatchUpdateResult is a free log subscription operation binding the contract event 0x8e5890af40fc24a059396aca2f83d6ce41fcef086876548fa4fb8ec27e9d292a.
//
// Solidity: event UpdateResult(int256 count)
func (_Collectiontable *CollectiontableSession) WatchUpdateResult(fromBlock *uint64, handler func(int, []types.Log)) (string, error) {
	return _Collectiontable.Contract.WatchUpdateResult(fromBlock, handler)
}

func (_Collectiontable *CollectiontableSession) WatchAllUpdateResult(fromBlock *uint64, handler func(int, []types.Log)) (string, error) {
	return _Collectiontable.Contract.WatchAllUpdateResult(fromBlock, handler)
}

// ParseUpdateResult is a log parse operation binding the contract event 0x8e5890af40fc24a059396aca2f83d6ce41fcef086876548fa4fb8ec27e9d292a.
//
// Solidity: event UpdateResult(int256 count)
func (_Collectiontable *CollectiontableSession) ParseUpdateResult(log types.Log) (*CollectiontableUpdateResult, error) {
	return _Collectiontable.Contract.ParseUpdateResult(log)
}
