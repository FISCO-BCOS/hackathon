package com.ethersg.javabackend.util;

import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import org.fisco.bcos.sdk.abi.FunctionReturnDecoder;
import org.fisco.bcos.sdk.abi.TypeReference;
import org.fisco.bcos.sdk.abi.datatypes.Address;
import org.fisco.bcos.sdk.abi.datatypes.DynamicArray;
import org.fisco.bcos.sdk.abi.datatypes.Event;
import org.fisco.bcos.sdk.abi.datatypes.Function;
import org.fisco.bcos.sdk.abi.datatypes.Type;
import org.fisco.bcos.sdk.abi.datatypes.Utf8String;
import org.fisco.bcos.sdk.abi.datatypes.generated.Bytes1;
import org.fisco.bcos.sdk.abi.datatypes.generated.Uint256;
import org.fisco.bcos.sdk.abi.datatypes.generated.Uint8;
import org.fisco.bcos.sdk.abi.datatypes.generated.tuples.generated.Tuple2;
import org.fisco.bcos.sdk.abi.datatypes.generated.tuples.generated.Tuple3;
import org.fisco.bcos.sdk.abi.datatypes.generated.tuples.generated.Tuple4;
import org.fisco.bcos.sdk.abi.datatypes.generated.tuples.generated.Tuple5;
import org.fisco.bcos.sdk.abi.datatypes.generated.tuples.generated.Tuple7;
import org.fisco.bcos.sdk.client.Client;
import org.fisco.bcos.sdk.contract.Contract;
import org.fisco.bcos.sdk.crypto.CryptoSuite;
import org.fisco.bcos.sdk.crypto.keypair.CryptoKeyPair;
import org.fisco.bcos.sdk.eventsub.EventCallback;
import org.fisco.bcos.sdk.model.CryptoType;
import org.fisco.bcos.sdk.model.TransactionReceipt;
import org.fisco.bcos.sdk.model.callback.TransactionCallback;
import org.fisco.bcos.sdk.transaction.model.exception.ContractException;

@SuppressWarnings("unchecked")
public class ESGRatingSystem extends Contract {
    public static final String[] BINARY_ARRAY = {"","6000015182602001518360400151846060015185608001518660a00151868595508494508191509850985098509850985098509850505092959891949750929550565b6060600180548060200260200160405190810160405280929190818152602001828054801561105257602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311611008575b5050505050905090565b6000611066612240565b61106e612240565b611076612240565b600080600080600093505b60018054905084101561122a5760018481548110151561109d57fe5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169250600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff169150600360008b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208981548110151561116557fe5b906000526020600020906007020160050160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905060008160ff1614151561121d576001866001840360ff166003811015156111e657fe5b6020020181815101915081815250508060ff16876001840360ff1660038110151561120d57fe5b6020020181815101915081815250505b8380600101945050611081565b600093505b600384101561128c57858460038110151561124657fe5b6020020151878560038110151561125957fe5b602002015181151561126757fe5b04858560038110151561127657fe5b602002018181525050838060010194505061122f565b600486600160038110151561129d57fe5b60200201518760006003811015156112b157fe5b6020020151018760016003811015156112c657fe5b60200201518115156112d457fe5b048660016003811015156112e457fe5b60200201518760006003811015156112f857fe5b6020020151030281151561130857fe5b0485600060038110151561131857fe5b602002018181510191508181525050600886600260038110151561133857fe5b602002015187600160038110151561134c57fe5b602002015188600060038110151561136057fe5b6020020151010187600260038110151561137657fe5b602002015181151561138457fe5b0486600260038110151561139457fe5b60200201518760006003811015156113a857fe5b602002015103028115156113b857fe5b048560006003811015156113c857fe5b6020020181815101915081815250508460006003811015156113e657fe5b602002015197505050505050505092915050565b606080600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600001600560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600101818054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156115165780601f106114eb57610100808354040283529160200191611516565b820191906000526020600020905b8154815290600101906020018083116114f957829003601f168201915b50505050509150808054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156115b25780601f10611587576101008083540402835291602001916115b2565b820191906000526020600020905b81548152906001019060200180831161159557829003601f168201915b5050505050905091509150915091565b60603373ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16148061164e57506000600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1660ff1614155b151561168f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161168690612b7f565b60405180910390fd5b600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020838154811015156116db57fe5b906000526020600020906007020160060160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156117bd5780601f10611792576101008083540402835291602001916117bd565b820191906000526020600020905b8154815290600101906020018083116117a057829003601f168201915b505050505090509392505050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561185c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161185390612aff565b60405180910390fd5b60008160ff161115156118a4576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161189b90612b9f565b60405180910390fd5b80600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908360ff16021790555060018290806001815401808255809150509060018203906000526020600020016000909192909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550505050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156119f9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016119f090612aff565b60405180910390fd5b611a0282612005565b9050919050565b60003373ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff161480611a9557506000600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1660ff1614155b1515611ad6576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611acd90612b7f565b60405180910390fd5b600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002083815481101515611b2257fe5b906000526020600020906007020160050160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1690509392505050565b60003373ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161480611c1357506000600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1660ff1614155b1515611c54576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611c4b90612b7f565b60405180910390fd5b600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020805490509050919050565b60a0604051908101604052808b8b8080601f016020809104026020016040519081016040528093929190818152602001838380828437820191505050505050815260200189898080601f016020809104026020016040519081016040528093929190818152602001838380828437820191505050505050815260200187878080601f016020809104026020016040519081016040528093929190818152602001838380828437820191505050505050815260200185858080601f016020809104026020016040519081016040528093929190818152602001838380828437820191505050505050815260200183838080601f016020809104026020016040519081016040528093929190818152602001838380828437820191505050505050815250600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000820151816000019080519060200190611e1b929190612140565b506020820151816001019080519060200190611e38929190612140565b506040820151816002019080519060200190611e55929190612140565b506060820151816003019080519060200190611e72929190612140565b506080820151816004019080519060200190611e8f929190612140565b5090505060405180807f636f6d70616e790000000000000000000000000000000000000000000000000081525060070190506040518091039020600019168888604051808383808284378201915050925050506040518091039020600019161415611f5b5760043390806001815401808255809150509060018203906000526020600020016000909192909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550505b50505050505050505050565b606060048054806020026020016040519081016040528092919081815260200182805480","15611feb57602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311611fa1575b5050505050905090565b600061200033612005565b905090565b6000806000809150600090505b600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208054905081101561207a57612066848261105c565b60ff16820191508080600101915050612012565b600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002080549050828115156120c757fe5b0492505050919050565b60c06040519081016040528060008152602001606081526020016060815260200160007effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff19168152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001606081525090565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061218157805160ff19168380011785556121af565b828001600101855582156121af579182015b828111156121ae578251825591602001919060010190612193565b5b5090506121bc9190612263565b5090565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061220157803560ff191683800117855561222f565b8280016001018555821561222f579182015b8281111561222e578235825591602001919060010190612213565b5b50905061223c9190612263565b5090565b606060405190810160405280600390602082028038833980820191505090505090565b61228591905b80821115612281576000816000905550600101612269565b5090565b90565b60006122948235612d2c565b905092915050565b60006122a88235612d4c565b905092915050565b60008083601f84011215156122c457600080fd5b8235905067ffffffffffffffff8111156122dd57600080fd5b6020830191508360018202830111156122f557600080fd5b9250929050565b60006123088235612d78565b905092915050565b600061231c8235612d82565b905092915050565b60006020828403121561233657600080fd5b600061234484828501612288565b91505092915050565b6000806040838503121561236057600080fd5b600061236e85828601612288565b925050602061237f858286016122fc565b9150509250929050565b60008060006060848603121561239e57600080fd5b60006123ac86828701612288565b93505060206123bd868287016122fc565b92505060406123ce86828701612288565b9150509250925092565b6000806000806000608086880312156123f057600080fd5b60006123fe88828901612288565b955050602061240f888289016122fc565b945050604061242088828901612310565b935050606086013567ffffffffffffffff81111561243d57600080fd5b612449888289016122b0565b92509250509295509295909350565b6000806040838503121561246b57600080fd5b600061247985828601612288565b925050602061248a85828601612310565b9150509250929050565b60008060008060008060006080888a0312156124af57600080fd5b600088013567ffffffffffffffff8111156124c957600080fd5b6124d58a828b016122b0565b9750975050602088013567ffffffffffffffff8111156124f457600080fd5b6125008a828b016122b0565b955095505060406125138a828b0161229c565b935050606088013567ffffffffffffffff81111561253057600080fd5b61253c8a828b016122b0565b925092505092959891949750929550565b60008060008060008060008060008060a08b8d03121561256c57600080fd5b60008b013567ffffffffffffffff81111561258657600080fd5b6125928d828e016122b0565b9a509a505060208b013567ffffffffffffffff8111156125b157600080fd5b6125bd8d828e016122b0565b985098505060408b013567ffffffffffffffff8111156125dc57600080fd5b6125e88d828e016122b0565b965096505060608b013567ffffffffffffffff81111561260757600080fd5b6126138d828e016122b0565b945094505060808b013567ffffffffffffffff81111561263257600080fd5b61263e8d828e016122b0565b92509250509295989b9194979a5092959850565b60008060008060006060868803121561266a57600080fd5b6000612678888289016122fc565b955050602086013567ffffffffffffffff81111561269557600080fd5b6126a1888289016122b0565b9450945050604086013567ffffffffffffffff8111156126c057600080fd5b6126cc888289016122b0565b92509250509295509295909350565b6126e481612cc9565b82525050565b60006126f582612ca6565b80845260208401935061270783612c99565b60005b828110156127395761271d8683516126db565b61272682612cbc565b915060208601955060018101905061270a565b50849250505092915050565b61274e81612ce9565b82525050565b600061275f82612cb1565b808452612773816020860160208601612da1565b61277c81612dd4565b602085010191505092915050565b6000602882527f496e76616c69642073636f72652c206d757374206265206265747765656e203060208301527f20616e64203130300000000000000000000000000000000000000000000000006040830152606082019050919050565b6000602a82527f4f6e6c792074686520676f7665726e6d656e742063616e2063616c6c2074686960208301527f732066756e6374696f6e000000000000000000000000000000000000000000006040830152606082019050919050565b6000601c82527f50726f6a656374206e616d652063616e6e6f7420626520656d707479000000006020830152604082019050919050565b6000601382527f496e76616c69642070726f6a6563742069642e000000000000000000000000006020830152604082019050919050565b6000602a82527f4173736573736d656e74206167656e636965732063616e6e6f742075706c6f6160208301527f642070726f6a65637473000000000000000000000000000000000000000000006040830152606082019050919050565b6000601282527f5065726d697373696f6e2064656e6965642e00000000000000000000000000006020830152604082019050919050565b6000602582527f496e76616c6964206c6576656c2c206d7573742062652067726561746572207460208301527f68616e20300000000000000000000000000000000000000000000000000000006040830152606082019050919050565b6000602282527f4f6e6c79206173736573736d656e74206167656e636965732063616e2073636f60208301527f72650000000000000000000000000000000000000000000000000000000000006040830152606082019050919050565b612a0981612d15565b82525050565b612a1881612d8f565b82525050565b612a2781612d1f565b82525050565b6000606082019050612a4260008301866126db565b612a4f6020830185612a00565b612a5c6040830184612a0f565b949350505050565b60006020820190508181036000830152612a7e81846126ea565b905092915050565b60006020820190508181036000830152612aa08184612754565b905092915050565b60006040820190508181036000830152612ac28185612754565b90508181036020830152612ad68184612754565b90509392505050565b60006020820190508181036000830152612af88161278a565b9050919050565b60006020820190508181036000830152612b18816127e7565b9050919050565b60006020820190508181036000830152612b3881612844565b9050919050565b60006020820190508181036000830152612b588161287b565b9050919050565b60006020820190508181036000830152612b78816128b2565b9050919050565b60006020820190508181036000830152612b988161290f565b9050919050565b60006020820190508181036000830152612bb881612946565b9050919050565b60006020820190508181036000830152612bd8816129a3565b9050919050565b6000602082019050612bf46000830184612a00565b92915050565b600060e082019050612c0f600083018a612a00565b8181036020830152612c218189612754565b90508181036040830152612c358188612754565b9050612c446060830187612745565b612c5160808301866126db565b81810360a0830152612c638185612754565b9050612c7260c0830184612a1e565b98975050505050505050565b6000602082019050612c936000830184612a1e565b92915050565b6000602082019050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60007fff0000000000000000000000000000000000000000000000000000000000000082169050919050565b6000819050919050565b600060ff82169050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60007fff0000000000000000000000000000000000000000000000000000000000000082169050919050565b6000819050919050565b600060ff82169050919050565b6000612d9a82612d1f565b9050919050565b60005b83811015612dbf578082015181840152602081019050612da4565b83811115612dce576000848401525b50505050565b6000601f19601f83011690509190505600a265627a7a7230582035f6d9a588cbcdc60a6f28947906572b6847fb68e927a288525fd82b313232a86c6578706572696d656e74616cf50037"};

    public static final String BINARY = org.fisco.bcos.sdk.utils.StringUtils.joinAll("", BINARY_ARRAY);

    public static final String[] SM_BINARY_ARRAY = {"608060405273e34ff45b06e012c777a02cc326b2bcc9d179d76b6000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555034801561006457600080fd5b50612e20806100746000396000f3006080604052600436106100db576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff1680630a2ec4dd146100e05780632194f8021461010b57806332e9d7031461014857806346ce7f1114610171578063485f0e6c1461019a578063678047c5146101d75780636bb169da146102005780636efa3db3146102435780636f87360a1461026e5780637cf4cb0d146102ac578063a020dad1146102e9578063c32c35a314610312578063c5c0e4b51461033b578063f00dc5f614610378578063f8c28987146103a3575b600080fd5b3480156100ec57600080fd5b506100f56103e0565b6040516101029190612a65565b60405180910390f35b34801561011757600080fd5b50610132600480360361012d919081019061234e565b61046e565b60405161013f9190612c7f565b60405180910390f35b34801561015457600080fd5b5061016f600480360361016a919081019061254e565b61080c565b005b34801561017d57600080fd5b5061019860048036036101939190810190612653565b610ad5565b005b3480156101a657600080fd5b506101c160048036036101bc9190810190612325565b610c3c565b6040516101ce9190612be0565b60405180910390f35b3480156101e357600080fd5b506101fe60048036036101f991908101906123d9565b610d53565b005b34801561020c57600080fd5b506102276004803603610222919081019061234e565b610ff6565b60405161023a9796959493929190612bfb565b60405180910390f35b34801561024f57600080fd5b50610258611453565b6040516102659190612a65565b60405180910390f35b34801561027a57600080fd5b5061029560048036036102909190810190612325565b6114e1565b6040516102a3929190612aa9565b60405180910390f35b3480156102b857600080fd5b506102d360048036036102ce9190810190612325565b6116a9565b6040516102e09190612be0565b60405180910390f35b3480156102f557600080fd5b50610310600480360361030b9190810190612495565b61174c565b005b34801561031e57600080fd5b5061033960048036036103349190810190612459565b611ad4565b005b34801561034757600080fd5b50610362600480360361035d919081019061238a565b611c6f565b60405161036f9190612c7f565b60405180910390f35b34801561038457600080fd5b5061038d611ded565b60405161039a9190612be0565b60405180910390f35b3480156103af57600080fd5b506103ca60048036036103c5919081019061238a565b611dfd565b6040516103d79190612a87565b60405180910390f35b6060600480548060200260200160405190810160405280929190818152602001828054801561046457602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001906001019080831161041a575b5050505050905090565b60006104786120d2565b6104806120d2565b6104886120d2565b600080600080600093505b60018054905084101561063c576001848154811015156104af57fe5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169250600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff169150600360008b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208981548110151561057757fe5b906000526020600020906007020160050160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905060008160ff1614151561062f576001866001840360ff166003811015156105f857fe5b6020020181815101915081815250508060ff16876001840360ff1660038110151561061f57fe5b6020020181815101915081815250505b8380600101945050610493565b600093505b600384101561069e57858460038110151561065857fe5b6020020151878560038110151561066b57fe5b602002015181151561067957fe5b04858560038110151561068857fe5b6020020181815250508380600101945050610641565b60048660016003811015156106af57fe5b60200201518760006003811015156106c357fe5b6020020151018760016003811015156106d857fe5b60200201518115156106e657fe5b048660016003811015156106f657fe5b602002015187600060038110151561070a57fe5b6020020151030281151561071a57fe5b0485600060038110151561072a57fe5b602002018181510191508181525050600886600260038110151561074a57fe5b602002015187600160038110151561075e57fe5b602002015188600060038110151561077257fe5b6020020151010187600260038110151561078857fe5b602002015181151561079657fe5b048660026003811015156107a657fe5b60200201518760006003811015156107ba57fe5b602002015103028115156107ca57fe5b048560006003811015156107da57fe5b6020020181815101915081815250508460006003811015156107f857fe5b602002015197505050505050505092915050565b60a0604051908101604052808b8b8080601f016020809104026020016040519081016040528093929190818152602001838380828437820191505050505050815260200189898080601f016020809104026020016040519081016040528093929190818152602001838380828437820191505050505050815260200187878080601f016020809104026020016040519081016040528093929190818152602001838380828437820191505050505050815260200185858080601f016020809104026020016040519081016040528093929190818152602001838380828437820191505050505050815260200183838080601f016020809104026020016040519081016040528093929190818152602001838380828437820191505050505050815250600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008201518160000190805190602001906109899291906120f5565b5060208201518160010190805190602001906109a69291906120f5565b5060408201518160020190805190602001906109c39291906120f5565b5060608201518160030190805190602001906109e09291906120f5565b5060808201518160040190805190602001906109fd9291906120f5565b5090505060405180807f636f6d70616e790000000000000000000000000000000000000000000000000081525060070190506040518091039020600019168888604051808383808284378201915050925050506040518091039020600019161415610ac95760043390806001815401808255809150509060018203906000526020600020016000909192909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550505b50505050505050505050565b84600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002080549050111515610b5b576040517fc703cb12000000000000000000000000000000000000000000000000000000008152600401610b5290612b60565b60405180910390fd5b8383600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002087815481101515610ba957fe5b90600052602060002090600702016002019190610bc7929190612175565b508181600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002087815481101515610c1657fe5b90600052602060002090600702016004019190610c34929190612175565b505050505050565b60003373ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161480610cc857506000600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1660ff1614155b1515610d09576040517fc703cb12000000000000000000000000000000000000000000000000000000008152600401610d0090612ba0565b60405180910390fd5b600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020805490509050919050565b60008360ff16118015610d6a575060648360ff1611155b1515610dab576040517fc703cb12000000000000000000000000000000000000000000000000000000008152600401610da290612b80565b60405180910390fd5b6000600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1660ff1614151515610e40576040517fc703cb12000000000000000000000000000000000000000000000000000000008152600401610e3790612b40565b60405180910390fd5b82600360008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002085815481101515610e8d57fe5b906000526020600020906007020160050160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908360ff1602179055508181600360008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002086815481101515610f4157fe5b906000526020600020906007020160060160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020","","40528092919081815260200182805460018160011615610100020316600290048015611ff85780601f10611fcd57610100808354040283529160200191611ff8565b820191906000526020600020905b815481529060010190602001808311611fdb57829003601f168201915b505050505090509392505050565b6000806000809150600090505b600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208054905081101561207b57612067848261046e565b60ff16820191508080600101915050612013565b600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002080549050828115156120c857fe5b0492505050919050565b606060405190810160405280600390602082028038833980820191505090505090565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061213657805160ff1916838001178555612164565b82800160010185558215612164579182015b82811115612163578251825591602001919060010190612148565b5b5090506121719190612264565b5090565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106121b657803560ff19168380011785556121e4565b828001600101855582156121e4579182015b828111156121e35782358255916020019190600101906121c8565b5b5090506121f19190612264565b5090565b60c06040519081016040528060008152602001606081526020016060815260200160007effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff19168152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001606081525090565b61228691905b8082111561228257600081600090555060010161226a565b5090565b90565b60006122958235612d2d565b905092915050565b60006122a98235612d4d565b905092915050565b60008083601f84011215156122c557600080fd5b8235905067ffffffffffffffff8111156122de57600080fd5b6020830191508360018202830111156122f657600080fd5b9250929050565b60006123098235612d79565b905092915050565b600061231d8235612d83565b905092915050565b60006020828403121561233757600080fd5b600061234584828501612289565b91505092915050565b6000806040838503121561236157600080fd5b600061236f85828601612289565b9250506020612380858286016122fd565b9150509250929050565b60008060006060848603121561239f57600080fd5b60006123ad86828701612289565b93505060206123be868287016122fd565b92505060406123cf86828701612289565b9150509250925092565b6000806000806000608086880312156123f157600080fd5b60006123ff88828901612289565b9550506020612410888289016122fd565b945050604061242188828901612311565b935050606086013567ffffffffffffffff81111561243e57600080fd5b61244a888289016122b1565b92509250509295509295909350565b6000806040838503121561246c57600080fd5b600061247a85828601612289565b925050602061248b85828601612311565b9150509250929050565b60008060008060008060006080888a0312156124b057600080fd5b600088013567ffffffffffffffff8111156124ca57600080fd5b6124d68a828b016122b1565b9750975050602088013567ffffffffffffffff8111156124f557600080fd5b6125018a828b016122b1565b955095505060406125148a828b0161229d565b935050606088013567ffffffffffffffff81111561253157600080fd5b61253d8a828b016122b1565b925092505092959891949750929550565b60008060008060008060008060008060a08b8d03121561256d57600080fd5b60008b013567ffffffffffffffff81111561258757600080fd5b6125938d828e016122b1565b9a509a505060208b013567ffffffffffffffff8111156125b257600080fd5b6125be8d828e016122b1565b985098505060408b013567ffffffffffffffff8111156125dd57600080fd5b6125e98d828e016122b1565b965096505060608b013567ffffffffffffffff81111561260857600080fd5b6126148d828e016122b1565b945094505060808b013567ffffffffffffffff81111561263357600080fd5b61263f8d828e016122b1565b92509250509295989b9194979a5092959850565b60008060008060006060868803121561266b57600080fd5b6000612679888289016122fd565b955050602086013567ffffffffffffffff81111561269657600080fd5b6126a2888289016122b1565b9450945050604086013567ffffffffffffffff8111156126c157600080fd5b6126cd888289016122b1565b92509250509295509295909350565b6126e581612cca565b82525050565b60006126f682612ca7565b80845260208401935061270883612c9a565b60005b8281101561273a5761271e8683516126dc565b61272782612cbd565b915060208601955060018101905061270b565b50849250505092915050565b61274f81612cea565b82525050565b600061276082612cb2565b808452612774816020860160208601612da2565b61277d81612dd5565b602085010191505092915050565b6000601c82527f50726f6a656374206e616d652063616e6e6f7420626520656d707479000000006020830152604082019050919050565b6000602582527f496e76616c6964206c6576656c2c206d7573742062652067726561746572207460208301527f68616e20300000000000000000000000000000000000000000000000000000006040830152606082019050919050565b6000602a82527f4f6e6c792074686520676f7665726e6d656e742063616e2063616c6c2074686960208301527f732066756e6374696f6e000000000000000000000000000000000000000000006040830152606082019050919050565b6000602282527f4f6e6c79206173736573736d656e74206167656e636965732063616e2073636f60208301527f72650000000000000000000000000000000000000000000000000000000000006040830152606082019050919050565b6000601382527f496e76616c69642070726f6a6563742069642e000000000000000000000000006020830152604082019050919050565b6000602882527f496e76616c69642073636f72652c206d757374206265206265747765656e203060208301527f20616e64203130300000000000000000000000000000000000000000000000006040830152606082019050919050565b6000601282527f5065726d697373696f6e2064656e6965642e00000000000000000000000000006020830152604082019050919050565b6000602a82527f4173736573736d656e74206167656e636965732063616e6e6f742075706c6f6160208301527f642070726f6a65637473000000000000000000000000000000000000000000006040830152606082019050919050565b612a0a81612d16565b82525050565b612a1981612d90565b82525050565b612a2881612d20565b82525050565b6000606082019050612a4360008301866126dc565b612a506020830185612a01565b612a5d6040830184612a10565b949350505050565b60006020820190508181036000830152612a7f81846126eb565b905092915050565b60006020820190508181036000830152612aa18184612755565b905092915050565b60006040820190508181036000830152612ac38185612755565b90508181036020830152612ad78184612755565b90509392505050565b60006020820190508181036000830152612af98161278b565b9050919050565b60006020820190508181036000830152612b19816127c2565b9050919050565b60006020820190508181036000830152612b398161281f565b9050919050565b60006020820190508181036000830152612b598161287c565b9050919050565b60006020820190508181036000830152612b79816128d9565b9050919050565b60006020820190508181036000830152612b9981612910565b9050919050565b60006020820190508181036000830152612bb98161296d565b9050919050565b60006020820190508181036000830152612bd9816129a4565b9050919050565b6000602082019050612bf56000830184612a01565b92915050565b600060e082019050612c10600083018a612a01565b8181036020830152612c228189612755565b90508181036040830152612c368188612755565b9050612c456060830187612746565b612c5260808301866126dc565b81810360a0830152612c648185612755565b9050612c7360c0830184612a1f565b98975050505050505050565b6000602082019050612c946000830184612a1f565b92915050565b6000602082019050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60007fff0000000000000000000000000000000000000000000000000000000000000082169050919050565b6000819050919050565b600060ff82169050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60007fff0000000000000000000000000000000000000000000000000000000000000082169050919050565b6000819050919050565b600060ff82169050919050565b6000612d9b82612d20565b9050919050565b60005b83811015612dc0578082015181840152602081019050612da5565b83811115612dcf576000848401525b50505050565b6000601f19601f83011690509190505600a265627a7a723058203d3212100645ce1dddaaa680ee61fdcbdd886124566e89e943ba973dcac339ae6c6578706572696d656e74616cf50037"};

    public static final String SM_BINARY = org.fisco.bcos.sdk.utils.StringUtils.joinAll("", SM_BINARY_ARRAY);

    public static final String[] ABI_ARRAY = {"[{\"constant\":false,\"inputs\":[{\"name\":\"_projectName\",\"type\":\"string\"},{\"name\":\"_projectDescription\",\"type\":\"string\"},{\"name\":\"_property\",\"type\":\"bytes1\"},{\"name\":\"_fileUrl\",\"type\":\"string\"}],\"name\":\"uploadProject\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_projectId\",\"type\":\"uint256\"},{\"name\":\"_projectDescription\",\"type\":\"string\"},{\"name\":\"_fileUrl\",\"type\":\"string\"}],\"name\":\"modifyProject\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"company\",\"type\":\"address\"},{\"name\":\"projectId\",\"type\":\"uint256\"},{\"name\":\"score\",\"type\":\"uint8\"},{\"name\":\"standard\",\"type\":\"string\"}],\"name\":\"scoreESG\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_company\",\"type\":\"address\"},{\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"viewProject\",\"outputs\":[{\"name\":\"id\",\"type\":\"uint256\"},{\"name\":\"name\",\"type\":\"string\"},{\"name\":\"description\",\"type\":\"string\"},{\"name\":\"property\",\"type\":\"bytes1\"},{\"name\":\"owner\",\"type\":\"address\"},{\"name\":\"fileUrl\",\"type\":\"string\"},{\"name\":\"score\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getAssessmentAgencies\",\"outputs\":[{\"name\":\"\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_company\",\"type\":\"address\"},{\"name\":\"_projectId\",\"type\":\"uint256\"}],\"name\":\"calculateProjectScore\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"getUserInfo\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"},{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_company\",\"type\":\"address\"},{\"name\":\"_projectId\",\"type\":\"uint256\"},{\"name\":\"_assessment\",\"type\":\"address\"}],\"name\":\"getProjectStandard\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"agency\",\"type\":\"address\"},{\"name\":\"level\",\"type\":\"uint8\"}],\"name\":\"registerAssessmentAgency\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_company\",\"type\":\"address\"}],\"name\":\"getCompanyScore\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_company\",\"type\":\"address\"},{\"name\":\"_projectId\",\"type\":\"uint256\"},{\"name\":\"_assessment\",\"type\":\"address\"}],\"name\":\"getProjectScore\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_company\",\"type\":\"address\"}],\"name\":\"getProjectsAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_username\",\"type\":\"string\"},{\"name\":\"_identity\",\"type\":\"string\"},{\"name\":\"_organizationCode\",\"type\":\"string\"},{\"name\":\"_registrationAddress\",\"type\":\"string\"},{\"name\":\"_domain\",\"type\":\"string\"}],\"name\":\"registerUser\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getCompanys\",\"outputs\":[{\"name\":\"\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getCompanyScore\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"company\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"assessment\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"projectId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"newScore\",\"type\":\"uint256\"}],\"name\":\"ScoreChanged\",\"type\":\"event\"}]"};

    public static final String ABI = org.fisco.bcos.sdk.utils.StringUtils.joinAll("", ABI_ARRAY);

    public static final String FUNC_UPLOADPROJECT = "uploadProject";

    public static final String FUNC_MODIFYPROJECT = "modifyProject";

    public static final String FUNC_SCOREESG = "scoreESG";

    public static final String FUNC_VIEWPROJECT = "viewProject";

    public static final String FUNC_GETASSESSMENTAGENCIES = "getAssessmentAgencies";

    public static final String FUNC_CALCULATEPROJECTSCORE = "calculateProjectScore";

    public static final String FUNC_GETUSERINFO = "getUserInfo";

    public static final String FUNC_GETPROJECTSTANDARD = "getProjectStandard";

    public static final String FUNC_REGISTERASSESSMENTAGENCY = "registerAssessmentAgency";

    public static final String FUNC_GETCOMPANYSCORE = "getCompanyScore";

    public static final String FUNC_GETPROJECTSCORE = "getProjectScore";

    public static final String FUNC_GETPROJECTSAMOUNT = "getProjectsAmount";

    public static final String FUNC_REGISTERUSER = "registerUser";

    public static final String FUNC_GETCOMPANYS = "getCompanys";

    public static final Event SCORECHANGED_EVENT = new Event("ScoreChanged", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
    ;

    protected ESGRatingSystem(String contractAddress, Client client, CryptoKeyPair credential) {
        super(getBinary(client.getCryptoSuite()), contractAddress, client, credential);
    }

    public static String getBinary(CryptoSuite cryptoSuite) {
        return (cryptoSuite.getCryptoTypeConfig() == CryptoType.ECDSA_TYPE ? BINARY : SM_BINARY);
    }

    public TransactionReceipt uploadProject(String _projectName, String _projectDescription, byte[] _property, String _fileUrl) {
        final Function function = new Function(
                FUNC_UPLOADPROJECT, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(_projectName), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(_projectDescription), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Bytes1(_property), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(_fileUrl)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] uploadProject(String _projectName, String _projectDescription, byte[] _property, String _fileUrl, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_UPLOADPROJECT, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(_projectName), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(_projectDescription), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Bytes1(_property), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(_fileUrl)), 
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForUploadProject(String _projectName, String _projectDescription, byte[] _property, String _fileUrl) {
        final Function function = new Function(
                FUNC_UPLOADPROJECT, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(_projectName), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(_projectDescription), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Bytes1(_property), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(_fileUrl)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple4<String, String, byte[], String> getUploadProjectInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_UPLOADPROJECT, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Bytes1>() {}, new TypeReference<Utf8String>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple4<String, String, byte[], String>(

                (String) results.get(0).getValue(), 
                (String) results.get(1).getValue(), 
                (byte[]) results.get(2).getValue(), 
                (String) results.get(3).getValue()
                );
    }

    public TransactionReceipt modifyProject(BigInteger _projectId, String _projectDescription, String _fileUrl) {
        final Function function = new Function(
                FUNC_MODIFYPROJECT, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(_projectId), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(_projectDescription), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(_fileUrl)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] modifyProject(BigInteger _projectId, String _projectDescription, String _fileUrl, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_MODIFYPROJECT, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(_projectId), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(_projectDescription), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(_fileUrl)), 
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForModifyProject(BigInteger _projectId, String _projectDescription, String _fileUrl) {
        final Function function = new Function(
                FUNC_MODIFYPROJECT, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(_projectId), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(_projectDescription), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(_fileUrl)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple3<BigInteger, String, String> getModifyProjectInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_MODIFYPROJECT, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple3<BigInteger, String, String>(

                (BigInteger) results.get(0).getValue(), 
                (String) results.get(1).getValue(), 
                (String) results.get(2).getValue()
                );
    }

    public TransactionReceipt scoreESG(String company, BigInteger projectId, BigInteger score, String standard) {
        final Function function = new Function(
                FUNC_SCOREESG, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(company), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(projectId), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint8(score), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(standard)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] scoreESG(String company, BigInteger projectId, BigInteger score, String standard, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_SCOREESG, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(company), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(projectId), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint8(score), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(standard)), 
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForScoreESG(String company, BigInteger projectId, BigInteger score, String standard) {
        final Function function = new Function(
                FUNC_SCOREESG, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(company), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(projectId), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint8(score), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(standard)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple4<String, BigInteger, BigInteger, String> getScoreESGInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_SCOREESG, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint8>() {}, new TypeReference<Utf8String>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple4<String, BigInteger, BigInteger, String>(

                (String) results.get(0).getValue(), 
                (BigInteger) results.get(1).getValue(), 
                (BigInteger) results.get(2).getValue(), 
                (String) results.get(3).getValue()
                );
    }

    public Tuple7<BigInteger, String, String, byte[], String, String, BigInteger> viewProject(String _company, BigInteger _id) throws ContractException {
        final Function function = new Function(FUNC_VIEWPROJECT, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(_company), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(_id)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Bytes1>() {}, new TypeReference<Address>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Uint8>() {}));
        List<Type> results = executeCallWithMultipleValueReturn(function);
        return new Tuple7<BigInteger, String, String, byte[], String, String, BigInteger>(
                (BigInteger) results.get(0).getValue(), 
                (String) results.get(1).getValue(), 
                (String) results.get(2).getValue(), 
                (byte[]) results.get(3).getValue(), 
                (String) results.get(4).getValue(), 
                (String) results.get(5).getValue(), 
                (BigInteger) results.get(6).getValue());
    }

    public List getAssessmentAgencies() throws ContractException {
        final Function function = new Function(FUNC_GETASSESSMENTAGENCIES, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Address>>() {}));
        List<Type> result = (List<Type>) executeCallWithSingleValueReturn(function, List.class);
        return convertToNative(result);
    }

    public BigInteger calculateProjectScore(String _company, BigInteger _projectId) throws ContractException {
        final Function function = new Function(FUNC_CALCULATEPROJECTSCORE, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(_company), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(_projectId)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint8>() {}));
        return executeCallWithSingleValueReturn(function, BigInteger.class);
    }

    public Tuple2<String, String> getUserInfo(String _address) throws ContractException {
        final Function function = new Function(FUNC_GETUSERINFO, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(_address)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}));
        List<Type> results = executeCallWithMultipleValueReturn(function);
        return new Tuple2<String, String>(
                (String) results.get(0).getValue(), 
                (String) results.get(1).getValue());
    }

    public String getProjectStandard(String _company, BigInteger _projectId, String _assessment) throws ContractException {
        final Function function = new Function(FUNC_GETPROJECTSTANDARD, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(_company), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(_projectId), 
                new org.fisco.bcos.sdk.abi.datatypes.Address(_assessment)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeCallWithSingleValueReturn(function, String.class);
    }

    public TransactionReceipt registerAssessmentAgency(String agency, BigInteger level) {
        final Function function = new Function(
                FUNC_REGISTERASSESSMENTAGENCY, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(agency), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint8(level)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] registerAssessmentAgency(String agency, BigInteger level, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_REGISTERASSESSMENTAGENCY, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(agency), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint8(level)), 
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForRegisterAssessmentAgency(String agency, BigInteger level) {
        final Function function = new Function(
                FUNC_REGISTERASSESSMENTAGENCY, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(agency), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint8(level)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple2<String, BigInteger> getRegisterAssessmentAgencyInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_REGISTERASSESSMENTAGENCY, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Uint8>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple2<String, BigInteger>(

                (String) results.get(0).getValue(), 
                (BigInteger) results.get(1).getValue()
                );
    }

    public BigInteger getCompanyScore(String _company) throws ContractException {
        final Function function = new Function(FUNC_GETCOMPANYSCORE, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(_company)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeCallWithSingleValueReturn(function, BigInteger.class);
    }

    public BigInteger getProjectScore(String _company, BigInteger _projectId, String _assessment) throws ContractException {
        final Function function = new Function(FUNC_GETPROJECTSCORE, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(_company), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(_projectId), 
                new org.fisco.bcos.sdk.abi.datatypes.Address(_assessment)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint8>() {}));
        return executeCallWithSingleValueReturn(function, BigInteger.class);
    }

    public BigInteger getProjectsAmount(String _company) throws ContractException {
        final Function function = new Function(FUNC_GETPROJECTSAMOUNT, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(_company)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeCallWithSingleValueReturn(function, BigInteger.class);
    }

    public TransactionReceipt registerUser(String _username, String _identity, String _organizationCode, String _registrationAddress, String _domain) {
        final Function function = new Function(
                FUNC_REGISTERUSER, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(_username), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(_identity), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(_organizationCode), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(_registrationAddress), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(_domain)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] registerUser(String _username, String _identity, String _organizationCode, String _registrationAddress, String _domain, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_REGISTERUSER, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(_username), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(_identity), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(_organizationCode), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(_registrationAddress), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(_domain)), 
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForRegisterUser(String _username, String _identity, String _organizationCode, String _registrationAddress, String _domain) {
        final Function function = new Function(
                FUNC_REGISTERUSER, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(_username), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(_identity), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(_organizationCode), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(_registrationAddress), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(_domain)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple5<String, String, String, String, String> getRegisterUserInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_REGISTERUSER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple5<String, String, String, String, String>(

                (String) results.get(0).getValue(), 
                (String) results.get(1).getValue(), 
                (String) results.get(2).getValue(), 
                (String) results.get(3).getValue(), 
                (String) results.get(4).getValue()
                );
    }

    public List getCompanys() throws ContractException {
        final Function function = new Function(FUNC_GETCOMPANYS, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Address>>() {}));
        List<Type> result = (List<Type>) executeCallWithSingleValueReturn(function, List.class);
        return convertToNative(result);
    }

    public BigInteger getCompanyScore() throws ContractException {
        final Function function = new Function(FUNC_GETCOMPANYSCORE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeCallWithSingleValueReturn(function, BigInteger.class);
    }

    public List<ScoreChangedEventResponse> getScoreChangedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(SCORECHANGED_EVENT, transactionReceipt);
        ArrayList<ScoreChangedEventResponse> responses = new ArrayList<ScoreChangedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            ScoreChangedEventResponse typedResponse = new ScoreChangedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.company = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.assessment = (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.projectId = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.newScore = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public void subscribeScoreChangedEvent(String fromBlock, String toBlock, List<String> otherTopics, EventCallback callback) {
        String topic0 = eventEncoder.encode(SCORECHANGED_EVENT);
        subscribeEvent(ABI,BINARY,topic0,fromBlock,toBlock,otherTopics,callback);
    }

    public void subscribeScoreChangedEvent(EventCallback callback) {
        String topic0 = eventEncoder.encode(SCORECHANGED_EVENT);
        subscribeEvent(ABI,BINARY,topic0,callback);
    }

    public static ESGRatingSystem load(String contractAddress, Client client, CryptoKeyPair credential) {
        return new ESGRatingSystem(contractAddress, client, credential);
    }

    public static ESGRatingSystem deploy(Client client, CryptoKeyPair credential) throws ContractException {
        return deploy(ESGRatingSystem.class, client, credential, getBinary(client.getCryptoSuite()), "");
    }

    public static class ScoreChangedEventResponse {
        public TransactionReceipt.Logs log;

        public String company;

        public String assessment;

        public BigInteger projectId;

        public BigInteger newScore;
    }
}
