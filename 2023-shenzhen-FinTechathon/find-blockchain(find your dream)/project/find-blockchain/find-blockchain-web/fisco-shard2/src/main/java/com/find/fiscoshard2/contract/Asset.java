package com.find.fiscoshard2.contract;

import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import org.fisco.bcos.sdk.abi.FunctionReturnDecoder;
import org.fisco.bcos.sdk.abi.TypeReference;
import org.fisco.bcos.sdk.abi.datatypes.Bool;
import org.fisco.bcos.sdk.abi.datatypes.DynamicArray;
import org.fisco.bcos.sdk.abi.datatypes.Event;
import org.fisco.bcos.sdk.abi.datatypes.Function;
import org.fisco.bcos.sdk.abi.datatypes.Type;
import org.fisco.bcos.sdk.abi.datatypes.Utf8String;
import org.fisco.bcos.sdk.abi.datatypes.generated.Int256;
import org.fisco.bcos.sdk.abi.datatypes.generated.Uint256;
import org.fisco.bcos.sdk.abi.datatypes.generated.tuples.generated.Tuple1;
import org.fisco.bcos.sdk.abi.datatypes.generated.tuples.generated.Tuple2;
import org.fisco.bcos.sdk.abi.datatypes.generated.tuples.generated.Tuple3;
import org.fisco.bcos.sdk.client.Client;
import org.fisco.bcos.sdk.contract.Contract;
import org.fisco.bcos.sdk.crypto.CryptoSuite;
import org.fisco.bcos.sdk.crypto.keypair.CryptoKeyPair;
import org.fisco.bcos.sdk.eventsub.EventCallback;
import org.fisco.bcos.sdk.model.CryptoType;
import org.fisco.bcos.sdk.model.TransactionReceipt;
import org.fisco.bcos.sdk.model.callback.TransactionCallback;
import org.fisco.bcos.sdk.transaction.model.exception.ContractException;

@SuppressWarnings("unchecked")
public class Asset extends Contract {
    public static final String[] BINARY_ARRAY = {"60806040526110066000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055503480156200005357600080fd5b50611001600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166356004b6a6040805190810160405280600981526020017f745f6163636f756e7400000000000000000000000000000000000000000000008152506040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016200014591906200028e565b602060405180830381600087803b1580156200016057600080fd5b505af115801562000175573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506200019b9190810190620001b8565b5062000338565b6000620001b08251620002e7565b905092915050565b600060208284031215620001cb57600080fd5b6000620001db84828501620001a2565b91505092915050565b6000620001f182620002dc565b80845262000207816020860160208601620002f1565b620002128162000327565b602085010191505092915050565b6000601a82527f6163636f756e745f6e616d652c6163636f756e745f61737365740000000000006020830152604082019050919050565b6000600782527f6163636f756e74000000000000000000000000000000000000000000000000006020830152604082019050919050565b60006060820190508181036000830152620002aa8184620001e4565b90508181036020830152620002bf8162000257565b90508181036040830152620002d48162000220565b905092915050565b600081519050919050565b6000819050919050565b60005b8381101562000311578082015181840152602081019050620002f4565b8381111562000321576000848401525b50505050565b6000601f19601f8301169050919050565b61455480620003486000396000f3006080604052600436106100c5576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff1680631de45b10146100ca57806334a18dda14610107578063465c41051461013057806350f1373b1461016d578063619797e1146101aa5780636f34c164146101e957806379fa913f1461022657806380599e4b1461024f5780639a614e5d1461028c578063bca926af146102c9578063d39f70bc146102e0578063e2a1a99d146102f7578063fcd7e3c114610334575b600080fd5b3480156100d657600080fd5b506100f160048036036100ec9190810190613ca1565b610373565b6040516100fe919061407d565b60405180910390f35b34801561011357600080fd5b5061012e60048036036101299190810190613d20565b610c5d565b005b34801561013c57600080fd5b5061015760048036036101529190810190613c35565b610d2e565b6040516101649190614062565b60405180910390f35b34801561017957600080fd5b50610194600480360361018f9190810190613be1565b610e7e565b6040516101a1919061407d565b60405180910390f35b3480156101b657600080fd5b506101d160048036036101cc9190810190613b5f565b61138d565b6040516101e093929190614016565b60405180910390f35b3480156101f557600080fd5b50610210600480360361020b9190810190613be1565b611c18565b60405161021d919061407d565b60405180910390f35b34801561023257600080fd5b5061024d60048036036102489190810190613b5f565b612127565b005b34801561025b57600080fd5b5061027660048036036102719190810190613b5f565b6121f5565b604051610283919061407d565b60405180910390f35b34801561029857600080fd5b506102b360048036036102ae9190810190613be1565b612590565b6040516102c0919061407d565b60405180910390f35b3480156102d557600080fd5b506102de612a56565b005b3480156102ec57600080fd5b506102f5612bd8565b005b34801561030357600080fd5b5061031e60048036036103199190810190613be1565b612d4e565b60405161032b919061407d565b60405180910390f35b34801561034057600080fd5b5061035b60048036036103569190810190613b5f565b613266565b60405161036a9392919061417b565b60405180910390f35b6000606080600080600080600080600060206040519081016040528060008152509850602060405190810160405280600081525097506000965060009550600094506103be8d613266565b809a50819850829b50505050610409896040805190810160405280600281526020017f2d31000000000000000000000000000000000000000000000000000000000000815250610d2e565b15610476577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff96507f3a5c0c275bb95165abf2ffef5511a8c0bdd80dedb12a4e92960483b73aaee8a7878e8e8e60405161046694939291906140d6565b60405180910390a1869950610c4d565b61047f8c613266565b809a50819750829b505050506104ca896040805190810160405280600281526020017f2d31000000000000000000000000000000000000000000000000000000000000815250610d2e565b15610537577ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe96507f3a5c0c275bb95165abf2ffef5511a8c0bdd80dedb12a4e92960483b73aaee8a7878e8e8e60405161052794939291906140d6565b60405180910390a1869950610c4d565b8a8612156105a7577ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffd96507f3a5c0c275bb95165abf2ffef5511a8c0bdd80dedb12a4e92960483b73aaee8a7878e8e8e60405161059794939291906140d6565b60405180910390a1869950610c4d565b848b86011215610619577ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc96507f3a5c0c275bb95165abf2ffef5511a8c0bdd80dedb12a4e92960483b73aaee8a7878e8e8e60405161060994939291906140d6565b60405180910390a1869950610c4d565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663f23f63c96040805190810160405280600981526020017f745f6163636f756e7400000000000000000000000000000000000000000000008152506040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016106c59190614129565b602060405180830381600087803b1580156106df57600080fd5b505af11580156106f3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506107179190810190613b0d565b93508373ffffffffffffffffffffffffffffffffffffffff166313db93466040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b15801561077d57600080fd5b505af1158015610791573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506107b59190810190613ae4565b92508273ffffffffffffffffffffffffffffffffffffffff1663e942b5166040518163ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040161080a90614278565b600060405180830381600087803b15801561082457600080fd5b505af1158015610838573d6000803e3d6000fd5b505050508273ffffffffffffffffffffffffffffffffffffffff1663e942b5168e6040518263ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040161089191906142cb565b600060405180830381600087803b1580156108ab57600080fd5b505af11580156108bf573d6000803e3d6000fd5b505050508273ffffffffffffffffffffffffffffffffffffffff16632ef8ba748c88036040518263ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040161091a9190614320565b600060405180830381600087803b15801561093457600080fd5b505af1158015610948573d6000803e3d6000fd5b505050506109588d8c8803612590565b91506001821415156109cc577ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffb96507f3a5c0c275bb95165abf2ffef5511a8c0bdd80dedb12a4e92960483b73aaee8a7878e8e8e6040516109bc94939291906140d6565b60405180910390a1869950610c4d565b8373ffffffffffffffffffffffffffffffffffffffff166313db93466040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b158015610a3057600080fd5b505af1158015610a44573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250610a689190810190613ae4565b90508273ffffffffffffffffffffffffffffffffffffffff1663e942b5166040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401610abd90614278565b600060405180830381600087803b158015610ad757600080fd5b505af1158015610aeb573d6000803e3d6000fd5b505050508073ffffffffffffffffffffffffffffffffffffffff1663e942b5168d6040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401610b4491906142cb565b600060405180830381600087803b158015610b5e57600080fd5b505af1158015610b72573d6000803e3d6000fd5b505050508073ffffffffffffffffffffffffffffffffffffffff16632ef8ba748c87016040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401610bcd9190614320565b600060405180830381600087803b158015610be757600080fd5b505af1158015610bfb573d6000803e3d6000fd5b50505050610c0b8c8c8703612590565b507f3a5c0c275bb95165abf2ffef5511a8c0bdd80dedb12a4e92960483b73aaee8a7878e8e8e604051610c4194939291906140d6565b60405180910390a18699505b5050505050505050509392505050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16630553904e3084846040518463ffffffff167c010000000000000000000000000000","0000000000000000000000000000028152600401610cd793929190613fd8565b602060405180830381600087803b158015610cf157600080fd5b505af1158015610d05573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250610d299190810190613b36565b505050565b6000606080600085925084915081518351141515610d4f5760009350610e75565b600090505b8251811015610e70578181815181101515610d6b57fe5b9060200101517f010000000000000000000000000000000000000000000000000000000000000090047f0100000000000000000000000000000000000000000000000000000000000000027effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff19168382815181101515610de657fe5b9060200101517f010000000000000000000000000000000000000000000000000000000000000090047f0100000000000000000000000000000000000000000000000000000000000000027effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916141515610e635760009350610e75565b8080600101915050610d54565b600193505b50505092915050565b60006060806000806000806000602060405190810160405280600081525096506020604051908101604052806000815250955060009450610ebe8a613266565b809850819750829950505050600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663f23f63c96040805190810160405280600981526020017f745f6163636f756e7400000000000000000000000000000000000000000000008152506040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401610f769190614129565b602060405180830381600087803b158015610f9057600080fd5b505af1158015610fa4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250610fc89190810190613b0d565b93508373ffffffffffffffffffffffffffffffffffffffff166313db93466040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b15801561102e57600080fd5b505af1158015611042573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506110669190810190613ae4565b92508273ffffffffffffffffffffffffffffffffffffffff16632ef8ba748a87036040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016110bf9190614320565b600060405180830381600087803b1580156110d957600080fd5b505af11580156110ed573d6000803e3d6000fd5b505050508373ffffffffffffffffffffffffffffffffffffffff16637857d7c96040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b15801561115557600080fd5b505af1158015611169573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061118d9190810190613a92565b91508173ffffffffffffffffffffffffffffffffffffffff1663cd30a1d16040518163ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016111e290614278565b600060405180830381600087803b1580156111fc57600080fd5b505af1158015611210573d6000803e3d6000fd5b505050508173ffffffffffffffffffffffffffffffffffffffff1663cd30a1d18b6040518263ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040161126991906142cb565b600060405180830381600087803b15801561128357600080fd5b505af1158015611297573d6000803e3d6000fd5b505050508373ffffffffffffffffffffffffffffffffffffffff1663bf2b70a184846040518363ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016112f292919061423c565b602060405180830381600087803b15801561130c57600080fd5b505af1158015611320573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506113449190810190613b36565b90507f8e5890af40fc24a059396aca2f83d6ce41fcef086876548fa4fb8ec27e9d292a81604051611375919061407d565b60405180910390a18097505050505050505092915050565b606080606060008060006060806060600080600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663f23f63c96040805190810160405280600981526020017f745f6163636f756e7400000000000000000000000000000000000000000000008152506040518263ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040161144b9190614129565b602060405180830381600087803b15801561146557600080fd5b505af1158015611479573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061149d9190810190613b0d565b97508773ffffffffffffffffffffffffffffffffffffffff16637857d7c96040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b15801561150357600080fd5b505af1158015611517573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061153b9190810190613a92565b96508773ffffffffffffffffffffffffffffffffffffffff1663e8434e398d896040518363ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040161159492919061414b565b602060405180830381600087803b1580156115ae57600080fd5b505af11580156115c2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506115e69190810190613abb565b95508573ffffffffffffffffffffffffffffffffffffffff1663949d225d6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b15801561164c57600080fd5b505af1158015611660573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506116849190810190613b36565b6040519080825280602002602001820160405280156116b757816020015b60608152602001906001900390816116a25790505b5094508573ffffffffffffffffffffffffffffffffffffffff1663949d225d6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b15801561171e57600080fd5b505af1158015611732573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506117569190810190613b36565b6040519080825280602002602001820160405280156117845781602001602082028038833980820191505090505b5093508573ffffffffffffffffffffffffffffffffffffffff1663949d225d6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b1580156117eb57600080fd5b505af11580156117ff573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506118239190810190613b36565b60405190808252806020026020018201604052801561185657816020015b60608152602001906001900390816118415790505b509250600091505b8573ffffffffffffffffffffffffffffffffffffffff1663949d225d6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b1580156118c257600080fd5b505af11580156118d6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506118fa9190810190613b36565b821215611c00578573ffffffffffffffffffffffffffffffffffffffff1663846719e0836040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401611956919061407d565b602060405180830381600087803b15801561197057600080fd5b505af1158015611984573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506119a89190810190613ae4565b90508073ffffffffffffffffffffffffffffffffffffffff16639c981fcb6040518163ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016119fd906141c0565b600060405180830381600087803b158015611a1757600080fd5b505af1158015611a2b573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250611a549190810190613ba0565b8583815181101515611a6257fe5b906020019060200201819052508073ffffffffffffffffffffffffffffffffffffffff1663fda69fae6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401611ac290614300565b602060405180830381600087803b158015611adc57600080fd5b505af1158015611af0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250611b149190810190613b36565b8483815181101515611b2257fe5b90602001906020020181815250508073ffffffffffffffffffffffffffffffffffffffff16639c981fcb6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401611b83906142ab565b600060405180830381600087803b158015611b9d57600080fd5b505af1158015611bb1573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250611bda9190810190613ba0565b8383815181101515611be857fe5b9060200190602002018190525081600101915061185e565b8484849a509a509a5050505050505050509193909250565b60006060806000806000806000602060405190810160405280600081525096506020604051908101604052806000815250955060009450611c588a613266565b809850819750829950505050600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663f23f63c96040805190810160405280600981526020017f745f","","672c696e74323536290000000000000000815250612127565b612d0e6040805190810160405280601a81526020017f4d696e757375706461746528737472696e672c696e7432353629000000000000815250612127565b612d4c6040805190810160405280600e81526020017f72656d6f766528737472696e6729000000000000000000000000000000000000815250612127565b565b6000606080600080600080600060206040519081016040528060008152509650602060405190810160405280600081525095506000945060009350612d928a613266565b809850819650829950505050612ddd876040805190810160405280600281526020017f2d31000000000000000000000000000000000000000000000000000000000000815250610d2e565b156131f757600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663f23f63c96040805190810160405280600981526020017f745f6163636f756e7400000000000000000000000000000000000000000000008152506040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401612e8e9190614129565b602060405180830381600087803b158015612ea857600080fd5b505af1158015612ebc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250612ee09190810190613b0d565b92508273ffffffffffffffffffffffffffffffffffffffff166313db93466040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b158015612f4657600080fd5b505af1158015612f5a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250612f7e9190810190613ae4565b91508173ffffffffffffffffffffffffffffffffffffffff1663e942b5166040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401612fd390614278565b600060405180830381600087803b158015612fed57600080fd5b505af1158015613001573d6000803e3d6000fd5b505050508173ffffffffffffffffffffffffffffffffffffffff1663e942b5168b6040518263ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040161305a91906142cb565b600060405180830381600087803b15801561307457600080fd5b505af1158015613088573d6000803e3d6000fd5b505050508173ffffffffffffffffffffffffffffffffffffffff16632ef8ba748a6040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016130e19190614320565b600060405180830381600087803b1580156130fb57600080fd5b505af115801561310f573d6000803e3d6000fd5b505050508273ffffffffffffffffffffffffffffffffffffffff166331afac36836040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401613168919061420e565b602060405180830381600087803b15801561318257600080fd5b505af1158015613196573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506131ba9190810190613b36565b905060018114156131ce57600094506131f2565b7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe94505b61321b565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff94505b7fc80814306a567881c5c316a4db1321b1f7c3d59f2c0c3baa0dd2013cdef90f34858b8b60405161324e93929190614098565b60405180910390a18497505050505050505092915050565b606060006060600080600060608060606000806060600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663f23f63c96040805190810160405280600981526020017f745f6163636f756e7400000000000000000000000000000000000000000000008152506040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016133279190614129565b602060405180830381600087803b15801561334157600080fd5b505af1158015613355573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506133799190810190613b0d565b98508873ffffffffffffffffffffffffffffffffffffffff16637857d7c96040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b1580156133df57600080fd5b505af11580156133f3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506134179190810190613a92565b97508873ffffffffffffffffffffffffffffffffffffffff1663e8434e39896040518263ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040161346e91906141e0565b602060405180830381600087803b15801561348857600080fd5b505af115801561349c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506134c09190810190613abb565b96508673ffffffffffffffffffffffffffffffffffffffff1663949d225d6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b15801561352657600080fd5b505af115801561353a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061355e9190810190613b36565b60405190808252806020026020018201604052801561359157816020015b606081526020019060019003908161357c5790505b5095508673ffffffffffffffffffffffffffffffffffffffff1663949d225d6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b1580156135f857600080fd5b505af115801561360c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506136309190810190613b36565b60405190808252806020026020018201604052801561365e5781602001602082028038833980820191505090505b5094508673ffffffffffffffffffffffffffffffffffffffff1663949d225d6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b1580156136c557600080fd5b505af11580156136d9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506136fd9190810190613b36565b60405190808252806020026020018201604052801561373057816020015b606081526020019060019003908161371b5790505b5093507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff92506137946040805190810160405280600781526020017f6163636f756e740000000000000000000000000000000000000000000000000081525061138d565b809650819750829850505050600091505b8673ffffffffffffffffffffffffffffffffffffffff1663949d225d6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b15801561380957600080fd5b505af115801561381d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506138419190810190613b36565b8212156138d557838281518110151561385657fe5b90602001906020020151905061386c818e610d2e565b156138ca57858281518110151561387f57fe5b90602001906020020151858381518110151561389757fe5b9060200190602002015185848151811015156138af57fe5b906020019060200201518292508090509b509b509b5061394a565b8160010191506137a5565b826040805190810160405280600281526020017f2d31000000000000000000000000000000000000000000000000000000000000815250906040805190810160405280600281526020017f2d310000000000000000000000000000000000000000000000000000000000008152509b509b509b505b5050505050505050509193909250565b60006139668251614447565b905092915050565b600061397a8251614459565b905092915050565b600061398e825161446b565b905092915050565b60006139a2825161447d565b905092915050565b60006139b6823561448f565b905092915050565b60006139ca825161448f565b905092915050565b600082601f83011215156139e557600080fd5b81356139f86139f38261437b565b61434e565b91508082526020830160208301858383011115613a1457600080fd5b613a1f8382846144c7565b50505092915050565b600082601f8301121515613a3b57600080fd5b8151613a4e613a498261437b565b61434e565b91508082526020830160208301858383011115613a6a57600080fd5b613a758382846144d6565b50505092915050565b6000613a8a8235614499565b905092915050565b600060208284031215613aa457600080fd5b6000613ab28482850161395a565b91505092915050565b600060208284031215613acd57600080fd5b6000613adb8482850161396e565b91505092915050565b600060208284031215613af657600080fd5b6000613b0484828501613982565b91505092915050565b600060208284031215613b1f57600080fd5b6000613b2d84828501613996565b91505092915050565b600060208284031215613b4857600080fd5b6000613b56848285016139be565b91505092915050565b600060208284031215613b7157600080fd5b600082013567ffffffffffffffff811115613b8b57600080fd5b613b97848285016139d2565b91505092915050565b600060208284031215613bb257600080fd5b600082015167ffffffffffffffff811115613bcc57600080fd5b613bd884828501613a28565b91505092915050565b60008060408385031215613bf457600080fd5b600083013567ffffffffffffffff811115613c0e57600080fd5b613c1a858286016139d2565b9250506020613c2b858286016139aa565b9150509250929050565b60008060408385031215613c4857600080fd5b600083013567ffffffffffffffff811115613c6257600080fd5b613c6e858286016139d2565b925050602083013567ffffffffffffffff811115613c8b57600080fd5b613c97858286016139d2565b9150509250929050565b600080600060608486031215613cb657600080fd5b60","0084013567ffffffffffffffff811115613cd057600080fd5b613cdc868287016139d2565b935050602084013567ffffffffffffffff811115613cf957600080fd5b613d05868287016139d2565b9250506040613d16868287016139aa565b9150509250925092565b60008060408385031215613d3357600080fd5b600083013567ffffffffffffffff811115613d4d57600080fd5b613d59858286016139d2565b9250506020613d6a85828601613a7e565b9150509250929050565b613d7d81614407565b82525050565b6000613d8e826143c1565b808452602084019350613da0836143a7565b60005b82811015613dd257613db6868351613e79565b613dbf826143ed565b9150602086019550600181019050613da3565b50849250505092915050565b6000613de9826143cc565b80845260208401935083602082028501613e02856143b4565b60005b84811015613e3b578383038852613e1d838351613ebe565b9250613e28826143fa565b9150602088019750600181019050613e05565b508196508694505050505092915050565b613e5581614427565b82525050565b613e64816144a3565b82525050565b613e73816144b5565b82525050565b613e8281614433565b82525050565b6000613e93826143e2565b808452613ea78160208601602086016144d6565b613eb081614509565b602085010191505092915050565b6000613ec9826143d7565b808452613edd8160208601602086016144d6565b613ee681614509565b602085010191505092915050565b6000600782527f6163636f756e74000000000000000000000000000000000000000000000000006020830152604082019050919050565b6000600c82527f6163636f756e745f6e616d6500000000000000000000000000000000000000006020830152604082019050919050565b6000600d82527f6163636f756e745f6173736574000000000000000000000000000000000000006020830152604082019050919050565b613fa28161443d565b82525050565b6000604082019050613fbd6000830185613d74565b8181036020830152613fcf8184613e88565b90509392505050565b6000606082019050613fed6000830186613d74565b8181036020830152613fff8185613e88565b905061400e6040830184613f99565b949350505050565b600060608201905081810360008301526140308186613dde565b905081810360208301526140448185613d83565b905081810360408301526140588184613dde565b9050949350505050565b60006020820190506140776000830184613e4c565b92915050565b60006020820190506140926000830184613e79565b92915050565b60006060820190506140ad6000830186613e79565b81810360208301526140bf8185613e88565b90506140ce6040830184613e79565b949350505050565b60006080820190506140eb6000830187613e79565b81810360208301526140fd8186613e88565b905081810360408301526141118185613e88565b90506141206060830184613e79565b95945050505050565b600060208201905081810360008301526141438184613ebe565b905092915050565b600060408201905081810360008301526141658185613e88565b90506141746020830184613e5b565b9392505050565b600060608201905081810360008301526141958186613e88565b90506141a46020830185613e79565b81810360408301526141b68184613e88565b9050949350505050565b600060208201905081810360008301526141d981613ef4565b9050919050565b600060408201905081810360008301526141f981613ef4565b90506142086020830184613e5b565b92915050565b6000604082019050818103600083015261422781613ef4565b90506142366020830184613e6a565b92915050565b6000606082019050818103600083015261425581613ef4565b90506142646020830185613e6a565b6142716040830184613e5b565b9392505050565b6000604082019050818103600083015261429181613ef4565b905081810360208301526142a481613ef4565b9050919050565b600060208201905081810360008301526142c481613f2b565b9050919050565b600060408201905081810360008301526142e481613f2b565b905081810360208301526142f88184613e88565b905092915050565b6000602082019050818103600083015261431981613f62565b9050919050565b6000604082019050818103600083015261433981613f62565b90506143486020830184613e79565b92915050565b6000604051905081810181811067ffffffffffffffff8211171561437157600080fd5b8060405250919050565b600067ffffffffffffffff82111561439257600080fd5b601f19601f8301169050602081019050919050565b6000602082019050919050565b6000602082019050919050565b600081519050919050565b600081519050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b6000602082019050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60008115159050919050565b6000819050919050565b6000819050919050565b600061445282614407565b9050919050565b600061446482614407565b9050919050565b600061447682614407565b9050919050565b600061448882614407565b9050919050565b6000819050919050565b6000819050919050565b60006144ae82614407565b9050919050565b60006144c082614407565b9050919050565b82818337600083830152505050565b60005b838110156144f45780820151818401526020810190506144d9565b83811115614503576000848401525b50505050565b6000601f19601f83011690509190505600a265627a7a7230582003c10bc03fa2595365307abe7376d69a5a74ef19ed223b583da971d510c831f26c6578706572696d656e74616cf50037"};

    public static final String BINARY = org.fisco.bcos.sdk.utils.StringUtils.joinAll("", BINARY_ARRAY);

    public static final String[] SM_BINARY_ARRAY = {"60806040526110066000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055503480156200005357600080fd5b50611001600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663c92a78016040805190810160405280600981526020017f745f6163636f756e7400000000000000000000000000000000000000000000008152506040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016200014591906200028e565b602060405180830381600087803b1580156200016057600080fd5b505af115801562000175573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506200019b9190810190620001b8565b5062000338565b6000620001b08251620002e7565b905092915050565b600060208284031215620001cb57600080fd5b6000620001db84828501620001a2565b91505092915050565b6000620001f182620002dc565b80845262000207816020860160208601620002f1565b620002128162000327565b602085010191505092915050565b6000601a82527f6163636f756e745f6e616d652c6163636f756e745f61737365740000000000006020830152604082019050919050565b6000600782527f6163636f756e74000000000000000000000000000000000000000000000000006020830152604082019050919050565b60006060820190508181036000830152620002aa8184620001e4565b90508181036020830152620002bf8162000257565b90508181036040830152620002d48162000220565b905092915050565b600081519050919050565b6000819050919050565b60005b8381101562000311578082015181840152602081019050620002f4565b8381111562000321576000848401525b50505050565b6000601f19601f8301169050919050565b61455380620003486000396000f3006080604052600436106100c4576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff168062f0e133146100c957806331075270146100f25780633ac6b6481461012f5780635b325d781461016c578063748e7a1b146101ab57806386b733f9146101c257806394618e4c146101ff578063a336089f14610216578063a54a9ff714610253578063b4c653e014610290578063bbd51fb0146102b9578063cf5b1a01146102f6578063cfe551c214610333575b600080fd5b3480156100d557600080fd5b506100f060048036036100eb9190810190613b5e565b610372565b005b3480156100fe57600080fd5b5061011960048036036101149190810190613c34565b610440565b6040516101269190614061565b60405180910390f35b34801561013b57600080fd5b5061015660048036036101519190810190613be0565b610590565b604051610163919061407c565b60405180910390f35b34801561017857600080fd5b50610193600480360361018e9190810190613b5e565b610a9f565b6040516101a29392919061417a565b60405180910390f35b3480156101b757600080fd5b506101c0611193565b005b3480156101ce57600080fd5b506101e960048036036101e49190810190613b5e565b611309565b6040516101f6919061407c565b60405180910390f35b34801561020b57600080fd5b506102146116a4565b005b34801561022257600080fd5b5061023d60048036036102389190810190613be0565b611826565b60405161024a919061407c565b60405180910390f35b34801561025f57600080fd5b5061027a60048036036102759190810190613be0565b611cec565b604051610287919061407c565b60405180910390f35b34801561029c57600080fd5b506102b760048036036102b29190810190613d1f565b6121fb565b005b3480156102c557600080fd5b506102e060048036036102db9190810190613be0565b6122cc565b6040516102ed919061407c565b60405180910390f35b34801561030257600080fd5b5061031d60048036036103189190810190613ca0565b6127e4565b60405161032a919061407c565b60405180910390f35b34801561033f57600080fd5b5061035a60048036036103559190810190613b5e565b6130ce565b60405161036993929190614015565b60405180910390f35b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663714c65bd30836040518363ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016103ea929190613fa7565b602060405180830381600087803b15801561040457600080fd5b505af1158015610418573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061043c9190810190613b35565b5050565b60006060806000859250849150815183511415156104615760009350610587565b600090505b825181101561058257818181518110151561047d57fe5b9060200101517f010000000000000000000000000000000000000000000000000000000000000090047f0100000000000000000000000000000000000000000000000000000000000000027effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff191683828151811015156104f857fe5b9060200101517f010000000000000000000000000000000000000000000000000000000000000090047f0100000000000000000000000000000000000000000000000000000000000000027effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff19161415156105755760009350610587565b8080600101915050610466565b600193505b50505092915050565b600060608060008060008060006020604051908101604052806000815250965060206040519081016040528060008152509550600094506105d08a610a9f565b809850819750829950505050600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166359a48b656040805190810160405280600981526020017f745f6163636f756e7400000000000000000000000000000000000000000000008152506040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016106889190614128565b602060405180830381600087803b1580156106a257600080fd5b505af11580156106b6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506106da9190810190613b0c565b93508373ffffffffffffffffffffffffffffffffffffffff16635887ab246040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b15801561074057600080fd5b505af1158015610754573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506107789190810190613ae3565b92508273ffffffffffffffffffffffffffffffffffffffff1663def426988a87036040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016107d1919061431f565b600060405180830381600087803b1580156107eb57600080fd5b505af11580156107ff573d6000803e3d6000fd5b505050508373ffffffffffffffffffffffffffffffffffffffff1663c74f8caf6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b15801561086757600080fd5b505af115801561087b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061089f9190810190613a91565b91508173ffffffffffffffffffffffffffffffffffffffff1663ae763db56040518163ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016108f490614277565b600060405180830381600087803b15801561090e57600080fd5b505af1158015610922573d6000803e3d6000fd5b505050508173ffffffffffffffffffffffffffffffffffffffff1663ae763db58b6040518263ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040161097b91906142ca565b600060405180830381600087803b15801561099557600080fd5b505af11580156109a9573d6000803e3d6000fd5b505050508373ffffffffffffffffffffffffffffffffffffffff1663664b37d684846040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401610a0492919061423b565b602060405180830381600087803b158015610a1e57600080fd5b505af1158015610a32573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250610a569190810190613b35565b90507fd72ab475a08df05fbd4f7f8cb4db1ad9dbdc26f54437fa6794acd97357779d2a81604051610a87919061407c565b60405180910390a18097505050505050505092915050565b606060006060600080600060608060606000806060600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166359a48b656040805190810160405280600981526020017f745f6163636f756e7400000000000000000000000000000000000000000000008152506040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401610b609190614128565b602060405180830381600087803b158015610b7a57600080fd5b505af1158015610b8e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250610bb29190810190613b0c565b98508873ffffffffffffffffffffffffffffffffffffffff1663c74f8caf6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b158015610c1857600080fd5b505af1158015610c2c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250610c509190810190613a91565b97508873ffffffffffffffffffffffffffffffffffffffff1663d8ac5957896040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401610ca791906141df565b602060405180830381600087803b1580","15610cc157600080fd5b505af1158015610cd5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250610cf99190810190613aba565b96508673ffffffffffffffffffffffffffffffffffffffff1663d3e9af5a6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b158015610d5f57600080fd5b505af1158015610d73573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250610d979190810190613b35565b604051908082528060200260200182016040528015610dca57816020015b6060815260200190600190039081610db55790505b5095508673ffffffffffffffffffffffffffffffffffffffff1663d3e9af5a6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b158015610e3157600080fd5b505af1158015610e45573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250610e699190810190613b35565b604051908082528060200260200182016040528015610e975781602001602082028038833980820191505090505b5094508673ffffffffffffffffffffffffffffffffffffffff1663d3e9af5a6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b158015610efe57600080fd5b505af1158015610f12573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250610f369190810190613b35565b604051908082528060200260200182016040528015610f6957816020015b6060815260200190600190039081610f545790505b5093507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff9250610fcd6040805190810160405280600781526020017f6163636f756e74000000000000000000000000000000000000000000000000008152506130ce565b809650819750829850505050600091505b8673ffffffffffffffffffffffffffffffffffffffff1663d3e9af5a6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b15801561104257600080fd5b505af1158015611056573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061107a9190810190613b35565b82121561110e57838281518110151561108f57fe5b9060200190602002015190506110a5818e610440565b156111035785828151811015156110b857fe5b9060200190602002015185838151811015156110d057fe5b9060200190602002015185848151811015156110e857fe5b906020019060200201518292508090509b509b509b50611183565b816001019150610fde565b826040805190810160405280600281526020017f2d31000000000000000000000000000000000000000000000000000000000000815250906040805190810160405280600281526020017f2d310000000000000000000000000000000000000000000000000000000000008152509b509b509b505b5050505050505050509193909250565b6111d16040805190810160405280601e81526020017f7472616e7366657228737472696e672c737472696e672c696e74323536290000815250610372565b61120f6040805190810160405280601781526020017f726567697374657228737472696e672c696e7432353629000000000000000000815250610372565b61124d6040805190810160405280601581526020017f75706461746528737472696e672c696e74323536290000000000000000000000815250610372565b61128b6040805190810160405280601881526020017f41646475706461746528737472696e672c696e74323536290000000000000000815250610372565b6112c96040805190810160405280601a81526020017f4d696e757375706461746528737472696e672c696e7432353629000000000000815250610372565b6113076040805190810160405280600e81526020017f72656d6f766528737472696e6729000000000000000000000000000000000000815250610372565b565b600080600080600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166359a48b656040805190810160405280600981526020017f745f6163636f756e7400000000000000000000000000000000000000000000008152506040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016113bb9190614128565b602060405180830381600087803b1580156113d557600080fd5b505af11580156113e9573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061140d9190810190613b0c565b92508273ffffffffffffffffffffffffffffffffffffffff1663c74f8caf6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b15801561147357600080fd5b505af1158015611487573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506114ab9190810190613a91565b91508173ffffffffffffffffffffffffffffffffffffffff1663ae763db56040518163ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040161150090614277565b600060405180830381600087803b15801561151a57600080fd5b505af115801561152e573d6000803e3d6000fd5b505050508173ffffffffffffffffffffffffffffffffffffffff1663ae763db5866040518263ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040161158791906142ca565b600060405180830381600087803b1580156115a157600080fd5b505af11580156115b5573d6000803e3d6000fd5b505050508273ffffffffffffffffffffffffffffffffffffffff166309ff42f0836040518263ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040161160e91906141df565b602060405180830381600087803b15801561162857600080fd5b505af115801561163c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506116609190810190613b35565b90507fe7769b56c2afa8e40381956f76b91d9ec19c34c0a81791702fdcae68e35a727181604051611691919061407c565b60405180910390a1809350505050919050565b6116e46040805190810160405280601e81526020017f7472616e7366657228737472696e672c737472696e672c696e7432353629000081525060026121fb565b6117246040805190810160405280601781526020017f726567697374657228737472696e672c696e743235362900000000000000000081525060016121fb565b6117646040805190810160405280601581526020017f75706461746528737472696e672c696e7432353629000000000000000000000081525060016121fb565b6117a46040805190810160405280601881526020017f41646475706461746528737472696e672c696e7432353629000000000000000081525060016121fb565b6117e46040805190810160405280601a81526020017f4d696e757375706461746528737472696e672c696e743235362900000000000081525060016121fb565b6118246040805190810160405280600e81526020017f72656d6f766528737472696e672900000000000000000000000000000000000081525060016121fb565b565b6000806000806000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166359a48b656040805190810160405280600981526020017f745f6163636f756e7400000000000000000000000000000000000000000000008152506040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016118da9190614128565b602060405180830381600087803b1580156118f457600080fd5b505af1158015611908573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061192c9190810190613b0c565b93508373ffffffffffffffffffffffffffffffffffffffff16635887ab246040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b15801561199257600080fd5b505af11580156119a6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506119ca9190810190613ae3565b92508273ffffffffffffffffffffffffffffffffffffffff1663def42698876040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401611a21919061431f565b600060405180830381600087803b158015611a3b57600080fd5b505af1158015611a4f573d6000803e3d6000fd5b505050508373ffffffffffffffffffffffffffffffffffffffff1663c74f8caf6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b158015611ab757600080fd5b505af1158015611acb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250611aef9190810190613a91565b91508173ffffffffffffffffffffffffffffffffffffffff1663ae763db56040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401611b4490614277565b600060405180830381600087803b158015611b5e57600080fd5b505af1158015611b72573d6000803e3d6000fd5b505050508173ffffffffffffffffffffffffffffffffffffffff1663ae763db5886040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401611bcb91906142ca565b600060405180830381600087803b158015611be557600080fd5b505af1158015611bf9573d6000803e3d6000fd5b505050508373ffffffffffffffffffffffffffffffffffffffff1663664b37d684846040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401611c5492919061423b565b602060405180830381600087803b158015611c6e57600080fd5b505af1158015611c82573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250611ca69190810190613b35565b90507fd72ab475a08df05fbd4f7f8cb4db","1ad9dbdc26f54437fa6794acd97357779d2a81604051611cd7919061407c565b60405180910390a18094505050505092915050565b60006060806000806000806000602060405190810160405280600081525096506020604051908101604052806000815250955060009450611d2c8a610a9f565b809850819750829950505050600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166359a48b656040805190810160405280600981526020017f745f6163636f756e7400000000000000000000000000000000000000000000008152506040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401611de49190614128565b602060405180830381600087803b158015611dfe57600080fd5b505af1158015611e12573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250611e369190810190613b0c565b93508373ffffffffffffffffffffffffffffffffffffffff16635887ab246040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b158015611e9c57600080fd5b505af1158015611eb0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250611ed49190810190613ae3565b92508273ffffffffffffffffffffffffffffffffffffffff1663def42698868b016040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401611f2d919061431f565b600060405180830381600087803b158015611f4757600080fd5b505af1158015611f5b573d6000803e3d6000fd5b505050508373ffffffffffffffffffffffffffffffffffffffff1663c74f8caf6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b158015611fc357600080fd5b505af1158015611fd7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250611ffb9190810190613a91565b91508173ffffffffffffffffffffffffffffffffffffffff1663ae763db56040518163ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040161205090614277565b600060405180830381600087803b15801561206a57600080fd5b505af115801561207e573d6000803e3d6000fd5b505050508173ffffffffffffffffffffffffffffffffffffffff1663ae763db58b6040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016120d791906142ca565b600060405180830381600087803b1580156120f157600080fd5b505af1158015612105573d6000803e3d6000fd5b505050508373ffffffffffffffffffffffffffffffffffffffff1663664b37d684846040518363ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040161216092919061423b565b602060405180830381600087803b15801561217a57600080fd5b505af115801561218e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506121b29190810190613b35565b90507fd72ab475a08df05fbd4f7f8cb4db1ad9dbdc26f54437fa6794acd97357779d2a816040516121e3919061407c565b60405180910390a18097505050505050505092915050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663dc536a623084846040518463ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040161227593929190613fd7565b602060405180830381600087803b15801561228f57600080fd5b505af11580156122a3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506122c79190810190613b35565b505050565b60006060806000806000806000602060405190810160405280600081525096506020604051908101604052806000815250955060009450600093506123108a610a9f565b80985081965082995050505061235b876040805190810160405280600281526020017f2d31000000000000000000000000000000000000000000000000000000000000815250610440565b1561277557600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166359a48b656040805190810160405280600981526020017f745f6163636f756e7400000000000000000000000000000000000000000000008152506040518263ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040161240c9190614128565b602060405180830381600087803b15801561242657600080fd5b505af115801561243a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061245e9190810190613b0c565b92508273ffffffffffffffffffffffffffffffffffffffff16635887ab246040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b1580156124c457600080fd5b505af11580156124d8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506124fc9190810190613ae3565b91508173ffffffffffffffffffffffffffffffffffffffff16631a391cb46040518163ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040161255190614277565b600060405180830381600087803b15801561256b57600080fd5b505af115801561257f573d6000803e3d6000fd5b505050508173ffffffffffffffffffffffffffffffffffffffff16631a391cb48b6040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016125d891906142ca565b600060405180830381600087803b1580156125f257600080fd5b505af1158015612606573d6000803e3d6000fd5b505050508173ffffffffffffffffffffffffffffffffffffffff1663def426988a6040518263ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040161265f919061431f565b600060405180830381600087803b15801561267957600080fd5b505af115801561268d573d6000803e3d6000fd5b505050508273ffffffffffffffffffffffffffffffffffffffff16634c6f30c0836040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016126e6919061420d565b602060405180830381600087803b15801561270057600080fd5b505af1158015612714573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506127389190810190613b35565b9050600181141561274c5760009450612770565b7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe94505b612799565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff94505b7f5cfaad425f027a82d4b8b23c1b6bcd52ffb72a443651e5bc7006623c0745a5b8858b8b6040516127cc93929190614097565b60405180910390a18497505050505050505092915050565b60006060806000806000806000806000602060405190810160405280600081525098506020604051908101604052806000815250975060009650600095506000945061282f8d610a9f565b809a50819850829b5050505061287a896040805190810160405280600281526020017f2d31000000000000000000000000000000000000000000000000000000000000815250610440565b156128e7577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff96507f5fb7da862494e68d68b5151b693fe72c06321133bcb29d454612900e71bfc7cf878e8e8e6040516128d794939291906140d5565b60405180910390a18699506130be565b6128f08c610a9f565b809a50819750829b5050505061293b896040805190810160405280600281526020017f2d31000000000000000000000000000000000000000000000000000000000000815250610440565b156129a8577ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe96507f5fb7da862494e68d68b5151b693fe72c06321133bcb29d454612900e71bfc7cf878e8e8e60405161299894939291906140d5565b60405180910390a18699506130be565b8a861215612a18577ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffd96507f5fb7da862494e68d68b5151b693fe72c06321133bcb29d454612900e71bfc7cf878e8e8e604051612a0894939291906140d5565b60405180910390a18699506130be565b848b86011215612a8a577ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc96507f5fb7da862494e68d68b5151b693fe72c06321133bcb29d454612900e71bfc7cf878e8e8e604051612a7a94939291906140d5565b60405180910390a18699506130be565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166359a48b656040805190810160405280600981526020017f745f6163636f756e7400000000000000000000000000000000000000000000008152506040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401612b369190614128565b602060405180830381600087803b158015612b5057600080fd5b505af1158015612b64573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250612b889190810190613b0c565b93508373ffffffffffffffffffffffffffffffffffffffff16635887ab246040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b158015612bee57600080fd5b505af1158015612c02573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250612c269190810190613ae3565b92508273ffffffffffffffffffffffffffffffffffffffff16631a391cb46040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401612c7b90614277565b600060405180830381600087803b158015612c9557600080fd5b505af1158015612ca9573d6000803e3d6000fd5b505050508273ffffffffffffffff","","84013567ffffffffffffffff811115613ccf57600080fd5b613cdb868287016139d1565b935050602084013567ffffffffffffffff811115613cf857600080fd5b613d04868287016139d1565b9250506040613d15868287016139a9565b9150509250925092565b60008060408385031215613d3257600080fd5b600083013567ffffffffffffffff811115613d4c57600080fd5b613d58858286016139d1565b9250506020613d6985828601613a7d565b9150509250929050565b613d7c81614406565b82525050565b6000613d8d826143c0565b808452602084019350613d9f836143a6565b60005b82811015613dd157613db5868351613e78565b613dbe826143ec565b9150602086019550600181019050613da2565b50849250505092915050565b6000613de8826143cb565b80845260208401935083602082028501613e01856143b3565b60005b84811015613e3a578383038852613e1c838351613ebd565b9250613e27826143f9565b9150602088019750600181019050613e04565b508196508694505050505092915050565b613e5481614426565b82525050565b613e63816144a2565b82525050565b613e72816144b4565b82525050565b613e8181614432565b82525050565b6000613e92826143e1565b808452613ea68160208601602086016144d5565b613eaf81614508565b602085010191505092915050565b6000613ec8826143d6565b808452613edc8160208601602086016144d5565b613ee581614508565b602085010191505092915050565b6000600782527f6163636f756e74000000000000000000000000000000000000000000000000006020830152604082019050919050565b6000600c82527f6163636f756e745f6e616d6500000000000000000000000000000000000000006020830152604082019050919050565b6000600d82527f6163636f756e745f6173736574000000000000000000000000000000000000006020830152604082019050919050565b613fa18161443c565b82525050565b6000604082019050613fbc6000830185613d73565b8181036020830152613fce8184613e87565b90509392505050565b6000606082019050613fec6000830186613d73565b8181036020830152613ffe8185613e87565b905061400d6040830184613f98565b949350505050565b6000606082019050818103600083015261402f8186613ddd565b905081810360208301526140438185613d82565b905081810360408301526140578184613ddd565b9050949350505050565b60006020820190506140766000830184613e4b565b92915050565b60006020820190506140916000830184613e78565b92915050565b60006060820190506140ac6000830186613e78565b81810360208301526140be8185613e87565b90506140cd6040830184613e78565b949350505050565b60006080820190506140ea6000830187613e78565b81810360208301526140fc8186613e87565b905081810360408301526141108185613e87565b905061411f6060830184613e78565b95945050505050565b600060208201905081810360008301526141428184613ebd565b905092915050565b600060408201905081810360008301526141648185613e87565b90506141736020830184613e5a565b9392505050565b600060608201905081810360008301526141948186613e87565b90506141a36020830185613e78565b81810360408301526141b58184613e87565b9050949350505050565b600060208201905081810360008301526141d881613ef3565b9050919050565b600060408201905081810360008301526141f881613ef3565b90506142076020830184613e5a565b92915050565b6000604082019050818103600083015261422681613ef3565b90506142356020830184613e69565b92915050565b6000606082019050818103600083015261425481613ef3565b90506142636020830185613e69565b6142706040830184613e5a565b9392505050565b6000604082019050818103600083015261429081613ef3565b905081810360208301526142a381613ef3565b9050919050565b600060208201905081810360008301526142c381613f2a565b9050919050565b600060408201905081810360008301526142e381613f2a565b905081810360208301526142f78184613e87565b905092915050565b6000602082019050818103600083015261431881613f61565b9050919050565b6000604082019050818103600083015261433881613f61565b90506143476020830184613e78565b92915050565b6000604051905081810181811067ffffffffffffffff8211171561437057600080fd5b8060405250919050565b600067ffffffffffffffff82111561439157600080fd5b601f19601f8301169050602081019050919050565b6000602082019050919050565b6000602082019050919050565b600081519050919050565b600081519050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b6000602082019050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60008115159050919050565b6000819050919050565b6000819050919050565b600061445182614406565b9050919050565b600061446382614406565b9050919050565b600061447582614406565b9050919050565b600061448782614406565b9050919050565b6000819050919050565b6000819050919050565b60006144ad82614406565b9050919050565b60006144bf82614406565b9050919050565b82818337600083830152505050565b60005b838110156144f35780820151818401526020810190506144d8565b83811115614502576000848401525b50505050565b6000601f19601f83011690509190505600a265627a7a723058205f001857ab302ad4d79c822b61bd5b5c0898d0476028982ac2857735349b62ec6c6578706572696d656e74616cf50037"};

    public static final String SM_BINARY = org.fisco.bcos.sdk.utils.StringUtils.joinAll("", SM_BINARY_ARRAY);

    public static final String[] ABI_ARRAY = {"[{\"constant\":false,\"inputs\":[{\"name\":\"from_account\",\"type\":\"string\"},{\"name\":\"to_account\",\"type\":\"string\"},{\"name\":\"amount\",\"type\":\"int256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"int256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"functionName\",\"type\":\"string\"},{\"name\":\"criticalSize\",\"type\":\"uint256\"}],\"name\":\"registerParallelFunction\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"a\",\"type\":\"string\"},{\"name\":\"b\",\"type\":\"string\"}],\"name\":\"isEqual\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"account_name\",\"type\":\"string\"},{\"name\":\"account_asset\",\"type\":\"int256\"}],\"name\":\"Minusupdate\",\"outputs\":[{\"name\":\"\",\"type\":\"int256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"account\",\"type\":\"string\"}],\"name\":\"selectAll\",\"outputs\":[{\"name\":\"\",\"type\":\"string[]\"},{\"name\":\"\",\"type\":\"int256[]\"},{\"name\":\"\",\"type\":\"string[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"account_name\",\"type\":\"string\"},{\"name\":\"account_asset\",\"type\":\"int256\"}],\"name\":\"Addupdate\",\"outputs\":[{\"name\":\"\",\"type\":\"int256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"functionName\",\"type\":\"string\"}],\"name\":\"unregisterParallelFunction\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"account_name\",\"type\":\"string\"}],\"name\":\"remove\",\"outputs\":[{\"name\":\"\",\"type\":\"int256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"account_name\",\"type\":\"string\"},{\"name\":\"account_asset\",\"type\":\"int256\"}],\"name\":\"update\",\"outputs\":[{\"name\":\"\",\"type\":\"int256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"enableParallel\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"disableParallel\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"account_name\",\"type\":\"string\"},{\"name\":\"asset_value\",\"type\":\"int256\"}],\"name\":\"register\",\"outputs\":[{\"name\":\"\",\"type\":\"int256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"account_name\",\"type\":\"string\"}],\"name\":\"select\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"},{\"name\":\"\",\"type\":\"int256\"},{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"ret\",\"type\":\"int256\"},{\"indexed\":false,\"name\":\"account_name\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"asset_value\",\"type\":\"int256\"}],\"name\":\"RegisterEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"ret\",\"type\":\"int256\"},{\"indexed\":false,\"name\":\"from_account\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"to_account\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"int256\"}],\"name\":\"TransferEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"count\",\"type\":\"int256\"}],\"name\":\"UpdateResult\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"count\",\"type\":\"int256\"}],\"name\":\"RemoveResult\",\"type\":\"event\"}]"};

    public static final String ABI = org.fisco.bcos.sdk.utils.StringUtils.joinAll("", ABI_ARRAY);

    public static final String FUNC_TRANSFER = "transfer";

    public static final String FUNC_REGISTERPARALLELFUNCTION = "registerParallelFunction";

    public static final String FUNC_ISEQUAL = "isEqual";

    public static final String FUNC_MINUSUPDATE = "Minusupdate";

    public static final String FUNC_SELECTALL = "selectAll";

    public static final String FUNC_ADDUPDATE = "Addupdate";

    public static final String FUNC_UNREGISTERPARALLELFUNCTION = "unregisterParallelFunction";

    public static final String FUNC_REMOVE = "remove";

    public static final String FUNC_UPDATE = "update";

    public static final String FUNC_ENABLEPARALLEL = "enableParallel";

    public static final String FUNC_DISABLEPARALLEL = "disableParallel";

    public static final String FUNC_REGISTER = "register";

    public static final String FUNC_SELECT = "select";

    public static final Event REGISTEREVENT_EVENT = new Event("RegisterEvent", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Int256>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Int256>() {}));
    ;

    public static final Event TRANSFEREVENT_EVENT = new Event("TransferEvent", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Int256>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Int256>() {}));
    ;

    public static final Event UPDATERESULT_EVENT = new Event("UpdateResult", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Int256>() {}));
    ;

    public static final Event REMOVERESULT_EVENT = new Event("RemoveResult", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Int256>() {}));
    ;

    protected Asset(String contractAddress, Client client, CryptoKeyPair credential) {
        super(getBinary(client.getCryptoSuite()), contractAddress, client, credential);
    }

    public static String getBinary(CryptoSuite cryptoSuite) {
        return (cryptoSuite.getCryptoTypeConfig() == CryptoType.ECDSA_TYPE ? BINARY : SM_BINARY);
    }

    public TransactionReceipt transfer(String from_account, String to_account, BigInteger amount) {
        final Function function = new Function(
                FUNC_TRANSFER, 
                Arrays.<Type>asList(new Utf8String(from_account),
                new Utf8String(to_account),
                new Int256(amount)),
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] transfer(String from_account, String to_account, BigInteger amount, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_TRANSFER, 
                Arrays.<Type>asList(new Utf8String(from_account),
                new Utf8String(to_account),
                new Int256(amount)),
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForTransfer(String from_account, String to_account, BigInteger amount) {
        final Function function = new Function(
                FUNC_TRANSFER, 
                Arrays.<Type>asList(new Utf8String(from_account),
                new Utf8String(to_account),
                new Int256(amount)),
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple3<String, String, BigInteger> getTransferInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_TRANSFER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Int256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple3<String, String, BigInteger>(

                (String) results.get(0).getValue(), 
                (String) results.get(1).getValue(), 
                (BigInteger) results.get(2).getValue()
                );
    }

    public Tuple1<BigInteger> getTransferOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_TRANSFER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Int256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<BigInteger>(

                (BigInteger) results.get(0).getValue()
                );
    }

    public TransactionReceipt registerParallelFunction(String functionName, BigInteger criticalSize) {
        final Function function = new Function(
                FUNC_REGISTERPARALLELFUNCTION, 
                Arrays.<Type>asList(new Utf8String(functionName),
                new Uint256(criticalSize)),
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] registerParallelFunction(String functionName, BigInteger criticalSize, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_REGISTERPARALLELFUNCTION, 
                Arrays.<Type>asList(new Utf8String(functionName),
                new Uint256(criticalSize)),
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForRegisterParallelFunction(String functionName, BigInteger criticalSize) {
        final Function function = new Function(
                FUNC_REGISTERPARALLELFUNCTION, 
                Arrays.<Type>asList(new Utf8String(functionName),
                new Uint256(criticalSize)),
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple2<String, BigInteger> getRegisterParallelFunctionInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_REGISTERPARALLELFUNCTION, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Uint256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple2<String, BigInteger>(

                (String) results.get(0).getValue(), 
                (BigInteger) results.get(1).getValue()
                );
    }

    public Boolean isEqual(String a, String b) throws ContractException {
        final Function function = new Function(FUNC_ISEQUAL, 
                Arrays.<Type>asList(new Utf8String(a),
                new Utf8String(b)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeCallWithSingleValueReturn(function, Boolean.class);
    }

    public TransactionReceipt Minusupdate(String account_name, BigInteger account_asset) {
        final Function function = new Function(
                FUNC_MINUSUPDATE, 
                Arrays.<Type>asList(new Utf8String(account_name),
                new Int256(account_asset)),
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] Minusupdate(String account_name, BigInteger account_asset, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_MINUSUPDATE, 
                Arrays.<Type>asList(new Utf8String(account_name),
                new Int256(account_asset)),
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForMinusupdate(String account_name, BigInteger account_asset) {
        final Function function = new Function(
                FUNC_MINUSUPDATE, 
                Arrays.<Type>asList(new Utf8String(account_name),
                new Int256(account_asset)),
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple2<String, BigInteger> getMinusupdateInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_MINUSUPDATE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Int256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple2<String, BigInteger>(

                (String) results.get(0).getValue(), 
                (BigInteger) results.get(1).getValue()
                );
    }

    public Tuple1<BigInteger> getMinusupdateOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_MINUSUPDATE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Int256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<BigInteger>(

                (BigInteger) results.get(0).getValue()
                );
    }

    public Tuple3<List<String>, List<BigInteger>, List<String>> selectAll(String account) throws ContractException {
        final Function function = new Function(FUNC_SELECTALL, 
                Arrays.<Type>asList(new Utf8String(account)),
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Utf8String>>() {}, new TypeReference<DynamicArray<Int256>>() {}, new TypeReference<DynamicArray<Utf8String>>() {}));
        List<Type> results = executeCallWithMultipleValueReturn(function);
        return new Tuple3<List<String>, List<BigInteger>, List<String>>(
                convertToNative((List<Utf8String>) results.get(0).getValue()), 
                convertToNative((List<Int256>) results.get(1).getValue()), 
                convertToNative((List<Utf8String>) results.get(2).getValue()));
    }

    public TransactionReceipt Addupdate(String account_name, BigInteger account_asset) {
        final Function function = new Function(
                FUNC_ADDUPDATE, 
                Arrays.<Type>asList(new Utf8String(account_name),
                new Int256(account_asset)),
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] Addupdate(String account_name, BigInteger account_asset, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_ADDUPDATE, 
                Arrays.<Type>asList(new Utf8String(account_name),
                new Int256(account_asset)),
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForAddupdate(String account_name, BigInteger account_asset) {
        final Function function = new Function(
                FUNC_ADDUPDATE, 
                Arrays.<Type>asList(new Utf8String(account_name),
                new Int256(account_asset)),
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple2<String, BigInteger> getAddupdateInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_ADDUPDATE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Int256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple2<String, BigInteger>(

                (String) results.get(0).getValue(), 
                (BigInteger) results.get(1).getValue()
                );
    }

    public Tuple1<BigInteger> getAddupdateOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_ADDUPDATE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Int256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<BigInteger>(

                (BigInteger) results.get(0).getValue()
                );
    }

    public TransactionReceipt unregisterParallelFunction(String functionName) {
        final Function function = new Function(
                FUNC_UNREGISTERPARALLELFUNCTION, 
                Arrays.<Type>asList(new Utf8String(functionName)),
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] unregisterParallelFunction(String functionName, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_UNREGISTERPARALLELFUNCTION, 
                Arrays.<Type>asList(new Utf8String(functionName)),
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForUnregisterParallelFunction(String functionName) {
        final Function function = new Function(
                FUNC_UNREGISTERPARALLELFUNCTION, 
                Arrays.<Type>asList(new Utf8String(functionName)),
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple1<String> getUnregisterParallelFunctionInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_UNREGISTERPARALLELFUNCTION, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<String>(

                (String) results.get(0).getValue()
                );
    }

    public TransactionReceipt remove(String account_name) {
        final Function function = new Function(
                FUNC_REMOVE, 
                Arrays.<Type>asList(new Utf8String(account_name)),
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] remove(String account_name, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_REMOVE, 
                Arrays.<Type>asList(new Utf8String(account_name)),
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForRemove(String account_name) {
        final Function function = new Function(
                FUNC_REMOVE, 
                Arrays.<Type>asList(new Utf8String(account_name)),
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple1<String> getRemoveInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_REMOVE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<String>(

                (String) results.get(0).getValue()
                );
    }

    public Tuple1<BigInteger> getRemoveOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_REMOVE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Int256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<BigInteger>(

                (BigInteger) results.get(0).getValue()
                );
    }

    public TransactionReceipt update(String account_name, BigInteger account_asset) {
        final Function function = new Function(
                FUNC_UPDATE, 
                Arrays.<Type>asList(new Utf8String(account_name),
                new Int256(account_asset)),
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] update(String account_name, BigInteger account_asset, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_UPDATE, 
                Arrays.<Type>asList(new Utf8String(account_name),
                new Int256(account_asset)),
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForUpdate(String account_name, BigInteger account_asset) {
        final Function function = new Function(
                FUNC_UPDATE, 
                Arrays.<Type>asList(new Utf8String(account_name),
                new Int256(account_asset)),
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple2<String, BigInteger> getUpdateInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_UPDATE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Int256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple2<String, BigInteger>(

                (String) results.get(0).getValue(), 
                (BigInteger) results.get(1).getValue()
                );
    }

    public Tuple1<BigInteger> getUpdateOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_UPDATE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Int256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<BigInteger>(

                (BigInteger) results.get(0).getValue()
                );
    }

    public TransactionReceipt enableParallel() {
        final Function function = new Function(
                FUNC_ENABLEPARALLEL, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] enableParallel(TransactionCallback callback) {
        final Function function = new Function(
                FUNC_ENABLEPARALLEL, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForEnableParallel() {
        final Function function = new Function(
                FUNC_ENABLEPARALLEL, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public TransactionReceipt disableParallel() {
        final Function function = new Function(
                FUNC_DISABLEPARALLEL, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] disableParallel(TransactionCallback callback) {
        final Function function = new Function(
                FUNC_DISABLEPARALLEL, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForDisableParallel() {
        final Function function = new Function(
                FUNC_DISABLEPARALLEL, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public TransactionReceipt register(String account_name, BigInteger asset_value) {
        final Function function = new Function(
                FUNC_REGISTER, 
                Arrays.<Type>asList(new Utf8String(account_name),
                new Int256(asset_value)),
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] register(String account_name, BigInteger asset_value, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_REGISTER, 
                Arrays.<Type>asList(new Utf8String(account_name),
                new Int256(asset_value)),
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForRegister(String account_name, BigInteger asset_value) {
        final Function function = new Function(
                FUNC_REGISTER, 
                Arrays.<Type>asList(new Utf8String(account_name),
                new Int256(asset_value)),
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple2<String, BigInteger> getRegisterInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_REGISTER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Int256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple2<String, BigInteger>(

                (String) results.get(0).getValue(), 
                (BigInteger) results.get(1).getValue()
                );
    }

    public Tuple1<BigInteger> getRegisterOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_REGISTER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Int256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<BigInteger>(

                (BigInteger) results.get(0).getValue()
                );
    }

    public Tuple3<String, BigInteger, String> select(String account_name) throws ContractException {
        final Function function = new Function(FUNC_SELECT, 
                Arrays.<Type>asList(new Utf8String(account_name)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Int256>() {}, new TypeReference<Utf8String>() {}));
        List<Type> results = executeCallWithMultipleValueReturn(function);
        return new Tuple3<String, BigInteger, String>(
                (String) results.get(0).getValue(), 
                (BigInteger) results.get(1).getValue(), 
                (String) results.get(2).getValue());
    }

    public List<RegisterEventEventResponse> getRegisterEventEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(REGISTEREVENT_EVENT, transactionReceipt);
        ArrayList<RegisterEventEventResponse> responses = new ArrayList<RegisterEventEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            RegisterEventEventResponse typedResponse = new RegisterEventEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.ret = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.account_name = (String) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.asset_value = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public void subscribeRegisterEventEvent(String fromBlock, String toBlock, List<String> otherTopics, EventCallback callback) {
        String topic0 = eventEncoder.encode(REGISTEREVENT_EVENT);
        subscribeEvent(ABI,BINARY,topic0,fromBlock,toBlock,otherTopics,callback);
    }

    public void subscribeRegisterEventEvent(EventCallback callback) {
        String topic0 = eventEncoder.encode(REGISTEREVENT_EVENT);
        subscribeEvent(ABI,BINARY,topic0,callback);
    }

    public List<TransferEventEventResponse> getTransferEventEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(TRANSFEREVENT_EVENT, transactionReceipt);
        ArrayList<TransferEventEventResponse> responses = new ArrayList<TransferEventEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            TransferEventEventResponse typedResponse = new TransferEventEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.ret = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.from_account = (String) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.to_account = (String) eventValues.getNonIndexedValues().get(2).getValue();
            typedResponse.amount = (BigInteger) eventValues.getNonIndexedValues().get(3).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public void subscribeTransferEventEvent(String fromBlock, String toBlock, List<String> otherTopics, EventCallback callback) {
        String topic0 = eventEncoder.encode(TRANSFEREVENT_EVENT);
        subscribeEvent(ABI,BINARY,topic0,fromBlock,toBlock,otherTopics,callback);
    }

    public void subscribeTransferEventEvent(EventCallback callback) {
        String topic0 = eventEncoder.encode(TRANSFEREVENT_EVENT);
        subscribeEvent(ABI,BINARY,topic0,callback);
    }

    public List<UpdateResultEventResponse> getUpdateResultEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(UPDATERESULT_EVENT, transactionReceipt);
        ArrayList<UpdateResultEventResponse> responses = new ArrayList<UpdateResultEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            UpdateResultEventResponse typedResponse = new UpdateResultEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.count = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public void subscribeUpdateResultEvent(String fromBlock, String toBlock, List<String> otherTopics, EventCallback callback) {
        String topic0 = eventEncoder.encode(UPDATERESULT_EVENT);
        subscribeEvent(ABI,BINARY,topic0,fromBlock,toBlock,otherTopics,callback);
    }

    public void subscribeUpdateResultEvent(EventCallback callback) {
        String topic0 = eventEncoder.encode(UPDATERESULT_EVENT);
        subscribeEvent(ABI,BINARY,topic0,callback);
    }

    public List<RemoveResultEventResponse> getRemoveResultEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(REMOVERESULT_EVENT, transactionReceipt);
        ArrayList<RemoveResultEventResponse> responses = new ArrayList<RemoveResultEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            RemoveResultEventResponse typedResponse = new RemoveResultEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.count = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public void subscribeRemoveResultEvent(String fromBlock, String toBlock, List<String> otherTopics, EventCallback callback) {
        String topic0 = eventEncoder.encode(REMOVERESULT_EVENT);
        subscribeEvent(ABI,BINARY,topic0,fromBlock,toBlock,otherTopics,callback);
    }

    public void subscribeRemoveResultEvent(EventCallback callback) {
        String topic0 = eventEncoder.encode(REMOVERESULT_EVENT);
        subscribeEvent(ABI,BINARY,topic0,callback);
    }

    public static Asset load(String contractAddress, Client client, CryptoKeyPair credential) {
        return new Asset(contractAddress, client, credential);
    }

    public static Asset deploy(Client client, CryptoKeyPair credential) throws ContractException {
        return deploy(Asset.class, client, credential, getBinary(client.getCryptoSuite()), "");
    }

    public static class RegisterEventEventResponse {
        public TransactionReceipt.Logs log;

        public BigInteger ret;

        public String account_name;

        public BigInteger asset_value;
    }

    public static class TransferEventEventResponse {
        public TransactionReceipt.Logs log;

        public BigInteger ret;

        public String from_account;

        public String to_account;

        public BigInteger amount;
    }

    public static class UpdateResultEventResponse {
        public TransactionReceipt.Logs log;

        public BigInteger count;
    }

    public static class RemoveResultEventResponse {
        public TransactionReceipt.Logs log;

        public BigInteger count;
    }
}
