package org.prepay.prepay.raw;

import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import org.fisco.bcos.sdk.abi.FunctionReturnDecoder;
import org.fisco.bcos.sdk.abi.TypeReference;
import org.fisco.bcos.sdk.abi.datatypes.DynamicArray;
import org.fisco.bcos.sdk.abi.datatypes.Event;
import org.fisco.bcos.sdk.abi.datatypes.Function;
import org.fisco.bcos.sdk.abi.datatypes.Type;
import org.fisco.bcos.sdk.abi.datatypes.Utf8String;
import org.fisco.bcos.sdk.abi.datatypes.generated.Int256;
import org.fisco.bcos.sdk.abi.datatypes.generated.Uint256;
import org.fisco.bcos.sdk.abi.datatypes.generated.tuples.generated.Tuple1;
import org.fisco.bcos.sdk.abi.datatypes.generated.tuples.generated.Tuple2;
import org.fisco.bcos.sdk.abi.datatypes.generated.tuples.generated.Tuple6;
import org.fisco.bcos.sdk.client.Client;
import org.fisco.bcos.sdk.contract.Contract;
import org.fisco.bcos.sdk.crypto.CryptoSuite;
import org.fisco.bcos.sdk.crypto.keypair.CryptoKeyPair;
import org.fisco.bcos.sdk.eventsub.EventCallback;
import org.fisco.bcos.sdk.model.CryptoType;
import org.fisco.bcos.sdk.model.TransactionReceipt;
import org.fisco.bcos.sdk.model.callback.TransactionCallback;
import org.fisco.bcos.sdk.transaction.model.exception.ContractException;

@SuppressWarnings("unchecked")
public class PrepaidCard extends Contract {
    public static final String[] BINARY_ARRAY = {"60806040526040805190810160405280600381526020017f636a720000000000000000000000000000000000000000000000000000000000815250600790805190602001906200005192919062000205565b50611001600860006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550348015620000a257600080fd5b5060006040805190810160405280600c81526020017f707265706169644361726433000000000000000000000000000000000000000081525060069080519060200190620000f292919062000205565b50600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166356004b6a60066040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016200016d919062000446565b602060405180830381600087803b1580156200018857600080fd5b505af11580156200019d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250620001c39190810190620002ca565b90507f6c1bcd858fe6f6d2c026038ec8d705ad1b72753706298f4bc77d30e961685b9581604051620001f6919062000429565b60405180910390a150620004ba565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106200024857805160ff191683800117855562000279565b8280016001018555821562000279579182015b82811115620002785782518255916020019190600101906200025b565b5b5090506200028891906200028c565b5090565b620002b191905b80821115620002ad57600081600090555060010162000293565b5090565b90565b6000620002c28251620004b0565b905092915050565b600060208284031215620002dd57600080fd5b6000620002ed84828501620002b4565b91505092915050565b6200030181620004a6565b82525050565b60008154600181166000811462000327576001811462000348576200038d565b607f600283041680865260ff1983166020870152604086019350506200038d565b60028204808652602086019550620003608562000494565b60005b82811015620003845781548189015260018201915060208101905062000363565b80880195505050505b505092915050565b6000603882527f6361726449442c636f6e73756d657249442c73686f7049442c62616c616e636560208301527f2c636f6e7472616374486173682c63726561746554696d6500000000000000006040830152606082019050919050565b6000600482527f736f7274000000000000000000000000000000000000000000000000000000006020830152604082019050919050565b6000602082019050620004406000830184620002f6565b92915050565b6000606082019050818103600083015262000462818462000307565b905081810360208301526200047781620003f2565b905081810360408301526200048c8162000395565b905092915050565b60008160005260206000209050919050565b6000819050919050565b6000819050919050565b61384480620004ca6000396000f300608060405260043610610078576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff1680630118565f1461007d5780630a33be62146100a85780632fa91cd0146100e55780637fc92bf914610122578063857cb0eb1461015f578063b3dade061461018f575b600080fd5b34801561008957600080fd5b506100926101d1565b60405161009f919061328b565b60405180910390f35b3480156100b457600080fd5b506100cf60048036036100ca9190810190612cee565b61026f565b6040516100dc9190613255565b60405180910390f35b3480156100f157600080fd5b5061010c60048036036101079190810190612c9a565b61084d565b6040516101199190613255565b60405180910390f35b34801561012e57600080fd5b5061014960048036036101449190810190612c18565b610eec565b6040516101569190613255565b60405180910390f35b34801561016b57600080fd5b50610174611222565b604051610186969594939291906131ca565b60405180910390f35b34801561019b57600080fd5b506101b660048036036101b19190810190612c18565b611f3e565b6040516101c8969594939291906132ad565b60405180910390f35b60068054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156102675780601f1061023c57610100808354040283529160200191610267565b820191906000526020600020905b81548152906001019060200180831161024a57829003601f168201915b505050505081565b600080600080600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663f23f63c960066040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016102ed9190613323565b602060405180830381600087803b15801561030757600080fd5b505af115801561031b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061033f9190810190612bc6565b92508273ffffffffffffffffffffffffffffffffffffffff166313db93466040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b1580156103a557600080fd5b505af11580156103b9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506103dd9190810190612b9d565b91508173ffffffffffffffffffffffffffffffffffffffff1663e942b51660076040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401610435919061357e565b600060405180830381600087803b15801561044f57600080fd5b505af1158015610463573d6000803e3d6000fd5b505050508173ffffffffffffffffffffffffffffffffffffffff1663e942b5168b6040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016104bc91906134fb565b600060405180830381600087803b1580156104d657600080fd5b505af11580156104ea573d6000803e3d6000fd5b505050508173ffffffffffffffffffffffffffffffffffffffff1663e942b5168a6040518263ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040161054391906134a6565b600060405180830381600087803b15801561055d57600080fd5b505af1158015610571573d6000803e3d6000fd5b505050508173ffffffffffffffffffffffffffffffffffffffff1663e942b516896040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016105ca9190613451565b600060405180830381600087803b1580156105e457600080fd5b505af11580156105f8573d6000803e3d6000fd5b505050508173ffffffffffffffffffffffffffffffffffffffff16632ef8ba74886040518263ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040161065191906135d3565b600060405180830381600087803b15801561066b57600080fd5b505af115801561067f573d6000803e3d6000fd5b505050508173ffffffffffffffffffffffffffffffffffffffff16632ef8ba74876040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016106d89190613550565b600060405180830381600087803b1580156106f257600080fd5b505af1158015610706573d6000803e3d6000fd5b505050508173ffffffffffffffffffffffffffffffffffffffff16638a42ebe9866040518263ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040161075f9190613403565b600060405180830381600087803b15801561077957600080fd5b505af115801561078d573d6000803e3d6000fd5b505050508273ffffffffffffffffffffffffffffffffffffffff166331afac366007846040518363ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016107e9929190613375565b602060405180830381600087803b15801561080357600080fd5b505af1158015610817573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061083b9190810190612bef565b90508093505050509695505050505050565b600080600080600080600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663f23f63c960066040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016108ce9190613323565b602060405180830381600087803b1580156108e857600080fd5b505af11580156108fc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506109209190810190612bc6565b94508473ffffffffffffffffffffffffffffffffffffffff16637857d7c96040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b15801561098657600080fd5b505af115801561099a573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506109be9190810190612b4b565b93508373ffffffffffffffffffffffffffffffffffffffff1663cd30a1d160076040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401610a16919061357e565b600060405180830381600087803b158015610a3057600080fd5b505af1158015610a44573d6000803e3d6000fd5b505050508373ffffffffffffffffffffffffffffffffffffffff1663cd30a1d1896040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401610a9d91906134fb565b600060405180830381600087803b158015610ab757600080fd5b505af1158015610acb573d6000803e3d6000fd5b505050508473ffffffffffffffffffffffffffffffffffffffff1663e8434e396007866040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401610b27929190613345565b602060405180830381600087803b","158015610b4157600080fd5b505af1158015610b55573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250610b799190810190612b74565b92508273ffffffffffffffffffffffffffffffffffffffff1663846719e060006040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401610bd19190613270565b602060405180830381600087803b158015610beb57600080fd5b505af1158015610bff573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250610c239190810190612b9d565b91508173ffffffffffffffffffffffffffffffffffffffff1663fda69fae6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401610c78906135b3565b602060405180830381600087803b158015610c9257600080fd5b505af1158015610ca6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250610cca9190810190612bef565b6003819055508473ffffffffffffffffffffffffffffffffffffffff166313db93466040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b158015610d3457600080fd5b505af1158015610d48573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250610d6c9190810190612b9d565b91508173ffffffffffffffffffffffffffffffffffffffff16632ef8ba7488600354036040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401610dc791906135d3565b600060405180830381600087803b158015610de157600080fd5b505af1158015610df5573d6000803e3d6000fd5b505050508473ffffffffffffffffffffffffffffffffffffffff1663bf2b70a1600784876040518463ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401610e53939291906133a5565b602060405180830381600087803b158015610e6d57600080fd5b505af1158015610e81573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250610ea59190810190612bef565b90507f2a1acf7456567e217ff3aaa8c6617a9159a0dd67982181ce7325d6e77b3a45d981604051610ed69190613255565b60405180910390a1809550505050505092915050565b600080600080600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663f23f63c960066040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401610f6a9190613323565b602060405180830381600087803b158015610f8457600080fd5b505af1158015610f98573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250610fbc9190810190612bc6565b92508273ffffffffffffffffffffffffffffffffffffffff16637857d7c96040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b15801561102257600080fd5b505af1158015611036573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061105a9190810190612b4b565b91508173ffffffffffffffffffffffffffffffffffffffff1663cd30a1d160076040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016110b2919061357e565b600060405180830381600087803b1580156110cc57600080fd5b505af11580156110e0573d6000803e3d6000fd5b505050508173ffffffffffffffffffffffffffffffffffffffff1663cd30a1d1866040518263ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040161113991906134fb565b600060405180830381600087803b15801561115357600080fd5b505af1158015611167573d6000803e3d6000fd5b505050508273ffffffffffffffffffffffffffffffffffffffff166328bb21176007846040518363ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016111c3929190613345565b602060405180830381600087803b1580156111dd57600080fd5b505af11580156111f1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506112159190810190612bef565b9050809350505050919050565b606080606080606080600080606080606080606080600080600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663f23f63c960066040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016112b29190613323565b602060405180830381600087803b1580156112cc57600080fd5b505af11580156112e0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506113049190810190612bc6565b99508973ffffffffffffffffffffffffffffffffffffffff1663e8434e3960078c73ffffffffffffffffffffffffffffffffffffffff16637857d7c96040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b15801561138857600080fd5b505af115801561139c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506113c09190810190612b4b565b6040518363ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016113f9929190613345565b602060405180830381600087803b15801561141357600080fd5b505af1158015611427573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061144b9190810190612b74565b98508873ffffffffffffffffffffffffffffffffffffffff1663949d225d6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b1580156114b157600080fd5b505af11580156114c5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506114e99190810190612bef565b60405190808252806020026020018201604052801561151c57816020015b60608152602001906001900390816115075790505b5097508873ffffffffffffffffffffffffffffffffffffffff1663949d225d6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b15801561158357600080fd5b505af1158015611597573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506115bb9190810190612bef565b6040519080825280602002602001820160405280156115ee57816020015b60608152602001906001900390816115d95790505b5096508873ffffffffffffffffffffffffffffffffffffffff1663949d225d6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b15801561165557600080fd5b505af1158015611669573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061168d9190810190612bef565b6040519080825280602002602001820160405280156116c057816020015b60608152602001906001900390816116ab5790505b5095508873ffffffffffffffffffffffffffffffffffffffff1663949d225d6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b15801561172757600080fd5b505af115801561173b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061175f9190810190612bef565b60405190808252806020026020018201604052801561178d5781602001602082028038833980820191505090505b5094508873ffffffffffffffffffffffffffffffffffffffff1663949d225d6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b1580156117f457600080fd5b505af1158015611808573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061182c9190810190612bef565b60405190808252806020026020018201604052801561185a5781602001602082028038833980820191505090505b5093508873ffffffffffffffffffffffffffffffffffffffff1663949d225d6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b1580156118c157600080fd5b505af11580156118d5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506118f99190810190612bef565b6040519080825280602002602001820160405280156119275781602001602082028038833980820191505090505b509250600091505b8873ffffffffffffffffffffffffffffffffffffffff1663949d225d6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b15801561199357600080fd5b505af11580156119a7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506119cb9190810190612bef565b821215611f1a578873ffffffffffffffffffffffffffffffffffffffff1663846719e0836040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401611a279190613255565b602060405180830381600087803b158015611a4157600080fd5b505af1158015611a55573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250611a799190810190612b9d565b90508073ffffffffffffffffffffffffffffffffffffffff16639c981fcb6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401611ace906134db565b600060405180830381600087803b158015611ae857600080fd5b505af1158015611afc573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250611b259190810190612c59565b8883815181101515611b3357fe5b9060","20019060200201819052508073ffffffffffffffffffffffffffffffffffffffff16639c981fcb6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401611b9390613486565b600060405180830381600087803b158015611bad57600080fd5b505af1158015611bc1573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250611bea9190810190612c59565b8783815181101515611bf857fe5b906020019060200201819052508073ffffffffffffffffffffffffffffffffffffffff16639c981fcb6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401611c5890613431565b600060405180830381600087803b158015611c7257600080fd5b505af1158015611c86573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250611caf9190810190612c59565b8683815181101515611cbd57fe5b906020019060200201819052508073ffffffffffffffffffffffffffffffffffffffff1663fda69fae6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401611d1d906135b3565b602060405180830381600087803b158015611d3757600080fd5b505af1158015611d4b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250611d6f9190810190612bef565b8583815181101515611d7d57fe5b90602001906020020181815250508073ffffffffffffffffffffffffffffffffffffffff1663fda69fae6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401611dde90613530565b602060405180830381600087803b158015611df857600080fd5b505af1158015611e0c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250611e309190810190612bef565b8483815181101515611e3e57fe5b90602001906020020181815250508073ffffffffffffffffffffffffffffffffffffffff16633536046a6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401611e9f906133e3565b602060405180830381600087803b158015611eb957600080fd5b505af1158015611ecd573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250611ef19190810190612dbf565b8383815181101515611eff57fe5b9060200190602002018181525050818060010192505061192f565b8787878787879f509f509f509f509f509f5050505050505050505050909192939495565b60608060606000806000806000806000600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663f23f63c960066040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401611fc69190613323565b602060405180830381600087803b158015611fe057600080fd5b505af1158015611ff4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506120189190810190612bc6565b93508373ffffffffffffffffffffffffffffffffffffffff16637857d7c96040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b15801561207e57600080fd5b505af1158015612092573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506120b69190810190612b4b565b92508273ffffffffffffffffffffffffffffffffffffffff1663cd30a1d160076040518263ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040161210e919061357e565b600060405180830381600087803b15801561212857600080fd5b505af115801561213c573d6000803e3d6000fd5b505050508273ffffffffffffffffffffffffffffffffffffffff1663cd30a1d18c6040518263ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040161219591906134fb565b600060405180830381600087803b1580156121af57600080fd5b505af11580156121c3573d6000803e3d6000fd5b505050508373ffffffffffffffffffffffffffffffffffffffff1663e8434e396007856040518363ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040161221f929190613345565b602060405180830381600087803b15801561223957600080fd5b505af115801561224d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506122719190810190612b74565b91508173ffffffffffffffffffffffffffffffffffffffff1663846719e060006040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016122c99190613270565b602060405180830381600087803b1580156122e357600080fd5b505af11580156122f7573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061231b9190810190612b9d565b90508073ffffffffffffffffffffffffffffffffffffffff16639c981fcb6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401612370906134db565b600060405180830381600087803b15801561238a57600080fd5b505af115801561239e573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052506123c79190810190612c59565b600090805190602001906123dc92919061295a565b508073ffffffffffffffffffffffffffffffffffffffff16639c981fcb6040518163ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040161243090613486565b600060405180830381600087803b15801561244a57600080fd5b505af115801561245e573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052506124879190810190612c59565b6001908051906020019061249c92919061295a565b508073ffffffffffffffffffffffffffffffffffffffff16639c981fcb6040518163ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016124f090613431565b600060405180830381600087803b15801561250a57600080fd5b505af115801561251e573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052506125479190810190612c59565b6002908051906020019061255c92919061295a565b508073ffffffffffffffffffffffffffffffffffffffff1663fda69fae6040518163ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016125b0906135b3565b602060405180830381600087803b1580156125ca57600080fd5b505af11580156125de573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506126029190810190612bef565b6003819055508073ffffffffffffffffffffffffffffffffffffffff1663fda69fae6040518163ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040161265b90613530565b602060405180830381600087803b15801561267557600080fd5b505af1158015612689573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506126ad9190810190612bef565b6004819055508073ffffffffffffffffffffffffffffffffffffffff16633536046a6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401612706906133e3565b602060405180830381600087803b15801561272057600080fd5b505af1158015612734573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506127589190810190612dbf565b600581905550600060016002600354600454600554858054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156128025780601f106127d757610100808354040283529160200191612802565b820191906000526020600020905b8154815290600101906020018083116127e557829003601f168201915b50505050509550848054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561289e5780601f106128735761010080835404028352916020019161289e565b820191906000526020600020905b81548152906001019060200180831161288157829003601f168201915b50505050509450838054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561293a5780601f1061290f5761010080835404028352916020019161293a565b820191906000526020600020905b81548152906001019060200180831161291d57829003601f168201915b505050505093509950995099509950995099505050505091939550919395565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061299b57805160ff19168380011785556129c9565b828001600101855582156129c9579182015b828111156129c85782518255916020019190600101906129ad565b5b5090506129d691906129da565b5090565b6129fc91905b808211156129f85760008160009055506001016129e0565b5090565b90565b6000612a0b8251613725565b905092915050565b6000612a1f8251613737565b905092915050565b6000612a338251613749565b905092915050565b6000612a47825161375b565b905092915050565b6000612a5b823561376d565b905092915050565b6000612a6f825161376d565b905092915050565b600082601f8301121515612a8a57600080fd5b8135612a9d612a988261362e565b613601565b91508082526020830160208301858383011115612ab957600080fd5b612ac48382846137b7565b50505092915050565b600082601f8301121515612ae057600080fd5b8151612af3612aee8261362e565b613601565b91508082526020830160208301858383011115612b0f57600080fd5b612b1a8382846137c6565b50505092915050565b6000612b2f8235613777565b905092915050","565b6000612b438251613777565b905092915050565b600060208284031215612b5d57600080fd5b6000612b6b848285016129ff565b91505092915050565b600060208284031215612b8657600080fd5b6000612b9484828501612a13565b91505092915050565b600060208284031215612baf57600080fd5b6000612bbd84828501612a27565b91505092915050565b600060208284031215612bd857600080fd5b6000612be684828501612a3b565b91505092915050565b600060208284031215612c0157600080fd5b6000612c0f84828501612a63565b91505092915050565b600060208284031215612c2a57600080fd5b600082013567ffffffffffffffff811115612c4457600080fd5b612c5084828501612a77565b91505092915050565b600060208284031215612c6b57600080fd5b600082015167ffffffffffffffff811115612c8557600080fd5b612c9184828501612acd565b91505092915050565b60008060408385031215612cad57600080fd5b600083013567ffffffffffffffff811115612cc757600080fd5b612cd385828601612a77565b9250506020612ce485828601612a4f565b9150509250929050565b60008060008060008060c08789031215612d0757600080fd5b600087013567ffffffffffffffff811115612d2157600080fd5b612d2d89828a01612a77565b965050602087013567ffffffffffffffff811115612d4a57600080fd5b612d5689828a01612a77565b955050604087013567ffffffffffffffff811115612d7357600080fd5b612d7f89828a01612a77565b9450506060612d9089828a01612a4f565b9350506080612da189828a01612a4f565b92505060a0612db289828a01612b23565b9150509295509295509295565b600060208284031215612dd157600080fd5b6000612ddf84828501612b37565b91505092915050565b6000612df382613693565b808452602084019350612e058361365a565b60005b82811015612e3757612e1b868351612f2a565b612e24826136ca565b9150602086019550600181019050612e08565b50849250505092915050565b6000612e4e8261369e565b80845260208401935083602082028501612e6785613667565b60005b84811015612ea0578383038852612e82838351612f7e565b9250612e8d826136d7565b9150602088019750600181019050612e6a565b508196508694505050505092915050565b6000612ebc826136a9565b808452602084019350612ece83613674565b60005b82811015612f0057612ee48683516131bb565b612eed826136e4565b9150602086019550600181019050612ed1565b50849250505092915050565b612f1581613781565b82525050565b612f2481613793565b82525050565b612f3381613711565b82525050565b612f42816137a5565b82525050565b6000612f53826136bf565b808452612f678160208601602086016137c6565b612f70816137f9565b602085010191505092915050565b6000612f89826136b4565b808452612f9d8160208601602086016137c6565b612fa6816137f9565b602085010191505092915050565b600081546001811660008114612fd15760018114612ff157613032565b607f600283041680865260ff198316602087015260408601935050613032565b6002820480865260208601955061300785613681565b60005b828110156130295781548189015260018201915060208101905061300a565b80880195505050505b505092915050565b6000600a82527f63726561746554696d65000000000000000000000000000000000000000000006020830152604082019050919050565b6000600682527f73686f70494400000000000000000000000000000000000000000000000000006020830152604082019050919050565b6000600a82527f636f6e73756d65724944000000000000000000000000000000000000000000006020830152604082019050919050565b6000600682527f63617264494400000000000000000000000000000000000000000000000000006020830152604082019050919050565b6000600c82527f636f6e74726163744861736800000000000000000000000000000000000000006020830152604082019050919050565b6000600482527f736f7274000000000000000000000000000000000000000000000000000000006020830152604082019050919050565b6000600782527f62616c616e6365000000000000000000000000000000000000000000000000006020830152604082019050919050565b6131c48161371b565b82525050565b600060c08201905081810360008301526131e48189612e43565b905081810360208301526131f88188612e43565b9050818103604083015261320c8187612e43565b905081810360608301526132208186612de8565b905081810360808301526132348185612de8565b905081810360a08301526132488184612eb1565b9050979650505050505050565b600060208201905061326a6000830184612f2a565b92915050565b60006020820190506132856000830184612f39565b92915050565b600060208201905081810360008301526132a58184612f7e565b905092915050565b600060c08201905081810360008301526132c78189612f48565b905081810360208301526132db8188612f48565b905081810360408301526132ef8187612f48565b90506132fe6060830186612f2a565b61330b6080830185612f2a565b61331860a08301846131bb565b979650505050505050565b6000602082019050818103600083015261333d8184612fb4565b905092915050565b6000604082019050818103600083015261335f8185612fb4565b905061336e6020830184612f0c565b9392505050565b6000604082019050818103600083015261338f8185612fb4565b905061339e6020830184612f1b565b9392505050565b600060608201905081810360008301526133bf8186612fb4565b90506133ce6020830185612f1b565b6133db6040830184612f0c565b949350505050565b600060208201905081810360008301526133fc8161303a565b9050919050565b6000604082019050818103600083015261341c8161303a565b905061342b60208301846131bb565b92915050565b6000602082019050818103600083015261344a81613071565b9050919050565b6000604082019050818103600083015261346a81613071565b9050818103602083015261347e8184612f48565b905092915050565b6000602082019050818103600083015261349f816130a8565b9050919050565b600060408201905081810360008301526134bf816130a8565b905081810360208301526134d38184612f48565b905092915050565b600060208201905081810360008301526134f4816130df565b9050919050565b60006040820190508181036000830152613514816130df565b905081810360208301526135288184612f48565b905092915050565b6000602082019050818103600083015261354981613116565b9050919050565b6000604082019050818103600083015261356981613116565b90506135786020830184612f2a565b92915050565b600060408201905081810360008301526135978161314d565b905081810360208301526135ab8184612fb4565b905092915050565b600060208201905081810360008301526135cc81613184565b9050919050565b600060408201905081810360008301526135ec81613184565b90506135fb6020830184612f2a565b92915050565b6000604051905081810181811067ffffffffffffffff8211171561362457600080fd5b8060405250919050565b600067ffffffffffffffff82111561364557600080fd5b601f19601f8301169050602081019050919050565b6000602082019050919050565b6000602082019050919050565b6000602082019050919050565b60008160005260206000209050919050565b600081519050919050565b600081519050919050565b600081519050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b6000602082019050919050565b6000602082019050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b6000819050919050565b6000613730826136f1565b9050919050565b6000613742826136f1565b9050919050565b6000613754826136f1565b9050919050565b6000613766826136f1565b9050919050565b6000819050919050565b6000819050919050565b600061378c826136f1565b9050919050565b600061379e826136f1565b9050919050565b60006137b082613711565b9050919050565b82818337600083830152505050565b60005b838110156137e45780820151818401526020810190506137c9565b838111156137f3576000848401525b50505050565b6000601f19601f83011690509190505600a265627a7a72305820d2b4e828312afb201143fa47de8d1fc5c9bd521c669091930f78fba261d8efbd6c6578706572696d656e74616cf50037"};

    public static final String BINARY = org.fisco.bcos.sdk.utils.StringUtils.joinAll("", BINARY_ARRAY);

    public static final String[] SM_BINARY_ARRAY = {};

    public static final String SM_BINARY = org.fisco.bcos.sdk.utils.StringUtils.joinAll("", SM_BINARY_ARRAY);

    public static final String[] ABI_ARRAY = {"[{\"constant\":true,\"inputs\":[],\"name\":\"tableName\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_cardID\",\"type\":\"string\"},{\"name\":\"_consumerID\",\"type\":\"string\"},{\"name\":\"_shopID\",\"type\":\"string\"},{\"name\":\"_balance\",\"type\":\"int256\"},{\"name\":\"_contractHash\",\"type\":\"int256\"},{\"name\":\"_createTime\",\"type\":\"uint256\"}],\"name\":\"createCard\",\"outputs\":[{\"name\":\"\",\"type\":\"int256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_cardID\",\"type\":\"string\"},{\"name\":\"_value\",\"type\":\"int256\"}],\"name\":\"changeBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"int256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_cardID\",\"type\":\"string\"}],\"name\":\"deleteCard\",\"outputs\":[{\"name\":\"\",\"type\":\"int256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"selectAll\",\"outputs\":[{\"name\":\"\",\"type\":\"string[]\"},{\"name\":\"\",\"type\":\"string[]\"},{\"name\":\"\",\"type\":\"string[]\"},{\"name\":\"\",\"type\":\"int256[]\"},{\"name\":\"\",\"type\":\"int256[]\"},{\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_cardID\",\"type\":\"string\"}],\"name\":\"selectByCardID\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"},{\"name\":\"\",\"type\":\"string\"},{\"name\":\"\",\"type\":\"string\"},{\"name\":\"\",\"type\":\"int256\"},{\"name\":\"\",\"type\":\"int256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"count\",\"type\":\"int256\"}],\"name\":\"CreateTable\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"count\",\"type\":\"int256\"}],\"name\":\"ChangeBalance\",\"type\":\"event\"}]"};

    public static final String ABI = org.fisco.bcos.sdk.utils.StringUtils.joinAll("", ABI_ARRAY);

    public static final String FUNC_TABLENAME = "tableName";

    public static final String FUNC_CREATECARD = "createCard";

    public static final String FUNC_CHANGEBALANCE = "changeBalance";

    public static final String FUNC_DELETECARD = "deleteCard";

    public static final String FUNC_SELECTALL = "selectAll";

    public static final String FUNC_SELECTBYCARDID = "selectByCardID";

    public static final Event CREATETABLE_EVENT = new Event("CreateTable", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Int256>() {}));
    ;

    public static final Event CHANGEBALANCE_EVENT = new Event("ChangeBalance", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Int256>() {}));
    ;

    protected PrepaidCard(String contractAddress, Client client, CryptoKeyPair credential) {
        super(getBinary(client.getCryptoSuite()), contractAddress, client, credential);
    }

    public static String getBinary(CryptoSuite cryptoSuite) {
        return (cryptoSuite.getCryptoTypeConfig() == CryptoType.ECDSA_TYPE ? BINARY : SM_BINARY);
    }

    public String tableName() throws ContractException {
        final Function function = new Function(FUNC_TABLENAME, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeCallWithSingleValueReturn(function, String.class);
    }

    public TransactionReceipt createCard(String _cardID, String _consumerID, String _shopID, BigInteger _balance, BigInteger _contractHash, BigInteger _createTime) {
        final Function function = new Function(
                FUNC_CREATECARD, 
                Arrays.<Type>asList(new Utf8String(_cardID),
                new Utf8String(_consumerID),
                new Utf8String(_shopID),
                new Int256(_balance),
                new Int256(_contractHash),
                new Uint256(_createTime)),
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public void createCard(String _cardID, String _consumerID, String _shopID, BigInteger _balance, BigInteger _contractHash, BigInteger _createTime, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_CREATECARD, 
                Arrays.<Type>asList(new Utf8String(_cardID),
                new Utf8String(_consumerID),
                new Utf8String(_shopID),
                new Int256(_balance),
                new Int256(_contractHash),
                new Uint256(_createTime)),
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForCreateCard(String _cardID, String _consumerID, String _shopID, BigInteger _balance, BigInteger _contractHash, BigInteger _createTime) {
        final Function function = new Function(
                FUNC_CREATECARD, 
                Arrays.<Type>asList(new Utf8String(_cardID),
                new Utf8String(_consumerID),
                new Utf8String(_shopID),
                new Int256(_balance),
                new Int256(_contractHash),
                new Uint256(_createTime)),
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple6<String, String, String, BigInteger, BigInteger, BigInteger> getCreateCardInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_CREATECARD, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Int256>() {}, new TypeReference<Int256>() {}, new TypeReference<Uint256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple6<String, String, String, BigInteger, BigInteger, BigInteger>(

                (String) results.get(0).getValue(), 
                (String) results.get(1).getValue(), 
                (String) results.get(2).getValue(), 
                (BigInteger) results.get(3).getValue(), 
                (BigInteger) results.get(4).getValue(), 
                (BigInteger) results.get(5).getValue()
                );
    }

    public Tuple1<BigInteger> getCreateCardOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_CREATECARD, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Int256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<BigInteger>(

                (BigInteger) results.get(0).getValue()
                );
    }

    public TransactionReceipt changeBalance(String _cardID, BigInteger _value) {
        final Function function = new Function(
                FUNC_CHANGEBALANCE, 
                Arrays.<Type>asList(new Utf8String(_cardID),
                new Int256(_value)),
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public void changeBalance(String _cardID, BigInteger _value, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_CHANGEBALANCE, 
                Arrays.<Type>asList(new Utf8String(_cardID),
                new Int256(_value)),
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForChangeBalance(String _cardID, BigInteger _value) {
        final Function function = new Function(
                FUNC_CHANGEBALANCE, 
                Arrays.<Type>asList(new Utf8String(_cardID),
                new Int256(_value)),
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple2<String, BigInteger> getChangeBalanceInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_CHANGEBALANCE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Int256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple2<String, BigInteger>(

                (String) results.get(0).getValue(), 
                (BigInteger) results.get(1).getValue()
                );
    }

    public Tuple1<BigInteger> getChangeBalanceOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_CHANGEBALANCE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Int256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<BigInteger>(

                (BigInteger) results.get(0).getValue()
                );
    }

    public TransactionReceipt deleteCard(String _cardID) {
        final Function function = new Function(
                FUNC_DELETECARD, 
                Arrays.<Type>asList(new Utf8String(_cardID)),
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public void deleteCard(String _cardID, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_DELETECARD, 
                Arrays.<Type>asList(new Utf8String(_cardID)),
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForDeleteCard(String _cardID) {
        final Function function = new Function(
                FUNC_DELETECARD, 
                Arrays.<Type>asList(new Utf8String(_cardID)),
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple1<String> getDeleteCardInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_DELETECARD, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<String>(

                (String) results.get(0).getValue()
                );
    }

    public Tuple1<BigInteger> getDeleteCardOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_DELETECARD, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Int256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<BigInteger>(

                (BigInteger) results.get(0).getValue()
                );
    }

    public TransactionReceipt selectAll() {
        final Function function = new Function(
                FUNC_SELECTALL, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public void selectAll(TransactionCallback callback) {
        final Function function = new Function(
                FUNC_SELECTALL, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForSelectAll() {
        final Function function = new Function(
                FUNC_SELECTALL, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple6<List<String>, List<String>, List<String>, List<BigInteger>, List<BigInteger>, List<BigInteger>> getSelectAllOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_SELECTALL, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Utf8String>>() {}, new TypeReference<DynamicArray<Utf8String>>() {}, new TypeReference<DynamicArray<Utf8String>>() {}, new TypeReference<DynamicArray<Int256>>() {}, new TypeReference<DynamicArray<Int256>>() {}, new TypeReference<DynamicArray<Uint256>>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple6<List<String>, List<String>, List<String>, List<BigInteger>, List<BigInteger>, List<BigInteger>>(

                convertToNative((List<Utf8String>) results.get(0).getValue()), 
                convertToNative((List<Utf8String>) results.get(1).getValue()), 
                convertToNative((List<Utf8String>) results.get(2).getValue()), 
                convertToNative((List<Int256>) results.get(3).getValue()), 
                convertToNative((List<Int256>) results.get(4).getValue()), 
                convertToNative((List<Uint256>) results.get(5).getValue())
                );
    }

    public TransactionReceipt selectByCardID(String _cardID) {
        final Function function = new Function(
                FUNC_SELECTBYCARDID, 
                Arrays.<Type>asList(new Utf8String(_cardID)),
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public void selectByCardID(String _cardID, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_SELECTBYCARDID, 
                Arrays.<Type>asList(new Utf8String(_cardID)),
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForSelectByCardID(String _cardID) {
        final Function function = new Function(
                FUNC_SELECTBYCARDID, 
                Arrays.<Type>asList(new Utf8String(_cardID)),
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple1<String> getSelectByCardIDInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_SELECTBYCARDID, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<String>(

                (String) results.get(0).getValue()
                );
    }

    public Tuple6<String, String, String, BigInteger, BigInteger, BigInteger> getSelectByCardIDOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_SELECTBYCARDID, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Int256>() {}, new TypeReference<Int256>() {}, new TypeReference<Uint256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple6<String, String, String, BigInteger, BigInteger, BigInteger>(

                (String) results.get(0).getValue(), 
                (String) results.get(1).getValue(), 
                (String) results.get(2).getValue(), 
                (BigInteger) results.get(3).getValue(), 
                (BigInteger) results.get(4).getValue(), 
                (BigInteger) results.get(5).getValue()
                );
    }

    public List<CreateTableEventResponse> getCreateTableEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(CREATETABLE_EVENT, transactionReceipt);
        ArrayList<CreateTableEventResponse> responses = new ArrayList<CreateTableEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            CreateTableEventResponse typedResponse = new CreateTableEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.count = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public void subscribeCreateTableEvent(String fromBlock, String toBlock, List<String> otherTopics, EventCallback callback) {
        String topic0 = eventEncoder.encode(CREATETABLE_EVENT);
        subscribeEvent(ABI,BINARY,topic0,fromBlock,toBlock,otherTopics,callback);
    }

    public void subscribeCreateTableEvent(EventCallback callback) {
        String topic0 = eventEncoder.encode(CREATETABLE_EVENT);
        subscribeEvent(ABI,BINARY,topic0,callback);
    }

    public List<ChangeBalanceEventResponse> getChangeBalanceEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(CHANGEBALANCE_EVENT, transactionReceipt);
        ArrayList<ChangeBalanceEventResponse> responses = new ArrayList<ChangeBalanceEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            ChangeBalanceEventResponse typedResponse = new ChangeBalanceEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.count = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public void subscribeChangeBalanceEvent(String fromBlock, String toBlock, List<String> otherTopics, EventCallback callback) {
        String topic0 = eventEncoder.encode(CHANGEBALANCE_EVENT);
        subscribeEvent(ABI,BINARY,topic0,fromBlock,toBlock,otherTopics,callback);
    }

    public void subscribeChangeBalanceEvent(EventCallback callback) {
        String topic0 = eventEncoder.encode(CHANGEBALANCE_EVENT);
        subscribeEvent(ABI,BINARY,topic0,callback);
    }

    public static PrepaidCard load(String contractAddress, Client client, CryptoKeyPair credential) {
        return new PrepaidCard(contractAddress, client, credential);
    }

    public static PrepaidCard deploy(Client client, CryptoKeyPair credential) throws ContractException {
        return deploy(PrepaidCard.class, client, credential, getBinary(client.getCryptoSuite()), "");
    }

    public static class CreateTableEventResponse {
        public TransactionReceipt.Logs log;

        public BigInteger count;
    }

    public static class ChangeBalanceEventResponse {
        public TransactionReceipt.Logs log;

        public BigInteger count;
    }
}
