package org.fisco.bcos.upload.contract;

import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import org.fisco.bcos.sdk.abi.FunctionReturnDecoder;
import org.fisco.bcos.sdk.abi.TypeReference;
import org.fisco.bcos.sdk.abi.datatypes.Event;
import org.fisco.bcos.sdk.abi.datatypes.Function;
import org.fisco.bcos.sdk.abi.datatypes.Type;
import org.fisco.bcos.sdk.abi.datatypes.Utf8String;
import org.fisco.bcos.sdk.abi.datatypes.generated.Int256;
import org.fisco.bcos.sdk.abi.datatypes.generated.tuples.generated.Tuple1;
import org.fisco.bcos.sdk.abi.datatypes.generated.tuples.generated.Tuple2;
import org.fisco.bcos.sdk.client.Client;
import org.fisco.bcos.sdk.contract.Contract;
import org.fisco.bcos.sdk.crypto.CryptoSuite;
import org.fisco.bcos.sdk.crypto.keypair.CryptoKeyPair;
import org.fisco.bcos.sdk.eventsub.EventCallback;
import org.fisco.bcos.sdk.model.CryptoType;
import org.fisco.bcos.sdk.model.TransactionReceipt;
import org.fisco.bcos.sdk.model.callback.TransactionCallback;
import org.fisco.bcos.sdk.transaction.model.exception.ContractException;

@SuppressWarnings("unchecked")
public class HashUpload extends Contract {
    public static final String[] BINARY_ARRAY = {"","ffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001828103825285818151815260200191508051906020019080838360005b83811015610ec3578082015181840152602081019050610ea8565b50505050905090810190601f168015610ef05780820380516001836020036101000a031916815260200191505b50945050505050602060405180830381600087803b158015610f1157600080fd5b505af1158015610f25573d6000803e3d6000fd5b505050506040513d6020811015610f3b57600080fd5b81019080805190602001909291905050509050600181141515611094577ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe95507fc66d2fdec13f2ffc68e88037860450d99cd67382fcb61f50e104aba48f43c15a858a8a604051808481526020018060200180602001838103835285818151815260200191508051906020019080838360005b83811015610fe9578082015181840152602081019050610fce565b50505050905090810190601f1680156110165780820380516001836020036101000a031916815260200191505b50838103825284818151815260200191508051906020019080838360005b8381101561104f578082015181840152602081019050611034565b50505050905090810190601f16801561107c5780820380516001836020036101000a031916815260200191505b509550505050505060405180910390a18596506111a9565b7fc66d2fdec13f2ffc68e88037860450d99cd67382fcb61f50e104aba48f43c15a858a8a604051808481526020018060200180602001838103835285818151815260200191508051906020019080838360005b838110156111025780820151818401526020810190506110e7565b50505050905090810190601f16801561112f5780820380516001836020036101000a031916815260200191505b50838103825284818151815260200191508051906020019080838360005b8381101561116857808201518184015260208101905061114d565b50505050905090810190601f1680156111955780820380516001836020036101000a031916815260200191505b509550505050505060405180910390a18596505b50505050505092915050565b60006060600080606060006111c8611686565b93508373ffffffffffffffffffffffffffffffffffffffff1663e8434e39888673ffffffffffffffffffffffffffffffffffffffff16637857d7c96040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b15801561124b57600080fd5b505af115801561125f573d6000803e3d6000fd5b505050506040513d602081101561127557600080fd5b81019080805190602001909291905050506040518363ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180806020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001828103825284818151815260200191508051906020019080838360005b83811015611323578082015181840152602081019050611308565b50505050905090810190601f1680156113505780820380516001836020036101000a031916815260200191505b509350505050602060405180830381600087803b15801561137057600080fd5b505af1158015611384573d6000803e3d6000fd5b505050506040513d602081101561139a57600080fd5b81019080805190602001909291905050509250602060405190810160405280600081525091508273ffffffffffffffffffffffffffffffffffffffff1663949d225d6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b15801561142457600080fd5b505af1158015611438573d6000803e3d6000fd5b505050506040513d602081101561144e57600080fd5b810190808051906020019092919050505060001415611495577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff828191509550955061167d565b8273ffffffffffffffffffffffffffffffffffffffff1663846719e060006040518263ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180828152602001915050602060405180830381600087803b15801561150557600080fd5b505af1158015611519573d6000803e3d6000fd5b505050506040513d602081101561152f57600080fd5b8101908080519060200190929190505050905060008173ffffffffffffffffffffffffffffffffffffffff16639c981fcb6040518163ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180806020018281038252600a8152602001807f686173685f76616c756500000000000000000000000000000000000000000000815250602001915050600060405180830381600087803b1580156115e457600080fd5b505af11580156115f8573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250602081101561162257600080fd5b81019080805164010000000081111561163a57600080fd5b8281019050602081018481111561165057600080fd5b815185600182028301116401000000008211171561166d57600080fd5b5050929190505050819150955095505b50505050915091565b600080600061100191508173ffffffffffffffffffffffffffffffffffffffff1663f23f63c96040518163ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180806020018281038252600a8152602001807f686173685f7461626c6500000000000000000000000000000000000000000000815250602001915050602060405180830381600087803b15801561173057600080fd5b505af1158015611744573d6000803e3d6000fd5b505050506040513d602081101561175a57600080fd5b810190808051906020019092919050505090508092505050905600a165627a7a7230582031405c597e427f4c8c91128f1ce9f705af911f73157e8d3be68e80f0295a227a0029"};

    public static final String BINARY = org.fisco.bcos.sdk.utils.StringUtils.joinAll("", BINARY_ARRAY);

    public static final String[] SM_BINARY_ARRAY = {"","80838360005b83811015610e8c578082015181840152602081019050610e71565b50505050905090810190601f168015610eb95780820380516001836020036101000a031916815260200191505b509350505050600060405180830381600087803b158015610ed957600080fd5b505af1158015610eed573d6000803e3d6000fd5b505050508273ffffffffffffffffffffffffffffffffffffffff16634c6f30c08a846040518363ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180806020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001828103825284818151815260200191508051906020019080838360005b83811015610fac578082015181840152602081019050610f91565b50505050905090810190601f168015610fd95780820380516001836020036101000a031916815260200191505b509350505050602060405180830381600087803b158015610ff957600080fd5b505af115801561100d573d6000803e3d6000fd5b505050506040513d602081101561102357600080fd5b810190808051906020019092919050505090506001811415611048576000955061106c565b7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe95505b611095565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff95505b7f9961298cae60b34a7a0f135ab27247be7349d2e7eb48f2854b98f2d6d8566ead868a8a604051808481526020018060200180602001838103835285818151815260200191508051906020019080838360005b838110156111035780820151818401526020810190506110e8565b50505050905090810190601f1680156111305780820380516001836020036101000a031916815260200191505b50838103825284818151815260200191508051906020019080838360005b8381101561116957808201518184015260208101905061114e565b50505050905090810190601f1680156111965780820380516001836020036101000a031916815260200191505b509550505050505060405180910390a185965050505050505092915050565b60006060600080606060006111c8611686565b93508373ffffffffffffffffffffffffffffffffffffffff1663d8ac5957888673ffffffffffffffffffffffffffffffffffffffff1663c74f8caf6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b15801561124b57600080fd5b505af115801561125f573d6000803e3d6000fd5b505050506040513d602081101561127557600080fd5b81019080805190602001909291905050506040518363ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180806020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001828103825284818151815260200191508051906020019080838360005b83811015611323578082015181840152602081019050611308565b50505050905090810190601f1680156113505780820380516001836020036101000a031916815260200191505b509350505050602060405180830381600087803b15801561137057600080fd5b505af1158015611384573d6000803e3d6000fd5b505050506040513d602081101561139a57600080fd5b81019080805190602001909291905050509250602060405190810160405280600081525091508273ffffffffffffffffffffffffffffffffffffffff1663d3e9af5a6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b15801561142457600080fd5b505af1158015611438573d6000803e3d6000fd5b505050506040513d602081101561144e57600080fd5b810190808051906020019092919050505060001415611495577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff828191509550955061167d565b8273ffffffffffffffffffffffffffffffffffffffff16633dd2b61460006040518263ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180828152602001915050602060405180830381600087803b15801561150557600080fd5b505af1158015611519573d6000803e3d6000fd5b505050506040513d602081101561152f57600080fd5b8101908080519060200190929190505050905060008173ffffffffffffffffffffffffffffffffffffffff16639bca41e86040518163ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180806020018281038252600a8152602001807f686173685f76616c756500000000000000000000000000000000000000000000815250602001915050600060405180830381600087803b1580156115e457600080fd5b505af11580156115f8573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250602081101561162257600080fd5b81019080805164010000000081111561163a57600080fd5b8281019050602081018481111561165057600080fd5b815185600182028301116401000000008211171561166d57600080fd5b5050929190505050819150955095505b50505050915091565b600080600061100191508173ffffffffffffffffffffffffffffffffffffffff166359a48b656040518163ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180806020018281038252600a8152602001807f686173685f7461626c6500000000000000000000000000000000000000000000815250602001915050602060405180830381600087803b15801561173057600080fd5b505af1158015611744573d6000803e3d6000fd5b505050506040513d602081101561175a57600080fd5b810190808051906020019092919050505090508092505050905600a165627a7a7230582085bf73f60a945741901bf748f77e3e0ad259778e7a6de5ad09c4c8bfe2ca4afd0029"};

    public static final String SM_BINARY = org.fisco.bcos.sdk.utils.StringUtils.joinAll("", SM_BINARY_ARRAY);

    public static final String[] ABI_ARRAY = {"[{\"constant\":false,\"inputs\":[{\"name\":\"hash_id\",\"type\":\"string\"},{\"name\":\"hash_value\",\"type\":\"string\"}],\"name\":\"uploadHash\",\"outputs\":[{\"name\":\"\",\"type\":\"int256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"hash_id\",\"type\":\"string\"},{\"name\":\"hash_value\",\"type\":\"string\"}],\"name\":\"modifyHash\",\"outputs\":[{\"name\":\"\",\"type\":\"int256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"hash_id\",\"type\":\"string\"}],\"name\":\"selectHash\",\"outputs\":[{\"name\":\"\",\"type\":\"int256\"},{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"ret\",\"type\":\"int256\"},{\"indexed\":false,\"name\":\"hash_id\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"hash_value\",\"type\":\"string\"}],\"name\":\"UploadHash\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"ret\",\"type\":\"int256\"},{\"indexed\":false,\"name\":\"hash_id\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"hash_value\",\"type\":\"string\"}],\"name\":\"ModifyHash\",\"type\":\"event\"}]"};

    public static final String ABI = org.fisco.bcos.sdk.utils.StringUtils.joinAll("", ABI_ARRAY);

    public static final String FUNC_UPLOADHASH = "uploadHash";

    public static final String FUNC_MODIFYHASH = "modifyHash";

    public static final String FUNC_SELECTHASH = "selectHash";

    public static final Event UPLOADHASH_EVENT = new Event("UploadHash", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Int256>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}));
    ;

    public static final Event MODIFYHASH_EVENT = new Event("ModifyHash", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Int256>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}));
    ;

    protected HashUpload(String contractAddress, Client client, CryptoKeyPair credential) {
        super(getBinary(client.getCryptoSuite()), contractAddress, client, credential);
    }

    public static String getBinary(CryptoSuite cryptoSuite) {
        return (cryptoSuite.getCryptoTypeConfig() == CryptoType.ECDSA_TYPE ? BINARY : SM_BINARY);
    }

    public TransactionReceipt uploadHash(String hash_id, String hash_value) {
        final Function function = new Function(
                FUNC_UPLOADHASH, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(hash_id), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(hash_value)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] uploadHash(String hash_id, String hash_value, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_UPLOADHASH, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(hash_id), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(hash_value)), 
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForUploadHash(String hash_id, String hash_value) {
        final Function function = new Function(
                FUNC_UPLOADHASH, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(hash_id), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(hash_value)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple2<String, String> getUploadHashInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_UPLOADHASH, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple2<String, String>(

                (String) results.get(0).getValue(), 
                (String) results.get(1).getValue()
                );
    }

    public Tuple1<BigInteger> getUploadHashOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_UPLOADHASH, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Int256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<BigInteger>(

                (BigInteger) results.get(0).getValue()
                );
    }

    public TransactionReceipt modifyHash(String hash_id, String hash_value) {
        final Function function = new Function(
                FUNC_MODIFYHASH, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(hash_id), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(hash_value)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] modifyHash(String hash_id, String hash_value, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_MODIFYHASH, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(hash_id), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(hash_value)), 
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForModifyHash(String hash_id, String hash_value) {
        final Function function = new Function(
                FUNC_MODIFYHASH, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(hash_id), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(hash_value)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple2<String, String> getModifyHashInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_MODIFYHASH, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple2<String, String>(

                (String) results.get(0).getValue(), 
                (String) results.get(1).getValue()
                );
    }

    public Tuple1<BigInteger> getModifyHashOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_MODIFYHASH, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Int256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<BigInteger>(

                (BigInteger) results.get(0).getValue()
                );
    }

    public Tuple2<BigInteger, String> selectHash(String hash_id) throws ContractException {
        final Function function = new Function(FUNC_SELECTHASH, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(hash_id)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Int256>() {}, new TypeReference<Utf8String>() {}));
        List<Type> results = executeCallWithMultipleValueReturn(function);
        return new Tuple2<BigInteger, String>(
                (BigInteger) results.get(0).getValue(), 
                (String) results.get(1).getValue());
    }

    public List<UploadHashEventResponse> getUploadHashEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(UPLOADHASH_EVENT, transactionReceipt);
        ArrayList<UploadHashEventResponse> responses = new ArrayList<UploadHashEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            UploadHashEventResponse typedResponse = new UploadHashEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.ret = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.hash_id = (String) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.hash_value = (String) eventValues.getNonIndexedValues().get(2).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public void subscribeUploadHashEvent(String fromBlock, String toBlock, List<String> otherTopics, EventCallback callback) {
        String topic0 = eventEncoder.encode(UPLOADHASH_EVENT);
        subscribeEvent(ABI,BINARY,topic0,fromBlock,toBlock,otherTopics,callback);
    }

    public void subscribeUploadHashEvent(EventCallback callback) {
        String topic0 = eventEncoder.encode(UPLOADHASH_EVENT);
        subscribeEvent(ABI,BINARY,topic0,callback);
    }

    public List<ModifyHashEventResponse> getModifyHashEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(MODIFYHASH_EVENT, transactionReceipt);
        ArrayList<ModifyHashEventResponse> responses = new ArrayList<ModifyHashEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            ModifyHashEventResponse typedResponse = new ModifyHashEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.ret = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.hash_id = (String) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.hash_value = (String) eventValues.getNonIndexedValues().get(2).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public void subscribeModifyHashEvent(String fromBlock, String toBlock, List<String> otherTopics, EventCallback callback) {
        String topic0 = eventEncoder.encode(MODIFYHASH_EVENT);
        subscribeEvent(ABI,BINARY,topic0,fromBlock,toBlock,otherTopics,callback);
    }

    public void subscribeModifyHashEvent(EventCallback callback) {
        String topic0 = eventEncoder.encode(MODIFYHASH_EVENT);
        subscribeEvent(ABI,BINARY,topic0,callback);
    }

    public static HashUpload load(String contractAddress, Client client, CryptoKeyPair credential) {
        return new HashUpload(contractAddress, client, credential);
    }

    public static HashUpload deploy(Client client, CryptoKeyPair credential) throws ContractException {
        return deploy(HashUpload.class, client, credential, getBinary(client.getCryptoSuite()), "");
    }

    public static class UploadHashEventResponse {
        public TransactionReceipt.Logs log;

        public BigInteger ret;

        public String hash_id;

        public String hash_value;
    }

    public static class ModifyHashEventResponse {
        public TransactionReceipt.Logs log;

        public BigInteger ret;

        public String hash_id;

        public String hash_value;
    }
}
