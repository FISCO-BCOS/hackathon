package com.brecycle.contract;

import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import org.fisco.bcos.sdk.abi.FunctionEncoder;
import org.fisco.bcos.sdk.abi.FunctionReturnDecoder;
import org.fisco.bcos.sdk.abi.TypeReference;
import org.fisco.bcos.sdk.abi.datatypes.Address;
import org.fisco.bcos.sdk.abi.datatypes.DynamicArray;
import org.fisco.bcos.sdk.abi.datatypes.DynamicStruct;
import org.fisco.bcos.sdk.abi.datatypes.Event;
import org.fisco.bcos.sdk.abi.datatypes.Function;
import org.fisco.bcos.sdk.abi.datatypes.Type;
import org.fisco.bcos.sdk.abi.datatypes.Utf8String;
import org.fisco.bcos.sdk.abi.datatypes.generated.Int16;
import org.fisco.bcos.sdk.abi.datatypes.generated.Uint256;
import org.fisco.bcos.sdk.abi.datatypes.generated.tuples.generated.Tuple1;
import org.fisco.bcos.sdk.abi.datatypes.generated.tuples.generated.Tuple3;
import org.fisco.bcos.sdk.client.Client;
import org.fisco.bcos.sdk.contract.Contract;
import org.fisco.bcos.sdk.crypto.CryptoSuite;
import org.fisco.bcos.sdk.crypto.keypair.CryptoKeyPair;
import org.fisco.bcos.sdk.eventsub.EventCallback;
import org.fisco.bcos.sdk.model.CryptoType;
import org.fisco.bcos.sdk.model.TransactionReceipt;
import org.fisco.bcos.sdk.model.callback.TransactionCallback;
import org.fisco.bcos.sdk.transaction.model.exception.ContractException;

@SuppressWarnings("unchecked")
public class BatteryContract extends Contract {
    public static final String[] BINARY_ARRAY = {"","006109ce8682870161092d565b935050602084013567ffffffffffffffff8111156109eb57600080fd5b6109f786828701610955565b9250506040610a0886828701610941565b9150509250925092565b600060208284031215610a2457600080fd5b600082013567ffffffffffffffff811115610a3e57600080fd5b610a4a84828501610955565b91505092915050565b610a5c81610e64565b82525050565b6000610a6d82610e36565b80845260208401935083602082028501610a8685610e29565b60005b84811015610abf578383038852610aa1838351610bfd565b9250610aac82610e57565b9150602088019750600181019050610a89565b508196508694505050505092915050565b610ad981610e84565b82525050565b610ae881610ec8565b82525050565b610af781610eda565b82525050565b6000610b0882610e4c565b808452610b1c816020860160208601610efb565b610b2581610f2e565b602085010191505092915050565b6000610b3e82610e41565b808452610b52816020860160208601610efb565b610b5b81610f2e565b602085010191505092915050565b6000602682527f63757272656e742073746174757320646f6e277420616c6c6f7720746f20747260208301527f616e7366657200000000000000000000000000000000000000000000000000006040830152606082019050919050565b6000601282527f4e6f742063757272656e74206f776e65722100000000000000000000000000006020830152604082019050919050565b6000608083016000830151610c156000860182610a53565b506020830151610c286020860182610ad0565b506040830151610c3b6040860182610c60565b5060608301518482036060860152610c538282610b33565b9150508091505092915050565b610c6981610e91565b82525050565b6000608082019050610c846000830187610a53565b610c916020830186610ad0565b610c9e6040830185610c60565b8181036060830152610cb08184610afd565b905095945050505050565b6000608082019050610cd06000830187610a53565b610cdd6020830186610adf565b610cea6040830185610c60565b8181036060830152610cfc8184610afd565b905095945050505050565b6000608082019050610d1c6000830187610a53565b610d296020830186610aee565b610d366040830185610c60565b8181036060830152610d488184610afd565b905095945050505050565b60006020820190508181036000830152610d6d8184610a62565b905092915050565b6000602082019050610d8a6000830184610ad0565b92915050565b60006020820190508181036000830152610da981610b69565b9050919050565b60006020820190508181036000830152610dc981610bc6565b9050919050565b6000604051905081810181811067ffffffffffffffff82111715610df357600080fd5b8060405250919050565b600067ffffffffffffffff821115610e1457600080fd5b601f19601f8301169050602081019050919050565b6000602082019050919050565b600081519050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60008160010b9050919050565b6000819050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60008160010b9050919050565b6000610ed382610e84565b9050919050565b6000610ee582610e84565b9050919050565b82818337600083830152505050565b60005b83811015610f19578082015181840152602081019050610efe565b83811115610f28576000848401525b50505050565b6000601f19601f83011690509190505600a265627a7a72305820e215749ccbc8d35a03d6002cbb26da7d5cebee2ec591b38e53aaa8d145c1a17f6c6578706572696d656e74616cf50037"};

    public static final String BINARY = org.fisco.bcos.sdk.utils.StringUtils.joinAll("", BINARY_ARRAY);

    public static final String[] SM_BINARY_ARRAY = {"","006109ce8682870161092d565b935050602084013567ffffffffffffffff8111156109eb57600080fd5b6109f786828701610955565b9250506040610a0886828701610941565b9150509250925092565b600060208284031215610a2457600080fd5b600082013567ffffffffffffffff811115610a3e57600080fd5b610a4a84828501610955565b91505092915050565b610a5c81610e64565b82525050565b6000610a6d82610e36565b80845260208401935083602082028501610a8685610e29565b60005b84811015610abf578383038852610aa1838351610bfd565b9250610aac82610e57565b9150602088019750600181019050610a89565b508196508694505050505092915050565b610ad981610e84565b82525050565b610ae881610ec8565b82525050565b610af781610eda565b82525050565b6000610b0882610e4c565b808452610b1c816020860160208601610efb565b610b2581610f2e565b602085010191505092915050565b6000610b3e82610e41565b808452610b52816020860160208601610efb565b610b5b81610f2e565b602085010191505092915050565b6000602682527f63757272656e742073746174757320646f6e277420616c6c6f7720746f20747260208301527f616e7366657200000000000000000000000000000000000000000000000000006040830152606082019050919050565b6000601282527f4e6f742063757272656e74206f776e65722100000000000000000000000000006020830152604082019050919050565b6000608083016000830151610c156000860182610a53565b506020830151610c286020860182610ad0565b506040830151610c3b6040860182610c60565b5060608301518482036060860152610c538282610b33565b9150508091505092915050565b610c6981610e91565b82525050565b6000608082019050610c846000830187610a53565b610c916020830186610ad0565b610c9e6040830185610c60565b8181036060830152610cb08184610afd565b905095945050505050565b6000608082019050610cd06000830187610a53565b610cdd6020830186610adf565b610cea6040830185610c60565b8181036060830152610cfc8184610afd565b905095945050505050565b6000608082019050610d1c6000830187610a53565b610d296020830186610aee565b610d366040830185610c60565b8181036060830152610d488184610afd565b905095945050505050565b60006020820190508181036000830152610d6d8184610a62565b905092915050565b6000602082019050610d8a6000830184610ad0565b92915050565b60006020820190508181036000830152610da981610b69565b9050919050565b60006020820190508181036000830152610dc981610bc6565b9050919050565b6000604051905081810181811067ffffffffffffffff82111715610df357600080fd5b8060405250919050565b600067ffffffffffffffff821115610e1457600080fd5b601f19601f8301169050602081019050919050565b6000602082019050919050565b600081519050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60008160010b9050919050565b6000819050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60008160010b9050919050565b6000610ed382610e84565b9050919050565b6000610ee582610e84565b9050919050565b82818337600083830152505050565b60005b83811015610f19578082015181840152602081019050610efe565b83811115610f28576000848401525b50505050565b6000601f19601f83011690509190505600a265627a7a72305820e1ff4c616ee92c1e254adf866f6df1b44e0481f6eac92c36ba18d417adfa4a776c6578706572696d656e74616cf50037"};

    public static final String SM_BINARY = org.fisco.bcos.sdk.utils.StringUtils.joinAll("", SM_BINARY_ARRAY);

    public static final String[] ABI_ARRAY = {"[{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"remark\",\"type\":\"string\"},{\"name\":\"status\",\"type\":\"int16\"}],\"name\":\"transfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"remark\",\"type\":\"string\"}],\"name\":\"endLife\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getStatus\",\"outputs\":[{\"name\":\"\",\"type\":\"int16\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"remark\",\"type\":\"string\"}],\"name\":\"safeCheck\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getTraceInfo\",\"outputs\":[{\"components\":[{\"name\":\"addr\",\"type\":\"address\"},{\"name\":\"status\",\"type\":\"int16\"},{\"name\":\"timestamp\",\"type\":\"uint256\"},{\"name\":\"remark\",\"type\":\"string\"}],\"name\":\"_data\",\"type\":\"tuple[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"id\",\"type\":\"string\"},{\"name\":\"batchNo\",\"type\":\"string\"},{\"name\":\"info\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"status\",\"type\":\"int16\"},{\"indexed\":false,\"name\":\"timestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"remark\",\"type\":\"string\"}],\"name\":\"newStatus\",\"type\":\"event\"}]"};

    public static final String ABI = org.fisco.bcos.sdk.utils.StringUtils.joinAll("", ABI_ARRAY);

    public static final String FUNC_TRANSFER = "transfer";

    public static final String FUNC_ENDLIFE = "endLife";

    public static final String FUNC_GETSTATUS = "getStatus";

    public static final String FUNC_SAFECHECK = "safeCheck";

    public static final String FUNC_GETTRACEINFO = "getTraceInfo";

    public static final Event NEWSTATUS_EVENT = new Event("newStatus", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Int16>() {}, new TypeReference<Uint256>() {}, new TypeReference<Utf8String>() {}));
    ;

    protected BatteryContract(String contractAddress, Client client, CryptoKeyPair credential) {
        super(getBinary(client.getCryptoSuite()), contractAddress, client, credential);
    }

    public static String getBinary(CryptoSuite cryptoSuite) {
        return (cryptoSuite.getCryptoTypeConfig() == CryptoType.ECDSA_TYPE ? BINARY : SM_BINARY);
    }

    public TransactionReceipt transfer(String to, String remark, BigInteger status) {
        final Function function = new Function(
                FUNC_TRANSFER, 
                Arrays.<Type>asList(new Address(to),
                new Utf8String(remark),
                new Int16(status)),
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] transfer(String to, String remark, BigInteger status, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_TRANSFER, 
                Arrays.<Type>asList(new Address(to),
                new Utf8String(remark),
                new Int16(status)),
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForTransfer(String to, String remark, BigInteger status) {
        final Function function = new Function(
                FUNC_TRANSFER, 
                Arrays.<Type>asList(new Address(to),
                new Utf8String(remark),
                new Int16(status)),
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple3<String, String, BigInteger> getTransferInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_TRANSFER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Int16>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple3<String, String, BigInteger>(

                (String) results.get(0).getValue(), 
                (String) results.get(1).getValue(), 
                (BigInteger) results.get(2).getValue()
                );
    }

    public TransactionReceipt endLife(String remark) {
        final Function function = new Function(
                FUNC_ENDLIFE, 
                Arrays.<Type>asList(new Utf8String(remark)),
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] endLife(String remark, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_ENDLIFE, 
                Arrays.<Type>asList(new Utf8String(remark)),
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForEndLife(String remark) {
        final Function function = new Function(
                FUNC_ENDLIFE, 
                Arrays.<Type>asList(new Utf8String(remark)),
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple1<String> getEndLifeInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_ENDLIFE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<String>(

                (String) results.get(0).getValue()
                );
    }

    public BigInteger getStatus() throws ContractException {
        final Function function = new Function(FUNC_GETSTATUS, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Int16>() {}));
        return executeCallWithSingleValueReturn(function, BigInteger.class);
    }

    public TransactionReceipt safeCheck(String remark) {
        final Function function = new Function(
                FUNC_SAFECHECK, 
                Arrays.<Type>asList(new Utf8String(remark)),
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] safeCheck(String remark, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_SAFECHECK, 
                Arrays.<Type>asList(new Utf8String(remark)),
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForSafeCheck(String remark) {
        final Function function = new Function(
                FUNC_SAFECHECK, 
                Arrays.<Type>asList(new Utf8String(remark)),
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple1<String> getSafeCheckInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_SAFECHECK, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<String>(

                (String) results.get(0).getValue()
                );
    }

    public DynamicArray<Struct0> getTraceInfo() throws ContractException {
        final Function function = new Function(FUNC_GETTRACEINFO, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Struct0>>() {}));
        return executeCallWithSingleValueReturn(function, DynamicArray.class);
    }

    public List<NewStatusEventResponse> getNewStatusEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(NEWSTATUS_EVENT, transactionReceipt);
        ArrayList<NewStatusEventResponse> responses = new ArrayList<NewStatusEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            NewStatusEventResponse typedResponse = new NewStatusEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.addr = (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.status = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.timestamp = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
            typedResponse.remark = (String) eventValues.getNonIndexedValues().get(3).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public void subscribeNewStatusEvent(String fromBlock, String toBlock, List<String> otherTopics, EventCallback callback) {
        String topic0 = eventEncoder.encode(NEWSTATUS_EVENT);
        subscribeEvent(ABI,BINARY,topic0,fromBlock,toBlock,otherTopics,callback);
    }

    public void subscribeNewStatusEvent(EventCallback callback) {
        String topic0 = eventEncoder.encode(NEWSTATUS_EVENT);
        subscribeEvent(ABI,BINARY,topic0,callback);
    }

    public static BatteryContract load(String contractAddress, Client client, CryptoKeyPair credential) {
        return new BatteryContract(contractAddress, client, credential);
    }

    public static BatteryContract deploy(Client client, CryptoKeyPair credential, String id, String batchNo, String info) throws ContractException {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new Utf8String(id),
                new Utf8String(batchNo),
                new Utf8String(info)));
        return deploy(BatteryContract.class, client, credential, getBinary(client.getCryptoSuite()), encodedConstructor);
    }

    public static class Struct0 extends DynamicStruct {
        public String addr;

        public BigInteger status;

        public BigInteger timestamp;

        public String remark;

        public Struct0(Address addr, Int16 status, Uint256 timestamp, Utf8String remark) {
            super(addr,status,timestamp,remark);
            this.addr = addr.getValue();
            this.status = status.getValue();
            this.timestamp = timestamp.getValue();
            this.remark = remark.getValue();
        }

        public Struct0(String addr, BigInteger status, BigInteger timestamp, String remark) {
            super(new Address(addr),new Int16(status),new Uint256(timestamp),new Utf8String(remark));
            this.addr = addr;
            this.status = status;
            this.timestamp = timestamp;
            this.remark = remark;
        }
    }

    public static class NewStatusEventResponse {
        public TransactionReceipt.Logs log;

        public String addr;

        public BigInteger status;

        public BigInteger timestamp;

        public String remark;
    }
}
