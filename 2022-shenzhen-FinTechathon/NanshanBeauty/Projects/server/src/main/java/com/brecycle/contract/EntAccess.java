package com.brecycle.contract;

import java.math.BigInteger;
import java.util.Arrays;
import java.util.List;
import org.fisco.bcos.sdk.abi.FunctionEncoder;
import org.fisco.bcos.sdk.abi.TypeReference;
import org.fisco.bcos.sdk.abi.datatypes.Address;
import org.fisco.bcos.sdk.abi.datatypes.Function;
import org.fisco.bcos.sdk.abi.datatypes.Type;
import org.fisco.bcos.sdk.abi.datatypes.Utf8String;
import org.fisco.bcos.sdk.abi.datatypes.generated.Uint256;
import org.fisco.bcos.sdk.abi.datatypes.generated.tuples.generated.Tuple5;
import org.fisco.bcos.sdk.client.Client;
import org.fisco.bcos.sdk.contract.Contract;
import org.fisco.bcos.sdk.crypto.CryptoSuite;
import org.fisco.bcos.sdk.crypto.keypair.CryptoKeyPair;
import org.fisco.bcos.sdk.model.CryptoType;
import org.fisco.bcos.sdk.transaction.model.exception.ContractException;

@SuppressWarnings("unchecked")
public class EntAccess extends Contract {
    public static final String[] BINARY_ARRAY = {"608060405234801561001057600080fd5b5060405161077d38038061077d83398101806040526100329190810190610247565b856000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508460019080519060200190610088929190610138565b50836002908051906020019061009f929190610138565b5082600390805190602001906100b6929190610138565b5081600490805190602001906100cd929190610138565b5080600590805190602001906100e4929190610138565b5033600660006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550426007819055505050505050506103f4565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061017957805160ff19168380011785556101a7565b828001600101855582156101a7579182015b828111156101a657825182559160200191906001019061018b565b5b5090506101b491906101b8565b5090565b6101da91905b808211156101d65760008160009055506001016101be565b5090565b90565b60006101e982516103a1565b905092915050565b600082601f830112151561020457600080fd5b815161021761021282610375565b610348565b9150808252602083016020830185838301111561023357600080fd5b61023e8382846103c1565b50505092915050565b60008060008060008060c0878903121561026057600080fd5b600061026e89828a016101dd565b965050602087015167ffffffffffffffff81111561028b57600080fd5b61029789828a016101f1565b955050604087015167ffffffffffffffff8111156102b457600080fd5b6102c089828a016101f1565b945050606087015167ffffffffffffffff8111156102dd57600080fd5b6102e989828a016101f1565b935050608087015167ffffffffffffffff81111561030657600080fd5b61031289828a016101f1565b92505060a087015167ffffffffffffffff81111561032f57600080fd5b61033b89828a016101f1565b9150509295509295509295565b6000604051905081810181811067ffffffffffffffff8211171561036b57600080fd5b8060405250919050565b600067ffffffffffffffff82111561038c57600080fd5b601f19601f8301169050602081019050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60005b838110156103df5780820151818401526020810190506103c4565b838111156103ee576000848401525b50505050565b61037a806104036000396000f300608060405260043610610041576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff168063ca735bc914610046575b600080fd5b34801561005257600080fd5b5061005b610075565b60405161006c959493929190610266565b60405180910390f35b60006060806000806000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1660016005600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600754838054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561015e5780601f106101335761010080835404028352916020019161015e565b820191906000526020600020905b81548152906001019060200180831161014157829003601f168201915b50505050509350828054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156101fa5780601f106101cf576101008083540402835291602001916101fa565b820191906000526020600020905b8154815290600101906020018083116101dd57829003601f168201915b50505050509250945094509450945094509091929394565b61021b816102d2565b82525050565b600061022c826102c7565b8084526102408160208601602086016102fc565b6102498161032f565b602085010191505092915050565b610260816102f2565b82525050565b600060a08201905061027b6000830188610212565b818103602083015261028d8187610221565b905081810360408301526102a18186610221565b90506102b06060830185610212565b6102bd6080830184610257565b9695505050505050565b600081519050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b60005b8381101561031a5780820151818401526020810190506102ff565b83811115610329576000848401525b50505050565b6000601f19601f83011690509190505600a265627a7a723058203d43a65c2aa4862eba5796220b70ee07336771f3602db0d48b5d0c5d989c777d6c6578706572696d656e74616cf50037"};

    public static final String BINARY = org.fisco.bcos.sdk.utils.StringUtils.joinAll("", BINARY_ARRAY);

    public static final String[] SM_BINARY_ARRAY = {"608060405234801561001057600080fd5b5060405161077d38038061077d83398101806040526100329190810190610247565b856000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508460019080519060200190610088929190610138565b50836002908051906020019061009f929190610138565b5082600390805190602001906100b6929190610138565b5081600490805190602001906100cd929190610138565b5080600590805190602001906100e4929190610138565b5033600660006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550426007819055505050505050506103f4565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061017957805160ff19168380011785556101a7565b828001600101855582156101a7579182015b828111156101a657825182559160200191906001019061018b565b5b5090506101b491906101b8565b5090565b6101da91905b808211156101d65760008160009055506001016101be565b5090565b90565b60006101e982516103a1565b905092915050565b600082601f830112151561020457600080fd5b815161021761021282610375565b610348565b9150808252602083016020830185838301111561023357600080fd5b61023e8382846103c1565b50505092915050565b60008060008060008060c0878903121561026057600080fd5b600061026e89828a016101dd565b965050602087015167ffffffffffffffff81111561028b57600080fd5b61029789828a016101f1565b955050604087015167ffffffffffffffff8111156102b457600080fd5b6102c089828a016101f1565b945050606087015167ffffffffffffffff8111156102dd57600080fd5b6102e989828a016101f1565b935050608087015167ffffffffffffffff81111561030657600080fd5b61031289828a016101f1565b92505060a087015167ffffffffffffffff81111561032f57600080fd5b61033b89828a016101f1565b9150509295509295509295565b6000604051905081810181811067ffffffffffffffff8211171561036b57600080fd5b8060405250919050565b600067ffffffffffffffff82111561038c57600080fd5b601f19601f8301169050602081019050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60005b838110156103df5780820151818401526020810190506103c4565b838111156103ee576000848401525b50505050565b61037a806104036000396000f300608060405260043610610041576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff1680639d3fd24914610046575b600080fd5b34801561005257600080fd5b5061005b610075565b60405161006c959493929190610266565b60405180910390f35b60006060806000806000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1660016005600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600754838054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561015e5780601f106101335761010080835404028352916020019161015e565b820191906000526020600020905b81548152906001019060200180831161014157829003601f168201915b50505050509350828054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156101fa5780601f106101cf576101008083540402835291602001916101fa565b820191906000526020600020905b8154815290600101906020018083116101dd57829003601f168201915b50505050509250945094509450945094509091929394565b61021b816102d2565b82525050565b600061022c826102c7565b8084526102408160208601602086016102fc565b6102498161032f565b602085010191505092915050565b610260816102f2565b82525050565b600060a08201905061027b6000830188610212565b818103602083015261028d8187610221565b905081810360408301526102a18186610221565b90506102b06060830185610212565b6102bd6080830184610257565b9695505050505050565b600081519050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b60005b8381101561031a5780820151818401526020810190506102ff565b83811115610329576000848401525b50505050565b6000601f19601f83011690509190505600a265627a7a723058203df16df27cbb83c5d73943b451cf112671988b9deaca5dbbcef1e0366ffbdc326c6578706572696d656e74616cf50037"};

    public static final String SM_BINARY = org.fisco.bcos.sdk.utils.StringUtils.joinAll("", SM_BINARY_ARRAY);

    public static final String[] ABI_ARRAY = {"[{\"constant\":true,\"inputs\":[],\"name\":\"getAccessInfo\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"string\"},{\"name\":\"\",\"type\":\"string\"},{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"entAddr\",\"type\":\"address\"},{\"name\":\"name\",\"type\":\"string\"},{\"name\":\"idno\",\"type\":\"string\"},{\"name\":\"mobile\",\"type\":\"string\"},{\"name\":\"addr\",\"type\":\"string\"},{\"name\":\"remark\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"}]"};

    public static final String ABI = org.fisco.bcos.sdk.utils.StringUtils.joinAll("", ABI_ARRAY);

    public static final String FUNC_GETACCESSINFO = "getAccessInfo";

    protected EntAccess(String contractAddress, Client client, CryptoKeyPair credential) {
        super(getBinary(client.getCryptoSuite()), contractAddress, client, credential);
    }

    public static String getBinary(CryptoSuite cryptoSuite) {
        return (cryptoSuite.getCryptoTypeConfig() == CryptoType.ECDSA_TYPE ? BINARY : SM_BINARY);
    }

    public Tuple5<String, String, String, String, BigInteger> getAccessInfo() throws ContractException {
        final Function function = new Function(FUNC_GETACCESSINFO, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Address>() {}, new TypeReference<Uint256>() {}));
        List<Type> results = executeCallWithMultipleValueReturn(function);
        return new Tuple5<String, String, String, String, BigInteger>(
                (String) results.get(0).getValue(), 
                (String) results.get(1).getValue(), 
                (String) results.get(2).getValue(), 
                (String) results.get(3).getValue(), 
                (BigInteger) results.get(4).getValue());
    }

    public static EntAccess load(String contractAddress, Client client, CryptoKeyPair credential) {
        return new EntAccess(contractAddress, client, credential);
    }

    public static EntAccess deploy(Client client, CryptoKeyPair credential, String entAddr, String name, String idno, String mobile, String addr, String remark) throws ContractException {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new Address(entAddr),
                new Utf8String(name),
                new Utf8String(idno),
                new Utf8String(mobile),
                new Utf8String(addr),
                new Utf8String(remark)));
        return deploy(EntAccess.class, client, credential, getBinary(client.getCryptoSuite()), encodedConstructor);
    }
}
