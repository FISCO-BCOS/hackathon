package com.brecycle.contract;

import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import org.fisco.bcos.sdk.abi.FunctionReturnDecoder;
import org.fisco.bcos.sdk.abi.TypeReference;
import org.fisco.bcos.sdk.abi.datatypes.Address;
import org.fisco.bcos.sdk.abi.datatypes.Bool;
import org.fisco.bcos.sdk.abi.datatypes.DynamicArray;
import org.fisco.bcos.sdk.abi.datatypes.DynamicStruct;
import org.fisco.bcos.sdk.abi.datatypes.Event;
import org.fisco.bcos.sdk.abi.datatypes.Function;
import org.fisco.bcos.sdk.abi.datatypes.Type;
import org.fisco.bcos.sdk.abi.datatypes.Utf8String;
import org.fisco.bcos.sdk.abi.datatypes.generated.Uint256;
import org.fisco.bcos.sdk.abi.datatypes.generated.tuples.generated.Tuple1;
import org.fisco.bcos.sdk.abi.datatypes.generated.tuples.generated.Tuple2;
import org.fisco.bcos.sdk.client.Client;
import org.fisco.bcos.sdk.contract.Contract;
import org.fisco.bcos.sdk.crypto.CryptoSuite;
import org.fisco.bcos.sdk.crypto.keypair.CryptoKeyPair;
import org.fisco.bcos.sdk.eventsub.EventCallback;
import org.fisco.bcos.sdk.model.CryptoType;
import org.fisco.bcos.sdk.model.TransactionReceipt;
import org.fisco.bcos.sdk.model.callback.TransactionCallback;
import org.fisco.bcos.sdk.transaction.model.exception.ContractException;

@SuppressWarnings("unchecked")
public class PointController extends Contract {
    public static final String[] BINARY_ARRAY = {"","2060a0604051908101604052803373ffffffffffffffffffffffffffffffffffffffff1681526020014281526020018481526020018381526020016040805190810160405280600f81526020017fe7a7afe58886e5889de5a78be58c9600000000000000000000000000000000008152508152509080600181540180825580915050906001820390600052602060002090600502016000909192909190915060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506020820151816001015560408201518160020155606082015181600301556080820151816004019080519060200190611006929190612db9565b5050505050505050505050565b600080600080600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166350435fa4336040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401611090919061328a565b602060405180830381600087803b1580156110aa57600080fd5b505af11580156110be573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506110e29190810190612f13565b1515611123576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161111a906133d4565b60405180910390fd5b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663beabacc83388886040518463ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040161119d939291906132a5565b608060405180830381600087803b1580156111b757600080fd5b505af11580156111cb573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506111ef9190810190613006565b809450819550829650839750505050507feaf1c4b3ce0f4f62a2bae7eb3e68225c75f7e6ff4422073b7437b9a78d25f170338787604051611232939291906132a5565b60405180910390a1600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060a0604051908101604052803373ffffffffffffffffffffffffffffffffffffffff1681526020014281526020018681526020018481526020016040805190810160405280600981526020017f44414fe6b4bee58f9100000000000000000000000000000000000000000000008152508152509080600181540180825580915050906001820390600052602060002090600502016000909192909190915060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506020820151816001015560408201518160020155606082015181600301556080820151816004019080519060200190611398929190612db9565b50505050600260008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060a0604051908101604052808873ffffffffffffffffffffffffffffffffffffffff1681526020014281526020018581526020018381526020016040805190810160405280600981526020017f44414fe6b4bee58f9100000000000000000000000000000000000000000000008152508152509080600181540180825580915050906001820390600052602060002090600502016000909192909190915060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060208201518160010155604082015181600201556060820151816003015560808201518160040190805190602001906114fa929190612db9565b50505050505050505050565b6000806000806000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663beabacc83388886040518463ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401611586939291906132a5565b608060405180830381600087803b1580156115a057600080fd5b505af11580156115b4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506115d89190810190613006565b809450819550829650839750505050507feaf1c4b3ce0f4f62a2bae7eb3e68225c75f7e6ff4422073b7437b9a78d25f17033878760405161161b939291906132a5565b60405180910390a1600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060a0604051908101604052803373ffffffffffffffffffffffffffffffffffffffff1681526020014281526020018681526020018481526020016040805190810160405280600c81526020017fe699aee9809ae4baa4e6989300000000000000000000000000000000000000008152508152509080600181540180825580915050906001820390600052602060002090600502016000909192909190915060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506020820151816001015560408201518160020155606082015181600301556080820151816004019080519060200190611781929190612db9565b50505050600260008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060a0604051908101604052803373ffffffffffffffffffffffffffffffffffffffff1681526020014281526020018581526020018381526020016040805190810160405280600c81526020017fe699aee9809ae4baa4e6989300000000000000000000000000000000000000008152508152509080600181540180825580915050906001820390600052602060002090600502016000909192909190915060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060208201518160010155604082015181600201556060820151816003015560808201518160040190805190602001906118e3929190612db9565b50505050505050505050565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166350435fa4336040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401611968919061328a565b602060405180830381600087803b15801561198257600080fd5b505af1158015611996573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506119ba9190810190612f13565b15156119fb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016119f2906133d4565b60405180910390fd5b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663b8b66fce6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b158015611a8057600080fd5b505af1158015611a94573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250611ab89190810190612f65565b905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663c8e40fbf836040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401611b35919061328a565b602060405180830381600087803b158015611b4f57600080fd5b505af1158015611b63573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250611b879190810190612f13565b9050919050565b6000806000806000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663beabacc83388886040518463ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401611c0e939291906132a5565b608060405180830381600087803b158015611c2857600080fd5b505af1158015611c3c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250611c609190810190613006565b809450819550829650839750505050507feaf1c4b3ce0f4f62a2bae7eb3e68225c75f7e6ff4422073b7437b9a78d25f170338787604051611ca3939291906132a5565b60405180910390a1600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060a0604051908101604052803373ffffffffffffffffffffffffffffffffffffffff1681526020014281526020018681526020018481526020016040805190810160405280600c81526020017fe7a7afe58886e7bcb4e7bab300000000000000000000000000000000000000008152508152509080600181540180825580915050906001820390600052602060002090600502016000909192909190915060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506020820151816001015560408201518160020155606082015181600301556080820151816004019080519060200190611e09929190612db9565b50505050600260008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060a0604051908101604052808873ffffffffffffffffffffffffffffffffffffffff1681526020014281526020018581526020018381526020016040805190810160405280600c81526020017fe7a7afe58886e7bcb4e7bab30000000000000000000000000000000000000000815250815250908060018154018082558091505090600182039060005260206000209060050201600090919290","9190915060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506020820151816001015560408201518160020155606082015181600301556080820151816004019080519060200190611f6b929190612db9565b50505050505050505050565b6000806000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16632df3846033856040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401611ff292919061332e565b6040805180830381600087803b15801561200b57600080fd5b505af115801561201f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506120439190810190612fca565b80925081935050507f8d2ce1e585c88aa5e78b5b088fd124e7854382b90c9ce175f02d5e6502d75212338460405161207c92919061332e565b60405180910390a1600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060a0604051908101604052803373ffffffffffffffffffffffffffffffffffffffff1681526020014281526020018481526020018381526020016040805190810160405280601281526020017fe4baa4e69893e7a7afe58886e8a7a3e586bb00000000000000000000000000008152508152509080600181540180825580915050906001820390600052602060002090600502016000909192909190915060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060208201518160010155604082015181600201556060820151816003015560808201518160040190805190602001906121e2929190612db9565b50505050505050565b6000806000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166324bce60c33856040518363ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040161226692919061332e565b6040805180830381600087803b15801561227f57600080fd5b505af1158015612293573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506122b79190810190612fca565b80925081935050507f4ca855e5511491abf6c126c0c70d6f13157f4486a3ef3483010f183375cecd2333846040516122f092919061332e565b60405180910390a1600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060a0604051908101604052803373ffffffffffffffffffffffffffffffffffffffff1681526020014281526020018481526020018381526020016040805190810160405280601281526020017fe4baa4e69893e7a7afe58886e586bbe7bb9300000000000000000000000000008152508152509080600181540180825580915050906001820390600052602060002090600502016000909192909190915060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506020820151816001015560408201518160020155606082015181600301556080820151816004019080519060200190612456929190612db9565b50505050505050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663d82a6e06826040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016124d6919061328a565b600060405180830381600087803b1580156124f057600080fd5b505af1158015612504573d6000803e3d6000fd5b505050506000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663e5c96aa48260016040518363ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016125819291906132dc565b602060405180830381600087803b15801561259b57600080fd5b505af11580156125af573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506125d39190810190612f13565b506000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663c79642578260006040518363ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040161264d929190613305565b602060405180830381600087803b15801561266757600080fd5b505af115801561267b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061269f9190810190612f13565b5050565b6000806000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663bdee97143386866040518463ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401612720939291906132a5565b6040805180830381600087803b15801561273957600080fd5b505af115801561274d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506127719190810190612fca565b80925081935050507feaf1c4b3ce0f4f62a2bae7eb3e68225c75f7e6ff4422073b7437b9a78d25f1703385856040516127ac939291906132a5565b60405180910390a1600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060a0604051908101604052803373ffffffffffffffffffffffffffffffffffffffff1681526020014281526020018481526020018381526020016040805190810160405280601281526020017fe4baa4e69893e7a7afe58886e8bdace7a7bb00000000000000000000000000008152508152509080600181540180825580915050906001820390600052602060002090600502016000909192909190915060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506020820151816001015560408201518160020155606082015181600301556080820151816004019080519060200190612912929190612db9565b5050505050505050565b6060600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020805480602002602001604051908101604052809291908181526020016000905b82821015612ac6578382906000526020600020906005020160a060405190810160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600182015481526020016002820154815260200160038201548152602001600482018054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015612aae5780601f10612a8357610100808354040283529160200191612aae565b820191906000526020600020905b815481529060010190602001808311612a9157829003601f168201915b5050505050815250508152602001906001019061297d565b505050509050919050565b600115156000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663c8e40fbf336040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401612b4b919061328a565b602060405180830381600087803b158015612b6557600080fd5b505af1158015612b79573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250612b9d9190810190612f13565b1515148015612c73575060008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16634ff531b6336040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401612c1f919061328a565b602060405180830381600087803b158015612c3957600080fd5b505af1158015612c4d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250612c719190810190612f65565b145b1515612cb4576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612cab90613394565b60405180910390fd5b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663e5c96aa43360006040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401612d2d9291906132dc565b602060405180830381600087803b158015612d4757600080fd5b505af1158015612d5b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250612d7f9190810190612f13565b507f11854d1b3c0aa24c7c879af700c0089a48a48e9280bac11f5370b90b7cca481c33604051612daf919061328a565b60405180910390a1565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10612dfa57805160ff1916838001178555612e28565b82800160010185558215612e28579182015b82811115612e27578251825591602001919060010190612e0c565b5b509050612e359190612e39565b5090565b612e5b91905b80821115612e57576000816000905550600101612e3f565b5090565b90565b6000612e6a8235613475565b905092915050565b6000612e7e8251613495565b905092915050565b6000612e9282356134a1565b905092915050565b6000612ea682516134a1565b905092915050565b600060208284031215612ec057600080fd5b6000612ece84828501612e5e565b91505092915050565b60008060408385031215612eea5760","0080fd5b6000612ef885828601612e5e565b9250506020612f0985828601612e86565b9150509250929050565b600060208284031215612f2557600080fd5b6000612f3384828501612e72565b91505092915050565b600060208284031215612f4e57600080fd5b6000612f5c84828501612e86565b91505092915050565b600060208284031215612f7757600080fd5b6000612f8584828501612e9a565b91505092915050565b60008060408385031215612fa157600080fd5b6000612faf85828601612e86565b9250506020612fc085828601612e86565b9150509250929050565b60008060408385031215612fdd57600080fd5b6000612feb85828601612e9a565b9250506020612ffc85828601612e9a565b9150509250929050565b6000806000806080858703121561301c57600080fd5b600061302a87828801612e9a565b945050602061303b87828801612e9a565b935050604061304c87828801612e9a565b925050606061305d87828801612e9a565b91505092959194509250565b6130728161343f565b82525050565b60006130838261341c565b8084526020840193508360208202850161309c8561340f565b60005b848110156130d55783830388526130b7838351613205565b92506130c282613432565b915060208801975060018101905061309f565b508196508694505050505092915050565b6130ef8161345f565b82525050565b6130fe816134ab565b82525050565b600061310f82613427565b8084526131238160208601602086016134bd565b61312c816134f0565b602085010191505092915050565b6000601182527f43616e277420756e7265676973746572210000000000000000000000000000006020830152604082019050919050565b6000601882527f4163636f756e7420616c726561647920657869737465642100000000000000006020830152604082019050919050565b6000603082527f497373756572526f6c653a2063616c6c657220646f6573206e6f74206861766560208301527f207468652049737375657220726f6c65000000000000000000000000000000006040830152606082019050919050565b600060a08301600083015161321d6000860182613069565b506020830151613230602086018261327b565b506040830151613243604086018261327b565b506060830151613256606086018261327b565b506080830151848203608086015261326e8282613104565b9150508091505092915050565b6132848161346b565b82525050565b600060208201905061329f6000830184613069565b92915050565b60006060820190506132ba6000830186613069565b6132c76020830185613069565b6132d4604083018461327b565b949350505050565b60006040820190506132f16000830185613069565b6132fe60208301846130e6565b9392505050565b600060408201905061331a6000830185613069565b61332760208301846130f5565b9392505050565b60006040820190506133436000830185613069565b613350602083018461327b565b9392505050565b600060208201905081810360008301526133718184613078565b905092915050565b600060208201905061338e60008301846130e6565b92915050565b600060208201905081810360008301526133ad8161313a565b9050919050565b600060208201905081810360008301526133cd81613171565b9050919050565b600060208201905081810360008301526133ed816131a8565b9050919050565b6000602082019050613409600083018461327b565b92915050565b6000602082019050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60008115159050919050565b6000819050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60008115159050919050565b6000819050919050565b60006134b68261346b565b9050919050565b60005b838110156134db5780820151818401526020810190506134c0565b838111156134ea576000848401525b50505050565b6000601f19601f83011690509190505600a265627a7a72305820c8a6c259b6b31d113654fd1cac2788697b43c0c3182e1892d35cc986b93422f46c6578706572696d656e74616cf500376080604052336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506113a3806100536000396000f3006080604052600436106100fc576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff1680630f49987a1461010157806313af40351461012c57806315247f9f1461016f57806324bce60c1461019a5780632df38460146102025780634a8070ab1461026a5780634ff531b6146102af5780635fb2025d146103065780637b510fe81461034b578063b2bdfa7b146103ad578063b8b66fce14610404578063bdee97141461042f578063beabacc8146104b7578063c79642571461054d578063c8e40fbf146105b2578063cb23607d1461060d578063cd5d211814610638578063e5c96aa414610693575b600080fd5b34801561010d57600080fd5b506101166106fa565b6040518082815260200191505060405180910390f35b34801561013857600080fd5b5061016d600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610704565b005b34801561017b57600080fd5b506101846107c4565b6040518082815260200191505060405180910390f35b3480156101a657600080fd5b506101e5600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291905050506107ca565b604051808381526020018281526020019250505060405180910390f35b34801561020e57600080fd5b5061024d600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019092919050505061094b565b604051808381526020018281526020019250505060405180910390f35b34801561027657600080fd5b5061029560048036038101908080359060200190929190505050610acc565b604051808215151515815260200191505060405180910390f35b3480156102bb57600080fd5b506102f0600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610ade565b6040518082815260200191505060405180910390f35b34801561031257600080fd5b5061033160048036038101908080359060200190929190505050610b27565b604051808215151515815260200191505060405180910390f35b34801561035757600080fd5b5061038c600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610b39565b60405180831515151581526020018281526020019250505060405180910390f35b3480156103b957600080fd5b506103c2610bd2565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561041057600080fd5b50610419610bf7565b6040518082815260200191505060405180910390f35b34801561043b57600080fd5b5061049a600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610c01565b604051808381526020018281526020019250505060405180910390f35b3480156104c357600080fd5b50610522600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610d83565b6040518085815260200184815260200183815260200182815260200194505050505060405180910390f35b34801561055957600080fd5b50610598600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291905050506111c1565b604051808215151515815260200191505060405180910390f35b3480156105be57600080fd5b506105f3600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611211565b604051808215151515815260200191505060405180910390f35b34801561061957600080fd5b50610622611267565b6040518082815260200191505060405180910390f35b34801561064457600080fd5b50610679600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061126d565b604051808215151515815260200191505060405180910390f35b34801561069f57600080fd5b506106e0600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803515159060200190929190505050611314565b604051808215151515815260200191505060405180910390f35b6000600454905090565b61070d3361126d565b1515610781576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600b8152602001807f4f6e6c79206f776e65722100000000000000000000000000000000000000000081525060200191505060405180910390fd5b806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b60055481565b60008060008084600160008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541015151561081e57600080fd5b600160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054915084600260008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254019250508190555084600160008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282540392505081905550600160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905081819350935050509250929050565b60008060008084600260008873","","65627a7a72305820e1938d936374898a75b797ebe9181bbf8290e4e2186fdb460b0bdd0cafa409820029"};

    public static final String BINARY = org.fisco.bcos.sdk.utils.StringUtils.joinAll("", BINARY_ARRAY);

    public static final String[] SM_BINARY_ARRAY = {"60806040523480156200001157600080fd5b506200001c620000e7565b604051809103906000f08015801562000039573d6000803e3d6000fd5b506000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555062000083620000f8565b604051809103906000f080158015620000a0573d6000803e3d6000fd5b50600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555062000109565b6040516113f6806200365483390190565b6040516105e08062004a4a83390190565b61353b80620001196000396000f3006080604052600436106100db576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806310aa94c1146100e057806319bf23931461011d5780631dc220ce1461014657806350282c611461018357806353a98f6c146101ac578063669dfcbd146101d75780636904e965146101ee5780638e4fba871461021757806396b90e5014610240578063a06a3d7e14610269578063a36e1c4914610294578063a63364fc146102d1578063a94759d8146102fa578063e5ab4caf14610311578063f28049891461033a575b600080fd5b3480156100ec57600080fd5b5061010760048036036101029190810190612eae565b610363565b6040516101149190613379565b60405180910390f35b34801561012957600080fd5b50610144600480360361013f9190810190612f3c565b610434565b005b34801561015257600080fd5b5061016d60048036036101689190810190612eae565b6106a8565b60405161017a91906133f4565b60405180910390f35b34801561018f57600080fd5b506101aa60048036036101a59190810190612f3c565b610779565b005b3480156101b857600080fd5b506101c16109ed565b6040516101ce91906133f4565b60405180910390f35b3480156101e357600080fd5b506101ec610bbb565b005b3480156101fa57600080fd5b5061021560048036036102109190810190612ed7565b610e9c565b005b34801561022357600080fd5b5061023e60048036036102399190810190612ed7565b611285565b005b34801561024c57600080fd5b5061026760048036036102629190810190612f8e565b61166e565b005b34801561027557600080fd5b5061027e611d9e565b60405161028b91906133f4565b60405180910390f35b3480156102a057600080fd5b506102bb60048036036102b69190810190612eae565b611f6c565b6040516102c89190613357565b60405180910390f35b3480156102dd57600080fd5b506102f860048036036102f39190810190612ed7565b612121565b005b34801561030657600080fd5b5061030f61239a565b005b34801561031d57600080fd5b5061033860048036036103339190810190612eae565b612682565b005b34801561034657600080fd5b50610361600480360361035c9190810190612ed7565b6128c6565b005b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16639e4ad09b836040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016103db919061328a565b602060405180830381600087803b1580156103f557600080fd5b505af1158015610409573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061042d9190810190612f13565b9050919050565b6000806000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16632d5ad05033856040518363ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016104af92919061332e565b6040805180830381600087803b1580156104c857600080fd5b505af11580156104dc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506105009190810190612fca565b80925081935050507fda00006861e5aa2dcbcef62c61da1730bc2a407dce005b464ace6d4086bb965d338460405161053992919061332e565b60405180910390a1600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060a0604051908101604052803373ffffffffffffffffffffffffffffffffffffffff1681526020014281526020018481526020018381526020016040805190810160405280601281526020017fe4baa4e69893e7a7afe58886e8a7a3e586bb00000000000000000000000000008152508152509080600181540180825580915050906001820390600052602060002090600502016000909192909190915060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550602082015181600101556040820151816002015560608201518160030155608082015181600401908051906020019061069f929190612db9565b50505050505050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16631dc220ce836040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401610720919061328a565b602060405180830381600087803b15801561073a57600080fd5b505af115801561074e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506107729190810190612f65565b9050919050565b6000806000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166336d153cb33856040518363ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016107f492919061332e565b6040805180830381600087803b15801561080d57600080fd5b505af1158015610821573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506108459190810190612fca565b80925081935050507f5011f8ae3387656ee780ddb8cb003f558f1a29ed96ddd300a5c9b6201569036c338460405161087e92919061332e565b60405180910390a1600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060a0604051908101604052803373ffffffffffffffffffffffffffffffffffffffff1681526020014281526020018481526020018381526020016040805190810160405280601281526020017fe4baa4e69893e7a7afe58886e586bbe7bb9300000000000000000000000000008152508152509080600181540180825580915050906001820390600052602060002090600502016000909192909190915060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060208201518160010155604082015181600201556060820151816003015560808201518160040190805190602001906109e4929190612db9565b50505050505050565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166309f75500336040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401610a66919061328a565b602060405180830381600087803b158015610a8057600080fd5b505af1158015610a94573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250610ab89190810190612f13565b1515610af9576040517fc703cb12000000000000000000000000000000000000000000000000000000008152600401610af0906133d4565b60405180910390fd5b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166353a98f6c6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b158015610b7e57600080fd5b505af1158015610b92573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250610bb69190810190612f65565b905090565b600015156000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16639e4ad09b336040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401610c35919061328a565b602060405180830381600087803b158015610c4f57600080fd5b505af1158015610c63573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250610c879190810190612f13565b1515141515610ccb576040517fc703cb12000000000000000000000000000000000000000000000000000000008152600401610cc2906133b4565b60405180910390fd5b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166354ca8d093360016040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401610d449291906132dc565b602060405180830381600087803b158015610d5e57600080fd5b505af1158015610d72573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250610d969190810190612f13565b506000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663d724f0b83360006040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401610e10929190613305565b602060405180830381600087803b158015610e2a57600080fd5b505af1158015610e3e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250610e629190810190612f13565b507ff05d133a1414b420c163205e98293656fca18d03a4fec96bc01bfb66b55223c433604051610e92919061328a565b60405180910390a1565b6000806000806000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663e308a88633888860405184","63ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401610f1c939291906132a5565b608060405180830381600087803b158015610f3657600080fd5b505af1158015610f4a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250610f6e9190810190613006565b809450819550829650839750505050507ff22ffe68436c98473338b75a4de5a7629d386488f6779f0e2693c9bdde2e3fbf338787604051610fb1939291906132a5565b60405180910390a1600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060a0604051908101604052803373ffffffffffffffffffffffffffffffffffffffff1681526020014281526020018681526020018481526020016040805190810160405280600c81526020017fe699aee9809ae4baa4e6989300000000000000000000000000000000000000008152508152509080600181540180825580915050906001820390600052602060002090600502016000909192909190915060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506020820151816001015560408201518160020155606082015181600301556080820151816004019080519060200190611117929190612db9565b50505050600260008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060a0604051908101604052803373ffffffffffffffffffffffffffffffffffffffff1681526020014281526020018581526020018381526020016040805190810160405280600c81526020017fe699aee9809ae4baa4e6989300000000000000000000000000000000000000008152508152509080600181540180825580915050906001820390600052602060002090600502016000909192909190915060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506020820151816001015560408201518160020155606082015181600301556080820151816004019080519060200190611279929190612db9565b50505050505050505050565b6000806000806000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663e308a8863388886040518463ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401611305939291906132a5565b608060405180830381600087803b15801561131f57600080fd5b505af1158015611333573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506113579190810190613006565b809450819550829650839750505050507ff22ffe68436c98473338b75a4de5a7629d386488f6779f0e2693c9bdde2e3fbf33878760405161139a939291906132a5565b60405180910390a1600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060a0604051908101604052803373ffffffffffffffffffffffffffffffffffffffff1681526020014281526020018681526020018481526020016040805190810160405280600c81526020017fe7a7afe58886e7bcb4e7bab300000000000000000000000000000000000000008152508152509080600181540180825580915050906001820390600052602060002090600502016000909192909190915060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506020820151816001015560408201518160020155606082015181600301556080820151816004019080519060200190611500929190612db9565b50505050600260008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060a0604051908101604052808873ffffffffffffffffffffffffffffffffffffffff1681526020014281526020018581526020018381526020016040805190810160405280600c81526020017fe7a7afe58886e7bcb4e7bab300000000000000000000000000000000000000008152508152509080600181540180825580915050906001820390600052602060002090600502016000909192909190915060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506020820151816001015560408201518160020155606082015181600301556080820151816004019080519060200190611662929190612db9565b50505050505050505050565b6000806000806000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166309f75500336040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016116ed919061328a565b602060405180830381600087803b15801561170757600080fd5b505af115801561171b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061173f9190810190612f13565b1515611780576040517fc703cb12000000000000000000000000000000000000000000000000000000008152600401611777906133d4565b60405180910390fd5b866000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a06a3d7e6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b15801561180657600080fd5b505af115801561181a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061183e9190810190612f65565b019450856000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166353a98f6c6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b1580156118c757600080fd5b505af11580156118db573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506118ff9190810190612f65565b0193506000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166374ea8129866040518263ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040161197891906133f4565b602060405180830381600087803b15801561199257600080fd5b505af11580156119a6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506119ca9190810190612f13565b506000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663df274b3f856040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401611a4191906133f4565b602060405180830381600087803b158015611a5b57600080fd5b505af1158015611a6f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250611a939190810190612f13565b5083850192506000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16631dc220ce336040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401611b0f919061328a565b602060405180830381600087803b158015611b2957600080fd5b505af1158015611b3d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250611b619190810190612f65565b915081830190506000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663d724f0b833836040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401611be092919061332e565b602060405180830381600087803b158015611bfa57600080fd5b505af1158015611c0e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250611c329190810190612f13565b50600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060a0604051908101604052803373ffffffffffffffffffffffffffffffffffffffff1681526020014281526020018481526020018381526020016040805190810160405280600f81526020017fe7a7afe58886e5889de5a78be58c9600000000000000000000000000000000008152508152509080600181540180825580915050906001820390600052602060002090600502016000909192909190915060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506020820151816001015560408201518160020155606082015181600301556080820151816004019080519060200190611d91929190612db9565b5050505050505050505050565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166309f75500336040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401611e17919061328a565b602060405180830381600087803b158015611e3157600080fd5b505af1158015611e45573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250611e699190810190612f13565b1515611eaa576040517fc703cb12000000000000000000000000000000000000000000000000000000008152600401611ea1906133d4565b60405180910390fd5b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a06a3d","7e6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b158015611f2f57600080fd5b505af1158015611f43573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250611f679190810190612f65565b905090565b6060600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020805480602002602001604051908101604052809291908181526020016000905b82821015612116578382906000526020600020906005020160a060405190810160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600182015481526020016002820154815260200160038201548152602001600482018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156120fe5780601f106120d3576101008083540402835291602001916120fe565b820191906000526020600020905b8154815290600101906020018083116120e157829003601f168201915b50505050508152505081526020019060010190611fcd565b505050509050919050565b6000806000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166393de4bc53386866040518463ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040161219e939291906132a5565b6040805180830381600087803b1580156121b757600080fd5b505af11580156121cb573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506121ef9190810190612fca565b80925081935050507ff22ffe68436c98473338b75a4de5a7629d386488f6779f0e2693c9bdde2e3fbf33858560405161222a939291906132a5565b60405180910390a1600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060a0604051908101604052803373ffffffffffffffffffffffffffffffffffffffff1681526020014281526020018481526020018381526020016040805190810160405280601281526020017fe4baa4e69893e7a7afe58886e8bdace7a7bb00000000000000000000000000008152508152509080600181540180825580915050906001820390600052602060002090600502016000909192909190915060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506020820151816001015560408201518160020155606082015181600301556080820151816004019080519060200190612390929190612db9565b5050505050505050565b600115156000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16639e4ad09b336040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401612414919061328a565b602060405180830381600087803b15801561242e57600080fd5b505af1158015612442573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506124669190810190612f13565b151514801561253c575060008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16631dc220ce336040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016124e8919061328a565b602060405180830381600087803b15801561250257600080fd5b505af1158015612516573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061253a9190810190612f65565b145b151561257d576040517fc703cb1200000000000000000000000000000000000000000000000000000000815260040161257490613394565b60405180910390fd5b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166354ca8d093360006040518363ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016125f69291906132dc565b602060405180830381600087803b15801561261057600080fd5b505af1158015612624573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506126489190810190612f13565b507f5c09faf59c132a0070456f24a4ef0783f381bc98d9151bc2797d8dfbb8f2d66633604051612678919061328a565b60405180910390a1565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663e5ab4caf826040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016126f9919061328a565b600060405180830381600087803b15801561271357600080fd5b505af1158015612727573d6000803e3d6000fd5b505050506000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166354ca8d098260016040518363ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016127a49291906132dc565b602060405180830381600087803b1580156127be57600080fd5b505af11580156127d2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506127f69190810190612f13565b506000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663d724f0b88260006040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401612870929190613305565b602060405180830381600087803b15801561288a57600080fd5b505af115801561289e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506128c29190810190612f13565b5050565b600080600080600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166309f75500336040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401612943919061328a565b602060405180830381600087803b15801561295d57600080fd5b505af1158015612971573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506129959190810190612f13565b15156129d6576040517fc703cb120000000000000000000000000000000000000000000000000000000081526004016129cd906133d4565b60405180910390fd5b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663e308a8863388886040518463ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401612a50939291906132a5565b608060405180830381600087803b158015612a6a57600080fd5b505af1158015612a7e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250612aa29190810190613006565b809450819550829650839750505050507ff22ffe68436c98473338b75a4de5a7629d386488f6779f0e2693c9bdde2e3fbf338787604051612ae5939291906132a5565b60405180910390a1600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060a0604051908101604052803373ffffffffffffffffffffffffffffffffffffffff1681526020014281526020018681526020018481526020016040805190810160405280600981526020017f44414fe6b4bee58f9100000000000000000000000000000000000000000000008152508152509080600181540180825580915050906001820390600052602060002090600502016000909192909190915060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506020820151816001015560408201518160020155606082015181600301556080820151816004019080519060200190612c4b929190612db9565b50505050600260008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060a0604051908101604052808873ffffffffffffffffffffffffffffffffffffffff1681526020014281526020018581526020018381526020016040805190810160405280600981526020017f44414fe6b4bee58f9100000000000000000000000000000000000000000000008152508152509080600181540180825580915050906001820390600052602060002090600502016000909192909190915060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506020820151816001015560408201518160020155606082015181600301556080820151816004019080519060200190612dad929190612db9565b50505050505050505050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10612dfa57805160ff1916838001178555612e28565b82800160010185558215612e28579182015b82811115612e27578251825591602001919060010190612e0c565b5b509050612e359190612e39565b5090565b612e5b91905b80821115612e57576000816000905550600101612e3f565b5090565b90565b6000612e6a8235613475565b905092915050565b6000612e7e8251613495565b905092915050565b6000612e9282356134a1565b905092915050565b6000612ea682516134a1565b905092915050565b600060208284031215612ec057600080fd5b6000612ece84828501612e5e565b91505092915050565b60008060408385031215612eea5760","","","65627a7a72305820783f2a7b74caffe9c78742479edf880d4a1847d67b320625ac00b876be0830fb0029"};

    public static final String SM_BINARY = org.fisco.bcos.sdk.utils.StringUtils.joinAll("", SM_BINARY_ARRAY);

    public static final String[] ABI_ARRAY = {"[{\"constant\":true,\"inputs\":[],\"name\":\"getTotalAmount2\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"register\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"getPoint\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"value1\",\"type\":\"uint256\"},{\"name\":\"value2\",\"type\":\"uint256\"}],\"name\":\"initPoint\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"point\",\"type\":\"uint256\"}],\"name\":\"daoTransfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"point\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getTotalAmount1\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"isRegistered\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"DAOaddr\",\"type\":\"address\"},{\"name\":\"point\",\"type\":\"uint256\"}],\"name\":\"pay\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"point\",\"type\":\"uint256\"}],\"name\":\"unFreeze\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"point\",\"type\":\"uint256\"}],\"name\":\"freeze\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"addDAO\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"point\",\"type\":\"uint256\"}],\"name\":\"unFreezeAndTransfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getPointLog\",\"outputs\":[{\"components\":[{\"name\":\"addr\",\"type\":\"address\"},{\"name\":\"timestamp\",\"type\":\"uint256\"},{\"name\":\"beforePoint\",\"type\":\"uint256\"},{\"name\":\"afterPoint\",\"type\":\"uint256\"},{\"name\":\"remark\",\"type\":\"string\"}],\"name\":\"_data\",\"type\":\"tuple[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unregister\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"account\",\"type\":\"address\"}],\"name\":\"LogRegister\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"account\",\"type\":\"address\"}],\"name\":\"LogUnregister\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amt\",\"type\":\"uint256\"}],\"name\":\"TransferEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amt\",\"type\":\"uint256\"}],\"name\":\"FreezeEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amt\",\"type\":\"uint256\"}],\"name\":\"UnFreezeEvent\",\"type\":\"event\"}]"};

    public static final String ABI = org.fisco.bcos.sdk.utils.StringUtils.joinAll("", ABI_ARRAY);

    public static final String FUNC_GETTOTALAMOUNT2 = "getTotalAmount2";

    public static final String FUNC_REGISTER = "register";

    public static final String FUNC_GETPOINT = "getPoint";

    public static final String FUNC_INITPOINT = "initPoint";

    public static final String FUNC_DAOTRANSFER = "daoTransfer";

    public static final String FUNC_TRANSFER = "transfer";

    public static final String FUNC_GETTOTALAMOUNT1 = "getTotalAmount1";

    public static final String FUNC_ISREGISTERED = "isRegistered";

    public static final String FUNC_PAY = "pay";

    public static final String FUNC_UNFREEZE = "unFreeze";

    public static final String FUNC_FREEZE = "freeze";

    public static final String FUNC_ADDDAO = "addDAO";

    public static final String FUNC_UNFREEZEANDTRANSFER = "unFreezeAndTransfer";

    public static final String FUNC_GETPOINTLOG = "getPointLog";

    public static final String FUNC_UNREGISTER = "unregister";

    public static final Event LOGREGISTER_EVENT = new Event("LogRegister", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
    ;

    public static final Event LOGUNREGISTER_EVENT = new Event("LogUnregister", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
    ;

    public static final Event TRANSFEREVENT_EVENT = new Event("TransferEvent", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Address>() {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event FREEZEEVENT_EVENT = new Event("FreezeEvent", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event UNFREEZEEVENT_EVENT = new Event("UnFreezeEvent", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Uint256>() {}));
    ;

    protected PointController(String contractAddress, Client client, CryptoKeyPair credential) {
        super(getBinary(client.getCryptoSuite()), contractAddress, client, credential);
    }

    public static String getBinary(CryptoSuite cryptoSuite) {
        return (cryptoSuite.getCryptoTypeConfig() == CryptoType.ECDSA_TYPE ? BINARY : SM_BINARY);
    }

    public BigInteger getTotalAmount2() throws ContractException {
        final Function function = new Function(FUNC_GETTOTALAMOUNT2, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeCallWithSingleValueReturn(function, BigInteger.class);
    }

    public TransactionReceipt register() {
        final Function function = new Function(
                FUNC_REGISTER, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] register(TransactionCallback callback) {
        final Function function = new Function(
                FUNC_REGISTER, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForRegister() {
        final Function function = new Function(
                FUNC_REGISTER, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public BigInteger getPoint(String addr) throws ContractException {
        final Function function = new Function(FUNC_GETPOINT, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(addr)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeCallWithSingleValueReturn(function, BigInteger.class);
    }

    public TransactionReceipt initPoint(BigInteger value1, BigInteger value2) {
        final Function function = new Function(
                FUNC_INITPOINT, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(value1), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(value2)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] initPoint(BigInteger value1, BigInteger value2, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_INITPOINT, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(value1), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(value2)), 
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForInitPoint(BigInteger value1, BigInteger value2) {
        final Function function = new Function(
                FUNC_INITPOINT, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(value1), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(value2)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple2<BigInteger, BigInteger> getInitPointInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_INITPOINT, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple2<BigInteger, BigInteger>(

                (BigInteger) results.get(0).getValue(), 
                (BigInteger) results.get(1).getValue()
                );
    }

    public TransactionReceipt daoTransfer(String to, BigInteger point) {
        final Function function = new Function(
                FUNC_DAOTRANSFER, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(to), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(point)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] daoTransfer(String to, BigInteger point, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_DAOTRANSFER, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(to), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(point)), 
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForDaoTransfer(String to, BigInteger point) {
        final Function function = new Function(
                FUNC_DAOTRANSFER, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(to), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(point)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple2<String, BigInteger> getDaoTransferInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_DAOTRANSFER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Uint256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple2<String, BigInteger>(

                (String) results.get(0).getValue(), 
                (BigInteger) results.get(1).getValue()
                );
    }

    public TransactionReceipt transfer(String to, BigInteger point) {
        final Function function = new Function(
                FUNC_TRANSFER, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(to), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(point)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] transfer(String to, BigInteger point, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_TRANSFER, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(to), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(point)), 
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForTransfer(String to, BigInteger point) {
        final Function function = new Function(
                FUNC_TRANSFER, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(to), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(point)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple2<String, BigInteger> getTransferInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_TRANSFER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Uint256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple2<String, BigInteger>(

                (String) results.get(0).getValue(), 
                (BigInteger) results.get(1).getValue()
                );
    }

    public BigInteger getTotalAmount1() throws ContractException {
        final Function function = new Function(FUNC_GETTOTALAMOUNT1, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeCallWithSingleValueReturn(function, BigInteger.class);
    }

    public Boolean isRegistered(String addr) throws ContractException {
        final Function function = new Function(FUNC_ISREGISTERED, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(addr)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeCallWithSingleValueReturn(function, Boolean.class);
    }

    public TransactionReceipt pay(String DAOaddr, BigInteger point) {
        final Function function = new Function(
                FUNC_PAY, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(DAOaddr), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(point)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] pay(String DAOaddr, BigInteger point, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_PAY, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(DAOaddr), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(point)), 
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForPay(String DAOaddr, BigInteger point) {
        final Function function = new Function(
                FUNC_PAY, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(DAOaddr), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(point)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple2<String, BigInteger> getPayInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_PAY, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Uint256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple2<String, BigInteger>(

                (String) results.get(0).getValue(), 
                (BigInteger) results.get(1).getValue()
                );
    }

    public TransactionReceipt unFreeze(BigInteger point) {
        final Function function = new Function(
                FUNC_UNFREEZE, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(point)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] unFreeze(BigInteger point, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_UNFREEZE, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(point)), 
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForUnFreeze(BigInteger point) {
        final Function function = new Function(
                FUNC_UNFREEZE, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(point)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple1<BigInteger> getUnFreezeInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_UNFREEZE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<BigInteger>(

                (BigInteger) results.get(0).getValue()
                );
    }

    public TransactionReceipt freeze(BigInteger point) {
        final Function function = new Function(
                FUNC_FREEZE, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(point)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] freeze(BigInteger point, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_FREEZE, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(point)), 
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForFreeze(BigInteger point) {
        final Function function = new Function(
                FUNC_FREEZE, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(point)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple1<BigInteger> getFreezeInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_FREEZE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<BigInteger>(

                (BigInteger) results.get(0).getValue()
                );
    }

    public TransactionReceipt addDAO(String account) {
        final Function function = new Function(
                FUNC_ADDDAO, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(account)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] addDAO(String account, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_ADDDAO, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(account)), 
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForAddDAO(String account) {
        final Function function = new Function(
                FUNC_ADDDAO, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(account)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple1<String> getAddDAOInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_ADDDAO, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<String>(

                (String) results.get(0).getValue()
                );
    }

    public TransactionReceipt unFreezeAndTransfer(String to, BigInteger point) {
        final Function function = new Function(
                FUNC_UNFREEZEANDTRANSFER, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(to), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(point)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] unFreezeAndTransfer(String to, BigInteger point, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_UNFREEZEANDTRANSFER, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(to), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(point)), 
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForUnFreezeAndTransfer(String to, BigInteger point) {
        final Function function = new Function(
                FUNC_UNFREEZEANDTRANSFER, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(to), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(point)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple2<String, BigInteger> getUnFreezeAndTransferInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_UNFREEZEANDTRANSFER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Uint256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple2<String, BigInteger>(

                (String) results.get(0).getValue(), 
                (BigInteger) results.get(1).getValue()
                );
    }

    public DynamicArray<Struct0> getPointLog(String account) throws ContractException {
        final Function function = new Function(FUNC_GETPOINTLOG, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(account)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Struct0>>() {}));
        return executeCallWithSingleValueReturn(function, DynamicArray.class);
    }

    public TransactionReceipt unregister() {
        final Function function = new Function(
                FUNC_UNREGISTER, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] unregister(TransactionCallback callback) {
        final Function function = new Function(
                FUNC_UNREGISTER, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForUnregister() {
        final Function function = new Function(
                FUNC_UNREGISTER, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public List<LogRegisterEventResponse> getLogRegisterEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(LOGREGISTER_EVENT, transactionReceipt);
        ArrayList<LogRegisterEventResponse> responses = new ArrayList<LogRegisterEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            LogRegisterEventResponse typedResponse = new LogRegisterEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.account = (String) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public void subscribeLogRegisterEvent(String fromBlock, String toBlock, List<String> otherTopics, EventCallback callback) {
        String topic0 = eventEncoder.encode(LOGREGISTER_EVENT);
        subscribeEvent(ABI,BINARY,topic0,fromBlock,toBlock,otherTopics,callback);
    }

    public void subscribeLogRegisterEvent(EventCallback callback) {
        String topic0 = eventEncoder.encode(LOGREGISTER_EVENT);
        subscribeEvent(ABI,BINARY,topic0,callback);
    }

    public List<LogUnregisterEventResponse> getLogUnregisterEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(LOGUNREGISTER_EVENT, transactionReceipt);
        ArrayList<LogUnregisterEventResponse> responses = new ArrayList<LogUnregisterEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            LogUnregisterEventResponse typedResponse = new LogUnregisterEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.account = (String) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public void subscribeLogUnregisterEvent(String fromBlock, String toBlock, List<String> otherTopics, EventCallback callback) {
        String topic0 = eventEncoder.encode(LOGUNREGISTER_EVENT);
        subscribeEvent(ABI,BINARY,topic0,fromBlock,toBlock,otherTopics,callback);
    }

    public void subscribeLogUnregisterEvent(EventCallback callback) {
        String topic0 = eventEncoder.encode(LOGUNREGISTER_EVENT);
        subscribeEvent(ABI,BINARY,topic0,callback);
    }

    public List<TransferEventEventResponse> getTransferEventEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(TRANSFEREVENT_EVENT, transactionReceipt);
        ArrayList<TransferEventEventResponse> responses = new ArrayList<TransferEventEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            TransferEventEventResponse typedResponse = new TransferEventEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.from = (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.to = (String) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.amt = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public void subscribeTransferEventEvent(String fromBlock, String toBlock, List<String> otherTopics, EventCallback callback) {
        String topic0 = eventEncoder.encode(TRANSFEREVENT_EVENT);
        subscribeEvent(ABI,BINARY,topic0,fromBlock,toBlock,otherTopics,callback);
    }

    public void subscribeTransferEventEvent(EventCallback callback) {
        String topic0 = eventEncoder.encode(TRANSFEREVENT_EVENT);
        subscribeEvent(ABI,BINARY,topic0,callback);
    }

    public List<FreezeEventEventResponse> getFreezeEventEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(FREEZEEVENT_EVENT, transactionReceipt);
        ArrayList<FreezeEventEventResponse> responses = new ArrayList<FreezeEventEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            FreezeEventEventResponse typedResponse = new FreezeEventEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.from = (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.amt = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public void subscribeFreezeEventEvent(String fromBlock, String toBlock, List<String> otherTopics, EventCallback callback) {
        String topic0 = eventEncoder.encode(FREEZEEVENT_EVENT);
        subscribeEvent(ABI,BINARY,topic0,fromBlock,toBlock,otherTopics,callback);
    }

    public void subscribeFreezeEventEvent(EventCallback callback) {
        String topic0 = eventEncoder.encode(FREEZEEVENT_EVENT);
        subscribeEvent(ABI,BINARY,topic0,callback);
    }

    public List<UnFreezeEventEventResponse> getUnFreezeEventEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(UNFREEZEEVENT_EVENT, transactionReceipt);
        ArrayList<UnFreezeEventEventResponse> responses = new ArrayList<UnFreezeEventEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            UnFreezeEventEventResponse typedResponse = new UnFreezeEventEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.from = (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.amt = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public void subscribeUnFreezeEventEvent(String fromBlock, String toBlock, List<String> otherTopics, EventCallback callback) {
        String topic0 = eventEncoder.encode(UNFREEZEEVENT_EVENT);
        subscribeEvent(ABI,BINARY,topic0,fromBlock,toBlock,otherTopics,callback);
    }

    public void subscribeUnFreezeEventEvent(EventCallback callback) {
        String topic0 = eventEncoder.encode(UNFREEZEEVENT_EVENT);
        subscribeEvent(ABI,BINARY,topic0,callback);
    }

    public static PointController load(String contractAddress, Client client, CryptoKeyPair credential) {
        return new PointController(contractAddress, client, credential);
    }

    public static PointController deploy(Client client, CryptoKeyPair credential) throws ContractException {
        return deploy(PointController.class, client, credential, getBinary(client.getCryptoSuite()), "");
    }

    public static class Struct0 extends DynamicStruct {
        public String addr;

        public BigInteger timestamp;

        public BigInteger beforePoint;

        public BigInteger afterPoint;

        public String remark;

        public Struct0(Address addr, Uint256 timestamp, Uint256 beforePoint, Uint256 afterPoint, Utf8String remark) {
            super(addr,timestamp,beforePoint,afterPoint,remark);
            this.addr = addr.getValue();
            this.timestamp = timestamp.getValue();
            this.beforePoint = beforePoint.getValue();
            this.afterPoint = afterPoint.getValue();
            this.remark = remark.getValue();
        }

        public Struct0(String addr, BigInteger timestamp, BigInteger beforePoint, BigInteger afterPoint, String remark) {
            super(new org.fisco.bcos.sdk.abi.datatypes.Address(addr),new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(timestamp),new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(beforePoint),new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(afterPoint),new org.fisco.bcos.sdk.abi.datatypes.Utf8String(remark));
            this.addr = addr;
            this.timestamp = timestamp;
            this.beforePoint = beforePoint;
            this.afterPoint = afterPoint;
            this.remark = remark;
        }
    }

    public static class LogRegisterEventResponse {
        public TransactionReceipt.Logs log;

        public String account;
    }

    public static class LogUnregisterEventResponse {
        public TransactionReceipt.Logs log;

        public String account;
    }

    public static class TransferEventEventResponse {
        public TransactionReceipt.Logs log;

        public String from;

        public String to;

        public BigInteger amt;
    }

    public static class FreezeEventEventResponse {
        public TransactionReceipt.Logs log;

        public String from;

        public BigInteger amt;
    }

    public static class UnFreezeEventEventResponse {
        public TransactionReceipt.Logs log;

        public String from;

        public BigInteger amt;
    }
}
